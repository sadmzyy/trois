{"version":3,"file":"trois.js","sources":["../src/tools.ts","../src/exploder/Exploder.ts","../src/utils/SceneUtils.ts","../src/utils/Viewer3DUtils.ts","../src/core/useRaycaster.ts","../src/core/usePointer.ts","../src/core/useThree.ts","../src/core/Renderer.ts","../src/core/Camera.ts","../src/core/OrthographicCamera.ts","../src/core/PerspectiveCamera.ts","../src/core/Scene.ts","../src/core/Object3D.ts","../src/core/Group.ts","../src/core/Raycaster.ts","../src/core/CubeCamera.ts","../src/core/axes/CoordinateAxes.ts","../src/core/axes/CoordinateAxesViewport.ts","../src/meshes/Mesh.ts","../src/geometries/Geometry.ts","../src/geometries/BoxGeometry.ts","../src/geometries/CircleGeometry.ts","../src/geometries/ConeGeometry.ts","../src/geometries/CylinderGeometry.ts","../src/geometries/DodecahedronGeometry.ts","../src/geometries/ExtrudeGeometry.ts","../src/geometries/IcosahedronGeometry.ts","../src/geometries/LatheGeometry.ts","../src/geometries/OctahedronGeometry.ts","../src/geometries/PlaneGeometry.ts","../src/geometries/PolyhedronGeometry.ts","../src/geometries/RingGeometry.ts","../src/geometries/SphereGeometry.ts","../src/geometries/ShapeGeometry.ts","../src/geometries/TetrahedronGeometry.ts","../src/geometries/TorusGeometry.ts","../src/geometries/TorusKnotGeometry.ts","../src/geometries/TubeGeometry.ts","../src/lights/Light.ts","../src/lights/AmbientLight.ts","../src/lights/DirectionalLight.ts","../src/lights/HemisphereLight.ts","../src/lights/PointLight.ts","../src/lights/RectAreaLight.ts","../src/lights/SpotLight.ts","../src/materials/Material.ts","../src/materials/MatcapMaterial.ts","../src/materials/ShaderMaterial.ts","../src/materials/SubsurfaceScatteringShader.ts","../src/materials/SubSurfaceMaterial.ts","../src/materials/Texture.ts","../src/materials/CubeTexture.ts","../src/materials/VideoTexture.ts","../src/meshes/Box.ts","../src/meshes/Circle.ts","../src/meshes/Cone.ts","../src/meshes/Cylinder.ts","../src/meshes/Dodecahedron.ts","../src/meshes/Icosahedron.ts","../src/meshes/Lathe.ts","../src/meshes/Octahedron.ts","../src/meshes/Plane.ts","../src/meshes/Polyhedron.ts","../src/meshes/Ring.ts","../src/meshes/Sphere.ts","../src/meshes/Tetrahedron.ts","../src/meshes/Text.ts","../src/meshes/Torus.ts","../src/meshes/TorusKnot.ts","../src/meshes/Tube.ts","../src/meshes/Image.ts","../src/meshes/InstancedMesh.ts","../src/meshes/Sprite.ts","../src/meshes/Points.ts","../src/models/Model.ts","../src/models/GLTF.ts","../src/models/FBX.ts","../src/effects/EffectComposer.ts","../src/effects/EffectPass.ts","../src/effects/RenderPass.ts","../src/effects/BokehPass.ts","../src/effects/FilmPass.ts","../src/effects/FXAAPass.ts","../src/effects/HalftonePass.ts","../src/effects/SMAAPass.ts","../src/effects/SSAOPass.ts","../src/shaders/default.ts","../src/shaders/TiltShift.ts","../src/effects/TiltShiftPass.ts","../src/effects/UnrealBloomPass.ts","../src/shaders/ZoomBlur.ts","../src/effects/ZoomBlurPass.ts","../src/plugin.ts","../src/utils/DecimalPrecisionUtils.ts","../src/utils/ExportUtils.ts","../src/utils/MaterialUtils.ts","../src/utils/Constants.ts","../src/utils/ObjectUtils.ts","../src/utils/PmremUtils.ts","../src/utils/SimplifyUtils.ts","../src/utils/SkyboxUtils.ts","../src/utils/UnitConversionUtils.ts","../src/use/useTextures.ts"],"sourcesContent":["import { ref, toRef, watch, WatchStopHandle } from 'vue'\r\n\r\ntype OptionSetter = (dst: any, key: string, value: any) => void\r\n\r\nexport function applyObjectProps(\r\n  dst: any,\r\n  options: Record<string, unknown>,\r\n  setter?: OptionSetter\r\n): void {\r\n  if (options instanceof Object) {\r\n    Object.entries(options).forEach(([key, value]) => {\r\n      if (setter) setter(dst, key, value)\r\n      else dst[key] = value\r\n    })\r\n  }\r\n}\r\n\r\nexport function bindObjectProp(\r\n  src: any,\r\n  prop: string,\r\n  dst: any,\r\n  apply = true,\r\n  setter?: OptionSetter\r\n): WatchStopHandle {\r\n  if (apply) applyObjectProps(dst, src[prop], setter)\r\n  const r = toRef(src, prop)\r\n  return watch(r, (value) => { applyObjectProps(dst, value, setter) })\r\n}\r\n\r\nexport function bindObjectProps(\r\n  src: any,\r\n  dst: any,\r\n  apply = true,\r\n  setter?: OptionSetter\r\n): WatchStopHandle {\r\n  if (apply) applyObjectProps(dst, src, setter)\r\n  const r = ref(src)\r\n  return watch(r, (value) => { applyObjectProps(dst, value, setter) }, { deep: true })\r\n}\r\n\r\nexport function setFromProp(o: Record<string, unknown>, prop: Record<string, unknown>): void {\r\n  if (prop instanceof Object) {\r\n    Object.entries(prop).forEach(([key, value]) => {\r\n      o[key] = value\r\n    })\r\n  }\r\n}\r\n\r\nexport function bindProps(src: any, props: string[], dst: any): void {\r\n  props.forEach(prop => {\r\n    bindProp(src, prop, dst, prop)\r\n  })\r\n}\r\n\r\nexport function bindProp(src: any, srcProp: string, dst: any, dstProp?: string): void {\r\n  const _dstProp = dstProp || srcProp\r\n  const ref = toRef(src, srcProp)\r\n  if (ref.value instanceof Object) {\r\n    setFromProp(dst[_dstProp], ref.value)\r\n    watch(ref, (value) => { setFromProp(dst[_dstProp], value) }, { deep: true })\r\n  } else {\r\n    if (ref.value !== undefined) dst[_dstProp] = src[srcProp]\r\n    watch(ref, (value) => { dst[_dstProp] = value })\r\n  }\r\n}\r\n\r\nexport function propsValues(props: Record<string, unknown>, exclude: string[] = []): Record<string, unknown> {\r\n  const values: Record<string, unknown> = {}\r\n  Object.entries(props).forEach(([key, value]) => {\r\n    if (!exclude || !exclude.includes(key)) {\r\n      values[key] = value\r\n    }\r\n  })\r\n  return values\r\n}\r\n\r\nexport function lerp(value1: number, value2: number, amount: number): number {\r\n  amount = amount < 0 ? 0 : amount\r\n  amount = amount > 1 ? 1 : amount\r\n  return value1 + (value2 - value1) * amount\r\n}\r\n\r\nexport function limit(val: number, min: number, max: number): number {\r\n  return val < min ? min : (val > max ? max : val)\r\n}\r\n\r\n// from https://github.com/pmndrs/drei/blob/master/src/useMatcapTexture.tsx\r\nconst MATCAP_ROOT = 'https://rawcdn.githack.com/emmelleppi/matcaps/9b36ccaaf0a24881a39062d05566c9e92be4aa0d'\r\nconst DEFAULT_MATCAP = '0404E8_0404B5_0404CB_3333FC'\r\n\r\nexport function getMatcapUrl(hash = DEFAULT_MATCAP, format = 1024): string {\r\n  const fileName = `${hash}${getMatcapFormatString(format)}.png`\r\n  return `${MATCAP_ROOT}/${format}/${fileName}`\r\n}\r\n\r\nfunction getMatcapFormatString(format: number) {\r\n  switch (format) {\r\n    case 64:\r\n      return '-64px'\r\n    case 128:\r\n      return '-128px'\r\n    case 256:\r\n      return '-256px'\r\n    case 512:\r\n      return '-512px'\r\n    default:\r\n      return ''\r\n  }\r\n}\r\n","import * as THREE from \"three\";\n\n/**\n * Exploder class is used to explode an object\n */\nexport default class Exploder {\n  static DEFAULT_SCALE = 1;\n  private scene: THREE.Scene;\n  private objectId: number; // target object to be exploded\n  public position: THREE.Vector3; // position of exploder\n  private scale: number; // power of exploder, means how far will a sub-object exploded away\n  private explodedTimes: number = 0; // an object can be exploded more than once\n  private isExplodeUp: boolean = false; // only explode at y direction\n\n  /**\n   * Constructor of Explode\n   * @param objectId target object id, that is going to be exploded\n   * @param position if undefined, will explode object by its center\n   * @param scale scale factor, 1 means 1 time farer away from exploder's position\n   */\n  public constructor(scene: THREE.Scene, objectId: number, position: THREE.Vector3 | undefined = undefined, scale: number = Exploder.DEFAULT_SCALE) {\n    this.scene = scene;\n    this.objectId = objectId;\n    if (!objectId) {\n      console.log(`[EXP] Invalid objectId: ${objectId}`);\n    }\n    this.scale = scale;\n    if (scale <= 0) {\n      console.log(`[EXP] Invalid scale: ${scale}`);\n    }\n    if (position) {\n      this.position = position;\n    } else {\n      this.position = new THREE.Vector3();\n      this.getObjectCenter(this.position);\n    }\n  }\n\n  /**\n   * Explode the object\n   */\n  public explode() {\n    if (!this.objectId || !this.position || !this.scale) {\n      console.log(`[EXP] Invalid objectId: ${this.objectId}, or position: ${this.position}, or this.power: ${this.scale}`);\n      return;\n    }\n    const object = this.scene.getObjectById(this.objectId);\n    if (!object || !object.children) {\n      console.log(\"[EXP] No children to explode!\");\n      return;\n    }\n    console.log(`[EXP] Exploding ${object.name} at: ${this.position.x}, ${this.position.y}, ${this.position.z}`);\n    object.children.forEach(childObj => {\n      if (childObj instanceof THREE.InstancedMesh) {\n        const matrix = new THREE.Matrix4();\n        const pos = new THREE.Vector3();\n        const quaternion = new THREE.Quaternion();\n        const scale = new THREE.Vector3();\n        for (let i = 0; i < childObj.count; ++i) {\n          // gets position, update position, then set a new position\n          childObj.getMatrixAt(i, matrix);\n          matrix.decompose(pos, quaternion, scale);\n          // console.log(`obj '${childObj.name}', [${i}] old position: (${pos.x}, ${pos.y}, ${pos.z})`)\n          if (!this.isExplodeUp) {\n            const distance = pos.clone().sub(this.position); // get distance from childObj to exploder position\n            pos.addScaledVector(distance, this.scale);\n          } else {\n            const distance2 = (pos.z - this.position.z) * this.scale;\n            pos.setZ(pos.z + distance2);\n          }\n          // console.log(`obj '${childObj.name}', [${i}] new position: (${pos.x}, ${pos.y}, ${pos.z})`)\n          matrix.setPosition(pos);\n          childObj.setMatrixAt(i, matrix);\n        }\n        childObj.matrixWorldNeedsUpdate = true; // not necessary?\n        childObj.instanceMatrix.needsUpdate = true; // need to call this to upate it\n      } else {\n        const pos = childObj.position.clone();\n        if (!this.isExplodeUp) {\n          const distance = pos.sub(this.position); // get distance from childObj to exploder position\n          childObj.position.addScaledVector(distance, this.scale);\n          // if child has children, update their position too\n          // childObj.children.forEach(o => o.position.addScaledVector(distance, this.scale))\n        } else {\n          const distance2 = (pos.z - this.position.z) * this.scale;\n          childObj.position.setZ(pos.z + distance2);\n        }\n      }\n      childObj.updateMatrix(); // need to call it since object.matrixAutoUpdate is false\n    });\n    this.explodedTimes++;\n  }\n\n  /**\n   * Unexplode the object\n   */\n  public unexplode() {\n    const object = this.scene.getObjectById(this.objectId);\n    if (!object || !object.children) {\n      console.log(\"[EXP] No children to explode!\");\n      return;\n    }\n    console.log(`[EXP] Unexploding ${object.name} at: ${this.position.x}, ${this.position.y}, ${this.position.z}`);\n    for (let i = this.explodedTimes; i > 0; --i) {\n      object.children.forEach(childObj => {\n        if (childObj instanceof THREE.InstancedMesh) {\n          const matrix = new THREE.Matrix4();\n          const pos = new THREE.Vector3();\n          const quaternion = new THREE.Quaternion();\n          const scale = new THREE.Vector3();\n          const factor = this.scale / (1 + this.scale);\n          for (let i = 0; i < childObj.count; ++i) {\n            // gets position, update position, then set a new position\n            childObj.getMatrixAt(i, matrix);\n            matrix.decompose(pos, quaternion, scale);\n            // console.log(`obj '${childObj.name}', [${i}] old position: (${pos.x}, ${pos.y}, ${pos.z})`)\n            if (!this.isExplodeUp) {\n              const dist = pos.clone().sub(this.position); // need to use a cloned position here\n              dist.x *= factor;\n              dist.y *= factor;\n              dist.z *= factor;\n              pos.sub(dist);\n            } else {\n              const dist2 = (pos.z - this.position.z) * factor;\n              pos.setZ(pos.z - dist2);\n            }\n            // console.log(`obj '${childObj.name}', [${i}] new position: (${pos.x}, ${pos.y}, ${pos.z})`)\n            matrix.setPosition(pos);\n            childObj.setMatrixAt(i, matrix);\n          }\n          childObj.matrixWorldNeedsUpdate = true; // not necessary?\n          childObj.instanceMatrix.needsUpdate = true; // need to call this to upate it\n        } else {\n          const pos = childObj.position.clone();\n          const factor = this.scale / (1 + this.scale);\n          if (!this.isExplodeUp) {\n            const dist = pos.sub(this.position);\n            dist.x *= factor;\n            dist.y *= factor;\n            dist.z *= factor;\n            childObj.position.sub(dist);\n          } else {\n            const dist2 = (pos.z - this.position.z) * factor;\n            childObj.position.setZ(pos.z - dist2);\n          }\n        }\n        childObj.updateMatrix(); // need to call it since object.matrixAutoUpdate is false\n      });\n    }\n  }\n\n  public setOnlyExplodeUp(onlyExplodeUp: boolean) {\n    this.isExplodeUp = onlyExplodeUp;\n  }\n\n  private getObjectCenter(center: THREE.Vector3) {\n    const bbox = new THREE.Box3();\n    if (!this.objectId) {\n      console.log(`[EXP] Invalid objectId: ${this.objectId}`);\n      return;\n    }\n    const object = this.scene.getObjectById(this.objectId);\n    if (!object || !object.children) {\n      console.log(\"[EXP] No children to explode!\");\n      return;\n    }\n    object.traverse(obj => {\n      bbox.expandByObject(obj);\n    });\n    bbox.getCenter(center);\n  }\n}\n","import * as THREE from \"three\";\nimport Exploder from \"../exploder/Exploder\";\n\n/**\n * Util methods about Scene\n */\nexport class SceneUtils {\n  /**\n   * Get all visible objects' bounding box in a scene.\n   * @param scene\n   */\n  static getVisibleObjectBoundingBox(scene: THREE.Scene): THREE.Box3 {\n    const bbox = new THREE.Box3();\n    scene.traverseVisible((object) => {\n      if (object instanceof THREE.Mesh && object.userData.selectable !== false) {\n        bbox.expandByObject(object);\n      }\n    });\n    return bbox;\n  }\n\n  public static getObjectsBoundingBox(scene: THREE.Scene, objectUuids: string[]): THREE.Box3 {\n    const bbox = new THREE.Box3();\n    objectUuids.forEach(uuid => {\n      const object = scene.getObjectByProperty(\"uuid\", uuid);\n      if (object) {\n        const box = SceneUtils.getBoundingBox(object); // use getBoundingBox rather than expandByObject to work for InstancedMesh\n        if (!box.isEmpty()) {\n          bbox.union(box);\n        }\n      }\n    });\n    return bbox;\n  }\n\n  /**\n   * Box3.expandByObject() doesn't work well in some case.\n   * E.g. when object's position is far away from object's center?\n   * When objects are instanced?\n   * That's why we need a method to find bounding box by object's children!\n   * And, better to do sampling in case there are too many children.\n   */\n  public static getBoundingBox(object: THREE.Object3D, sampling = true): THREE.Box3 {\n    const bbox = new THREE.Box3();\n    if (object instanceof THREE.InstancedMesh) {\n      return SceneUtils.getInstancedMeshBoundingBox(object);\n    }\n    if (object.children.length === 0) {\n      bbox.expandByObject(object); // for leaf object, call expandByObject directly\n      return bbox;\n    }\n    // now, need to get geometry from children\n    const count = object.children.length;\n    let divisor = 1; // used for sampling\n    if (count > 20) divisor = 3; // sampling 1/3\n    if (count > 100) divisor = 5;\n    if (count > 200) divisor = 10;\n    if (count > 1000) divisor = 100; // sampling 1/100\n    object.updateMatrixWorld(false);\n    // const matrixWorld = object.matrixWorld\n    for (let i = 0; i < count; ++i) {\n      const child = object.children[i] as any;\n      // if don't do sampling, expand by each children; Otherwise, only expand by some children\n      if (!sampling || i % divisor === 0) {\n        child.updateMatrix();\n        if (child instanceof THREE.InstancedMesh) {\n          const box = SceneUtils.getInstancedMeshBoundingBox(child);\n          // box.applyMatrix4(matrixWorld) // need to consider parent's world matrix\n          bbox.union(box);\n        } else {\n          bbox.expandByObject(child);\n        }\n      }\n    }\n    return bbox;\n  }\n\n  /**\n   * InstancedMesh is different, we need to get its child meshes in order to get the bounding box\n   */\n  public static getInstancedMeshBoundingBox(mesh: THREE.InstancedMesh): THREE.Box3 {\n    const bbox = new THREE.Box3();\n    const matrix = new THREE.Matrix4();\n    for (let i = 0; i < mesh.count; ++i) {\n      mesh.getMatrixAt(i, matrix);\n      const geom = mesh.geometry.clone();\n      if (geom.boundingBox) {\n        const box = geom.boundingBox.applyMatrix4(matrix);\n        if (!box.isEmpty() && !isNaN(box.min.x) && !isNaN(box.min.y) && !isNaN(box.min.z) && !isNaN(box.max.x) && !isNaN(box.max.y) && !isNaN(box.max.z)) {\n          bbox.union(box);\n        }\n      }\n    }\n    bbox.applyMatrix4(mesh.matrixWorld); // need to apply matrixWorld\n    return bbox;\n  }\n\n  private static explodeObject(object: THREE.Object3D, scene: THREE.Scene, exploderDict: { [objId: number]: Exploder }, onlyExplodeUp = false) {\n    if (exploderDict[object.id]) {\n      // if there is existing explode, probably it is exploded already. Need to unexplode it first.\n      exploderDict[object.id].unexplode();\n    }\n    const position = new THREE.Vector3();\n    SceneUtils.getPositionCenter(object, position);\n    const exploder = new Exploder(scene, object.id, position);\n    exploder.setOnlyExplodeUp(onlyExplodeUp);\n    exploder.explode();\n    exploderDict[object.id] = exploder;\n  }\n\n  static explodeObjects(scene: THREE.Scene, exploderDict: { [objId: number]: Exploder }, objectUuids: string[], onlyExplodeUp = false) {\n    // const exploderDict: { [objId: number]: Exploder } = {}\n    scene.traverse(object => {\n      if (objectUuids.find(id => id === object.uuid)) {\n        // convert uuid to id, and new Exploder for each object to be exploded\n        if (object.children && object.children.length === 1) {\n          // if there is only one child, explode its child\n          SceneUtils.explodeObject(object.children[0], scene, exploderDict, onlyExplodeUp);\n        } else {\n          SceneUtils.explodeObject(object, scene, exploderDict, onlyExplodeUp);\n        }\n      }\n    });\n    return exploderDict;\n  }\n\n  static unexplodeObjects(scene: THREE.Scene, exploderDict: { [objId: number]: Exploder }) {\n    scene.traverse(object => {\n      const exploder = exploderDict[object.id];\n      if (exploder) {\n        exploder.unexplode();\n        delete exploderDict[object.id];\n      }\n    });\n  }\n\n  public static getPositionCenter(object: THREE.Object3D, center: THREE.Vector3) {\n    const bbox = SceneUtils.getBoundingBox(object);\n    bbox.getCenter(center);\n    center.y = bbox.min.y; // while, set the elevation value to the min, rather than the real center of y-axis\n  }\n}\n","import * as THREE from \"three\";\nimport { SceneUtils } from \"./SceneUtils\";\n\nexport enum Views {\n  Top = \"Top\",\n  Bottom = \"Bottom\",\n  Front = \"Front\",\n  Back = \"Back\",\n  Left = \"Left\",\n  Right = \"Right\"\n}\n\n/**\n * Util methods about Viewer3D\n */\nexport class Viewer3DUtils {\n  /**\n   * Calculates camera position and look at point by given scene\n   * @param scene\n   * @param view\n   * @param eye this method pass out it to caller\n   * @param look this method pass out it to caller\n   */\n  static getCameraPositionByView(scene: THREE.Scene, view: Views | string, eye: THREE.Vector3, look: THREE.Vector3) {\n    const bbox = SceneUtils.getVisibleObjectBoundingBox(scene);\n    Viewer3DUtils.getCameraPositionByBboxAndView(bbox, view, eye, look);\n  }\n\n  /**\n   * Calculates camera position and look at point by given object uuids\n   * @param scene\n   * @param objectUuids\n   * @param view\n   * @param eye\n   * @param look\n   */\n  public static getCameraPositionByObjectUuids(scene: THREE.Scene, objectUuids: string[], view: Views | string, eye: THREE.Vector3, look: THREE.Vector3) {\n    const bbox = SceneUtils.getObjectsBoundingBox(scene, objectUuids);\n    Viewer3DUtils.getCameraPositionByBboxAndView(bbox, view, eye, look);\n  }\n\n  /**\n   * Gets camera's new position and target(lookAt) by given bbox and camera's current position\n   */\n  public static getCameraPositionByObjects(objects: THREE.Object3D[], camera: THREE.Camera, eye: THREE.Vector3, look: THREE.Vector3) {\n    const bbox = new THREE.Box3();\n    objects.forEach(object => {\n      const box = SceneUtils.getBoundingBox(object);\n      bbox.union(box);\n    });\n    Viewer3DUtils.getCameraPositionByBboxAndCamera(bbox, camera, eye, look);\n  }\n\n  /**\n   * Gets camera's new position and target(lookAt) by given bbox and camera's current position\n   */\n  public static getCameraPositionByBboxAndCamera(bbox: THREE.Box3, camera: THREE.Camera, eye: THREE.Vector3, look: THREE.Vector3) {\n    if (bbox.isEmpty()) {\n      return;\n    }\n    // the distance between target object and camera depends on the size of object,\n    // simply use object's summation of x, y, z size,\n    // then multiply a factor, it looks better\n    const DISTANCE_FACTOR = 1.2;\n    let distance = (bbox.max.x - bbox.min.x) + (bbox.max.y - bbox.min.y) + (bbox.max.z - bbox.min.z);\n    distance *= DISTANCE_FACTOR;\n    // make camera a little farer, it looks better\n    const distanceVector = new THREE.Vector3(distance, distance, distance);\n    const cx = (bbox.min.x + bbox.max.x) / 2; // bbox's center x\n    const cy = (bbox.min.y + bbox.max.y) / 2;\n    const cz = (bbox.min.z + bbox.max.z) / 2;\n    look.set(cx, cy, cz);\n\n    const oldPostion = new THREE.Vector3();\n    camera.getWorldPosition(oldPostion);\n    const dir = oldPostion.sub(look).normalize();\n    // change camera's direction to look at new target first, then move camera to a proper distance with target\n    const pos = dir.multiply(distanceVector).add(look);\n    eye.set(pos.x, pos.y, pos.z);\n  }\n\n  /**\n   * Gets camera's new position and target(lookAt) by given bbox and view\n   */\n  public static getCameraPositionByBboxAndView(bbox: THREE.Box3, view: Views | string, eye: THREE.Vector3, look: THREE.Vector3) {\n    if (bbox.isEmpty()) {\n      return;\n    }\n    // make camera a little farer, it looks better\n    const distance = (bbox.max.x - bbox.min.x) + (bbox.max.y - bbox.min.y) + (bbox.max.z - bbox.min.z);\n    // Make delta a number between 0.5 and 1. And delta is smaller as distance grows.\n    const delta = (0.5 + (0.5 / Math.pow(Math.E, distance / 100))) * distance;\n    let x = 0; // bbox.min.x + (bbox.max.x - bbox.min.x) // center by default\n    let y = bbox.min.y + (bbox.max.y - bbox.min.y); // for front/back/left/right, give y a certain value, thus looks better\n    let z = 0; // bbox.min.z + (bbox.max.z - bbox.min.z)\n    const cx = (bbox.min.x + bbox.max.x) / 2; // bbox's center x\n    const cy = (bbox.min.y + bbox.max.y) / 2;\n    const cz = (bbox.min.z + bbox.max.z) / 2;\n    if (view === Views.Top) {\n      y = bbox.max.y + delta;\n    } else if (view === Views.Bottom) {\n      y = bbox.min.y - delta;\n    } else if (view === Views.Front) {\n      z = bbox.max.z + delta;\n      x = cx;\n    } else if (view === Views.Back) {\n      z = bbox.min.z - delta;\n      x = cx;\n    } else if (view === Views.Left) {\n      x = bbox.min.x - delta;\n      z = cz;\n    } else if (view === Views.Right) {\n      x = bbox.max.x + delta;\n      z = cz;\n    }\n    eye.x = x;\n    eye.y = y;\n    eye.z = z;\n    look.x = cx;\n    look.y = cy;\n    look.z = cz;\n  }\n\n  /**\n   * Sleep a while\n   */\n  public static async sleep(ms: number) {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(\"\");\n      }, ms);\n    });\n  }\n\n  // need to store the objects that is twinkling, do this to avoid one object to be\n  // twinkled while it is twinkling, that can be buggy!\n  private static twinklingObjectUuids: { [uuid: string]: boolean } = {};\n\n  /**\n   * Twinkle the object several times\n   */\n  public static async twinkle(obj: THREE.Object3D, ms: number = 500) {\n    const uuids = Viewer3DUtils.twinklingObjectUuids;\n    if (uuids[obj.uuid]) {\n      return; // avoid re-entry\n    }\n    uuids[obj.uuid] = true;\n\n    obj.visible = !obj.visible;\n    await this.sleep(ms);\n    obj.visible = !obj.visible;\n    await this.sleep(ms);\n    obj.visible = !obj.visible;\n    await this.sleep(ms);\n    obj.visible = !obj.visible;\n    await this.sleep(ms);\n    obj.visible = !obj.visible;\n    await this.sleep(ms);\n    obj.visible = !obj.visible;\n\n    delete uuids[obj.uuid]; // clear the flag\n  }\n}\n","import { Camera, Intersection, Object3D, Plane, Raycaster, Vector2, Vector3 } from 'three'\r\n\r\nexport interface RaycasterInterface {\r\n  position: Vector3\r\n  updatePosition(coords: Vector2): void\r\n  intersect(coords: Vector2, objects: Object3D[], recursive?: boolean): Intersection[],\r\n}\r\n\r\nexport interface RaycasterConfigInterface {\r\n  camera: Camera\r\n  resetPosition?: Vector3\r\n}\r\n\r\nexport default function useRaycaster(options: RaycasterConfigInterface): RaycasterInterface {\r\n  const {\r\n    camera,\r\n    resetPosition = new Vector3(0, 0, 0),\r\n  } = options\r\n\r\n  const raycaster = new Raycaster()\r\n  const position = resetPosition.clone()\r\n  const plane = new Plane(new Vector3(0, 0, 1), 0)\r\n\r\n  const updatePosition = (coords: Vector2) => {\r\n    raycaster.setFromCamera(coords, camera)\r\n    camera.getWorldDirection(plane.normal)\r\n    raycaster.ray.intersectPlane(plane, position)\r\n  }\r\n\r\n  const intersect = (coords: Vector2, objects: Object3D[], recursive = false) => {\r\n    raycaster.setFromCamera(coords, camera)\r\n    return raycaster.intersectObjects(objects, recursive)\r\n  }\r\n\r\n  return {\r\n    position,\r\n    updatePosition,\r\n    intersect,\r\n  }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-empty-function */\r\nimport { Camera, InstancedMesh, Intersection, Object3D, Vector2, Vector3, Mesh } from 'three'\r\nimport useRaycaster from './useRaycaster'\r\n\r\nexport interface PointerEventInterface {\r\n  type: 'pointerenter' | 'pointermove' | 'pointerleave' | 'click' | 'dblclick'\r\n  position?: Vector2\r\n  positionN?: Vector2\r\n  positionV3?: Vector3\r\n}\r\n\r\nexport interface PointerIntersectEventInterface {\r\n  type: 'pointerenter' | 'pointerover' | 'pointermove' | 'pointerleave' | 'click' | 'dblclick'\r\n  component: any\r\n  over?: boolean\r\n  intersect?: Intersection\r\n}\r\n\r\nexport interface PointerSelectObjectInterface {\r\n  object?: Object3D\r\n  instanceIdOrFaceIndexId?: number\r\n  depthTest: boolean | undefined\r\n}\r\n\r\nexport type PointerCallbackType = (e: PointerEventInterface) => void\r\nexport type PointerIntersectCallbackType = (e: PointerIntersectEventInterface) => void\r\nexport type PointerSelectObjectCallbackType = (p: PointerSelectObjectInterface) => void\r\n\r\nexport interface PointerPublicConfigInterface {\r\n  intersectMode?: 'frame'\r\n  intersectRecursive?: boolean\r\n  touch?: boolean\r\n  resetOnEnd?: boolean\r\n  onEnter?: PointerCallbackType\r\n  onMove?: PointerCallbackType\r\n  onLeave?: PointerCallbackType\r\n  onClick?: PointerCallbackType\r\n  onIntersectEnter?: PointerIntersectCallbackType\r\n  onIntersectOver?: PointerIntersectCallbackType\r\n  onIntersectMove?: PointerIntersectCallbackType\r\n  onIntersectLeave?: PointerIntersectCallbackType\r\n  onIntersectClick?: PointerIntersectCallbackType\r\n  onSelectObject?: PointerSelectObjectCallbackType\r\n}\r\n\r\nexport interface PointerConfigInterface extends PointerPublicConfigInterface {\r\n  camera: Camera\r\n  domElement: HTMLCanvasElement\r\n  intersectObjects: Object3D[] | (() => Object3D[])\r\n  selectedObject?: any | undefined\r\n  flyToSelectedObject?: () => void\r\n}\r\n\r\nexport interface PointerInterface {\r\n  position: Vector2\r\n  positionN: Vector2\r\n  positionV3: Vector3\r\n  intersectObjects: Object3D[] | (() => Object3D[])\r\n  selectedObject: any | undefined\r\n  listeners: boolean\r\n  mouseDoubleClicked: boolean\r\n  addListeners(cb: void): void\r\n  removeListeners(cb: void): void\r\n  intersect(): void\r\n}\r\n\r\nexport default function usePointer(options: PointerConfigInterface): PointerInterface {\r\n  const {\r\n    camera,\r\n    domElement,\r\n    intersectObjects,\r\n    selectedObject = undefined,\r\n    intersectRecursive = false,\r\n    touch = true,\r\n    resetOnEnd = false,\r\n    onEnter = () => {},\r\n    onMove = () => {},\r\n    onLeave = () => {},\r\n    onClick = () => {},\r\n    onIntersectEnter = () => {},\r\n    onIntersectOver = () => {},\r\n    onIntersectMove = () => {},\r\n    onIntersectLeave = () => {},\r\n    onIntersectClick = () => {},\r\n    onSelectObject,\r\n    flyToSelectedObject,\r\n  } = options\r\n\r\n  const position = new Vector2(0, 0)\r\n  const positionN = new Vector2(0, 0)\r\n\r\n  const raycaster = useRaycaster({ camera })\r\n  const positionV3 = raycaster.position\r\n\r\n  const obj: PointerInterface = {\r\n    position,\r\n    positionN,\r\n    positionV3,\r\n    intersectObjects,\r\n    selectedObject,\r\n    listeners: false,\r\n    mouseDoubleClicked: false,\r\n    addListeners,\r\n    removeListeners,\r\n    intersect,\r\n  }\r\n\r\n  return obj\r\n\r\n  function reset() {\r\n    position.set(0, 0)\r\n    positionN.set(0, 0)\r\n    positionV3.set(0, 0, 0)\r\n  }\r\n\r\n  function updatePosition(event: TouchEvent | MouseEvent) {\r\n    let x, y\r\n    // @ts-ignore\r\n    if (event.touches && event.touches.length > 0) {\r\n      x = (<TouchEvent>event).touches[0].clientX\r\n      y = (<TouchEvent>event).touches[0].clientY\r\n    } else {\r\n      x = (<MouseEvent>event).clientX\r\n      y = (<MouseEvent>event).clientY\r\n    }\r\n\r\n    const rect = domElement.getBoundingClientRect()\r\n    position.x = x - rect.left\r\n    position.y = y - rect.top\r\n    positionN.x = (position.x / rect.width) * 2 - 1\r\n    positionN.y = -(position.y / rect.height) * 2 + 1\r\n    raycaster.updatePosition(positionN)\r\n  }\r\n\r\n  function intersect() {\r\n    const _intersectObjects = getIntersectObjects()\r\n    if (_intersectObjects.length) {\r\n      const intersects = raycaster.intersect(positionN, _intersectObjects, intersectRecursive)\r\n      const offObjects: Object3D[] = [..._intersectObjects]\r\n      const iMeshes: InstancedMesh[] = []\r\n\r\n      intersects.forEach(intersect => {\r\n        const { object } = intersect\r\n        const component = getComponent(object)\r\n\r\n        // only once for InstancedMesh\r\n        if (object instanceof InstancedMesh) {\r\n          if (iMeshes.indexOf(object) !== -1) return\r\n          iMeshes.push(object)\r\n        }\r\n\r\n        if (!object.userData.over) {\r\n          object.userData.over = true\r\n          const overEvent: PointerIntersectEventInterface = { type: 'pointerover', over: true, component, intersect }\r\n          const enterEvent: PointerIntersectEventInterface = { ...overEvent, type: 'pointerenter' }\r\n          onIntersectOver(overEvent)\r\n          onIntersectEnter(enterEvent)\r\n          component?.onPointerOver?.(overEvent)\r\n          component?.onPointerEnter?.(enterEvent)\r\n        }\r\n\r\n        const moveEvent: PointerIntersectEventInterface = { type: 'pointermove', component, intersect }\r\n        onIntersectMove(moveEvent)\r\n        component?.onPointerMove?.(moveEvent)\r\n\r\n        offObjects.splice(offObjects.indexOf((<Object3D>object)), 1)\r\n      })\r\n\r\n      offObjects.forEach(object => {\r\n        const component = getComponent(object)\r\n        if (object.userData.over) {\r\n          object.userData.over = false\r\n          const overEvent: PointerIntersectEventInterface = { type: 'pointerover', over: false, component }\r\n          const leaveEvent: PointerIntersectEventInterface = { ...overEvent, type: 'pointerleave' }\r\n          onIntersectOver(overEvent)\r\n          onIntersectLeave(leaveEvent)\r\n          component?.onPointerOver?.(overEvent)\r\n          component?.onPointerLeave?.(leaveEvent)\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  function pointerEnter(event: TouchEvent | MouseEvent) {\r\n    updatePosition(event)\r\n    onEnter({ type: 'pointerenter', position, positionN, positionV3 })\r\n  }\r\n\r\n  function pointerMove(event: TouchEvent | MouseEvent) {\r\n    updatePosition(event)\r\n    onMove({ type: 'pointermove', position, positionN, positionV3 })\r\n    intersect()\r\n  }\r\n\r\n  // function pointerClick(event: TouchEvent | MouseEvent) {\r\n  //   updatePosition(event)\r\n  //   const _intersectObjects = getIntersectObjects()\r\n  //   console.log(_intersectObjects)\r\n  //   if (_intersectObjects.length) {\r\n  //     const intersects = raycaster.intersect(positionN, _intersectObjects, intersectRecursive)\r\n  //     const iMeshes: InstancedMesh[] = []\r\n  //     intersects.forEach(intersect => {\r\n  //       const { object } = intersect\r\n  //       const component = getComponent(object)\r\n\r\n  //       // only once for InstancedMesh\r\n  //       if (object instanceof InstancedMesh) {\r\n  //         if (iMeshes.indexOf(object) !== -1) return\r\n  //         iMeshes.push(object)\r\n  //       }\r\n\r\n  //       const event: PointerIntersectEventInterface = { type: 'click', component, intersect }\r\n  //       onIntersectClick(event)\r\n  //       component?.onClick?.(event)\r\n  //     })\r\n  //   }\r\n  //   onClick({ type: 'click', position, positionN, positionV3 })\r\n  // }\r\n\r\n  function pointerClick(event: TouchEvent | MouseEvent) {\r\n    updatePosition(event)\r\n    const _intersectObjects = getIntersectObjects()\r\n    console.log(_intersectObjects)\r\n    if (_intersectObjects.length) {\r\n      const intersects = raycaster.intersect(positionN, _intersectObjects, intersectRecursive)\r\n      const intersect = getFirstIntersect(intersects)\r\n\r\n      const { object } = intersect\r\n      const component = getComponent(object)\r\n      // only once for InstancedMesh\r\n      if (object instanceof InstancedMesh) {\r\n        return\r\n      }\r\n\r\n      const event: PointerIntersectEventInterface = { type: 'click', component, intersect }\r\n      onIntersectClick(event)\r\n      component?.onClick?.(event)\r\n    }\r\n    onClick({ type: 'click', position, positionN, positionV3 })\r\n  }\r\n\r\n  function pointerUp(event: PointerEvent) {\r\n    if (!obj.mouseDoubleClicked) {\r\n      // do not run immediately, because it can be a double click\r\n      setTimeout(onPointerUp(event), 200)\r\n    }\r\n    if (obj.mouseDoubleClicked) {\r\n      setTimeout(() => { obj.mouseDoubleClicked = false }, 200)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * When 'pointerup' event is triggered, we don't know if it is a dblclick.\r\n   * So, need to wait for 200ms etc. to see if there is another mouse click.\r\n   */\r\n  function onPointerUp(event: MouseEvent) {\r\n    return () => {\r\n      if (!obj.mouseDoubleClicked) {\r\n        // only run it when it is not a dblclick event\r\n        pointerClick(event)\r\n        // viewer.enableRender();\r\n      }\r\n    }\r\n  }\r\n\r\n  function pointerDblClick(event: TouchEvent | MouseEvent) {\r\n    obj.mouseDoubleClicked = true\r\n    pointerClick(event)\r\n    flyToSelectedObject && flyToSelectedObject()\r\n  }\r\n\r\n  function pointerLeave() {\r\n    if (resetOnEnd) reset()\r\n    onLeave({ type: 'pointerleave' })\r\n  }\r\n\r\n  function getFirstIntersect(intersections: Intersection[]): Intersection {\r\n    const firstIntersect = intersections.find(intersect => {\r\n      const object = intersect.object\r\n      // exclude invisible objects\r\n      // exclude non-selectable non-mesh objects, ground, outline, etc. It's kind of complex, but gonna be wired if user can select another object behand a mesh.\r\n      return object.visible && (object.userData.selectable !== false || object instanceof Mesh)\r\n    })\r\n    let object = (firstIntersect && firstIntersect.object) || undefined\r\n    let instanceId\r\n    if (object) {\r\n      if (object.userData.selectable === false) {\r\n        // If the first intersect object is not selectable (sky, ground, merged mesh, etc.),\r\n        // don't select anything (don't select the second object, that seems wired).\r\n        console.log(`[Viewer] object(type: ${object.type}, name: ${object.name}) not selectable!`)\r\n        object = undefined\r\n      } else if (object instanceof InstancedMesh) {\r\n        instanceId = (firstIntersect as Intersection).instanceId\r\n        if (obj.selectedObject && obj.selectedObject.uuid === object.uuid && obj.selectedObject.userData.instanceId === instanceId) {\r\n          // if the same InstancedMesh is selected and with the same instanceId, then deselect it\r\n          object = undefined\r\n        }\r\n      // donna know why I cannot use \"instanceof IFCModel\" here\r\n      } else if (obj.selectedObject && obj.selectedObject.uuid === object.uuid) {\r\n        // if one object is selected twice, deselect it\r\n        object = undefined\r\n      }\r\n      // else if ((object as IFCModel).ifcManager) {\r\n      //   // const ifcObj = object as IFCModel;\r\n      //   const faceIndex = (firstIntersect && firstIntersect.faceIndex) || -1;\r\n      //   instanceId = faceIndex; // for IFCModel, instanceId means faceIndex!!\r\n      //   if (selectedObject && selectedObject.userData.faceIndex === faceIndex) {\r\n      //     // if the same IFCModel is selected and with the same instanceId, then deselect it\r\n      //     object = undefined;\r\n      //   }\r\n      // }\r\n    }\r\n    if (onSelectObject) {\r\n      object\r\n        ? onSelectObject({\r\n          object: object, instanceIdOrFaceIndexId: instanceId,\r\n          depthTest: undefined,\r\n        })\r\n        : clearSelection()\r\n    }\r\n\r\n    return (firstIntersect as Intersection)\r\n  }\r\n\r\n  /**\r\n   * Clears the current selection\r\n   */\r\n  function clearSelection() {\r\n    onSelectObject && onSelectObject({ depthTest: undefined }) // simply select nothing\r\n  }\r\n\r\n  function getComponent(object: Object3D) {\r\n    if (object.userData.component) return object.userData.component\r\n\r\n    let parent = object.parent\r\n    while (parent) {\r\n      if (parent.userData.component) {\r\n        return parent.userData.component\r\n      }\r\n      parent = parent.parent\r\n    }\r\n\r\n    return undefined\r\n  }\r\n\r\n  function getIntersectObjects() {\r\n    if (typeof intersectObjects === 'function') {\r\n      return intersectObjects()\r\n    } else return intersectObjects\r\n  }\r\n\r\n  function addListeners() {\r\n    domElement.addEventListener('mouseenter', pointerEnter)\r\n    domElement.addEventListener('mousemove', pointerMove)\r\n    domElement.addEventListener('mouseleave', pointerLeave)\r\n    // domElement.addEventListener('click', pointerClick)\r\n    domElement.addEventListener('pointerup', pointerUp)\r\n    domElement.addEventListener('dblclick', pointerDblClick)\r\n    if (touch) {\r\n      domElement.addEventListener('touchstart', pointerEnter)\r\n      domElement.addEventListener('touchmove', pointerMove)\r\n      domElement.addEventListener('touchend', pointerLeave)\r\n    }\r\n    obj.listeners = true\r\n  }\r\n\r\n  function removeListeners() {\r\n    domElement.removeEventListener('mouseenter', pointerEnter)\r\n    domElement.removeEventListener('mousemove', pointerMove)\r\n    domElement.removeEventListener('mouseleave', pointerLeave)\r\n    // domElement.removeEventListener('click', pointerClick)\r\n    domElement.removeEventListener('pointerup', pointerUp)\r\n    domElement.removeEventListener('dblclick', pointerDblClick)\r\n\r\n    domElement.removeEventListener('touchstart', pointerEnter)\r\n    domElement.removeEventListener('touchmove', pointerMove)\r\n    domElement.removeEventListener('touchend', pointerLeave)\r\n    obj.listeners = false\r\n  }\r\n}\r\n","import { Camera, Object3D, OrthographicCamera, PerspectiveCamera, Scene, WebGLRenderer, WebGLRendererParameters, InstancedMesh, Material, Matrix4, Mesh, Color, MeshStandardMaterial, MeshPhongMaterial, MeshBasicMaterial, LineBasicMaterial, MeshLambertMaterial, DoubleSide, Vector3 } from 'three'\r\nimport * as TWEEN from '@tweenjs/tween.js'\r\nimport { Viewer3DUtils } from \"../utils/Viewer3DUtils\"\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js'\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js'\r\nimport usePointer, { PointerConfigInterface, PointerPublicConfigInterface, PointerInterface, PointerSelectObjectInterface } from './usePointer'\r\n\r\nexport interface SizeInterface {\r\n  width: number\r\n  height: number\r\n  wWidth: number\r\n  wHeight: number\r\n  ratio: number\r\n}\r\n\r\nexport interface ThreeConfigInterface {\r\n  params?: WebGLRendererParameters\r\n  canvas?: HTMLCanvasElement\r\n  antialias: boolean\r\n  alpha: boolean\r\n  autoClear: boolean\r\n  orbitCtrl: boolean | Record<string, unknown>\r\n  pointer: boolean | PointerPublicConfigInterface\r\n  resize: boolean | string\r\n  width?: number\r\n  height?: number\r\n  onResize?(size: SizeInterface): void\r\n  [index:string]: any\r\n}\r\n\r\nexport interface ThreeInterface {\r\n  config: ThreeConfigInterface\r\n  renderer: WebGLRenderer\r\n  composer?: EffectComposer\r\n  camera?: Camera\r\n  cameraCtrl?: OrbitControls\r\n  tween?: any\r\n  scene?: Scene\r\n  pointer?: PointerInterface\r\n  size: SizeInterface\r\n  init(): boolean\r\n  dispose(): void\r\n  render(): void\r\n  renderC(): void\r\n  setSize(width: number, height: number): void\r\n  addIntersectObject(o: Object3D): void\r\n  removeIntersectObject(o: Object3D): void\r\n}\r\n\r\n/**\r\n * Three.js helper\r\n */\r\nexport default function useThree(params: ThreeConfigInterface): ThreeInterface {\r\n  // default config\r\n  const config: ThreeConfigInterface = {\r\n    antialias: true,\r\n    alpha: false,\r\n    autoClear: true,\r\n    orbitCtrl: false,\r\n    pointer: false,\r\n    resize: false,\r\n    width: 300,\r\n    height: 150,\r\n  }\r\n\r\n  if (params) {\r\n    Object.entries(params).forEach(([key, value]) => {\r\n      config[key] = value\r\n    })\r\n  }\r\n\r\n  // size\r\n  const size: SizeInterface = {\r\n    width: 1, height: 1,\r\n    wWidth: 1, wHeight: 1,\r\n    ratio: 1,\r\n  }\r\n\r\n  const beforeRenderCallbacks: {(): void}[] = []\r\n\r\n  const intersectObjects: Object3D[] = []\r\n\r\n  const renderer = createRenderer()\r\n\r\n  // returned object\r\n  const obj: ThreeInterface = {\r\n    config,\r\n    renderer,\r\n    size,\r\n    init,\r\n    dispose,\r\n    render,\r\n    renderC,\r\n    setSize,\r\n    addIntersectObject, removeIntersectObject,\r\n  }\r\n\r\n  return obj\r\n\r\n  /**\r\n   * create WebGLRenderer\r\n   */\r\n  function createRenderer(): WebGLRenderer {\r\n    const renderer = new WebGLRenderer({ canvas: config.canvas, antialias: config.antialias, alpha: config.alpha, ...config.params })\r\n    renderer.autoClear = config.autoClear\r\n    return renderer\r\n  }\r\n\r\n  /**\r\n   * init three\r\n   */\r\n  function init() {\r\n    if (!obj.scene) {\r\n      console.error('Missing Scene')\r\n      return false\r\n    }\r\n\r\n    if (!obj.camera) {\r\n      console.error('Missing Camera')\r\n      return false\r\n    }\r\n\r\n    if (config.resize) {\r\n      onResize()\r\n      window.addEventListener('resize', onResize)\r\n    } else if (config.width && config.height) {\r\n      setSize(config.width, config.height)\r\n    }\r\n\r\n    initPointer()\r\n\r\n    if (config.orbitCtrl) {\r\n      const cameraCtrl = new OrbitControls(obj.camera, obj.renderer.domElement)\r\n      if (config.orbitCtrl instanceof Object) {\r\n        Object.entries(config.orbitCtrl).forEach(([key, value]) => {\r\n          // @ts-ignore\r\n          cameraCtrl[key] = value\r\n        })\r\n      }\r\n      cameraCtrl.listenToKeyEvents(document.body)\r\n      onBeforeRender(() => { cameraCtrl.update() })\r\n      obj.cameraCtrl = cameraCtrl\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * init pointer\r\n   */\r\n  function initPointer() {\r\n    let pointerConf: PointerConfigInterface = {\r\n      camera: obj.camera!,\r\n      domElement: obj.renderer!.domElement,\r\n      intersectObjects,\r\n      selectedObject: undefined,\r\n      onSelectObject: onSelectObject,\r\n      flyToSelectedObject: flyToSelectedObject,\r\n    }\r\n\r\n    if (config.pointer && config.pointer instanceof Object) {\r\n      pointerConf = { ...pointerConf, ...config.pointer }\r\n    }\r\n\r\n    const pointer = obj.pointer = usePointer(pointerConf)\r\n    if (config.pointer || intersectObjects.length) {\r\n      pointer.addListeners()\r\n      if (pointerConf.intersectMode === 'frame') {\r\n        onBeforeRender(pointer.intersect)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * add before render callback\r\n   */\r\n  function onBeforeRender(cb: {(): void}) {\r\n    beforeRenderCallbacks.push(cb)\r\n  }\r\n\r\n  /**\r\n   * default render\r\n   */\r\n  function render() {\r\n    // if (obj.cameraCtrl) obj.cameraCtrl.update()\r\n    beforeRenderCallbacks.forEach(c => c())\r\n    obj.renderer!.render(obj.scene!, obj.camera!)\r\n  }\r\n\r\n  /**\r\n   * composer render\r\n   */\r\n  function renderC() {\r\n    // if (obj.cameraCtrl) obj.cameraCtrl.update()\r\n    beforeRenderCallbacks.forEach(c => c())\r\n    obj.composer!.render()\r\n  }\r\n\r\n  /**\r\n   * add intersect object\r\n   */\r\n  function addIntersectObject(o: Object3D) {\r\n    if (intersectObjects.indexOf(o) === -1) {\r\n      intersectObjects.push(o)\r\n    }\r\n    // add listeners if needed\r\n    if (obj.pointer && !obj.pointer.listeners) {\r\n      obj.pointer.addListeners()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * remove intersect object\r\n   */\r\n  function removeIntersectObject(o: Object3D) {\r\n    const i = intersectObjects.indexOf(o)\r\n    if (i !== -1) {\r\n      intersectObjects.splice(i, 1)\r\n    }\r\n    // remove listeners if needed\r\n    if (obj.pointer && !config.pointer && intersectObjects.length === 0) {\r\n      obj.pointer.removeListeners()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * remove listeners and dispose\r\n   */\r\n  function dispose() {\r\n    // beforeRenderCallbacks = []\r\n    window.removeEventListener('resize', onResize)\r\n    if (obj.pointer) obj.pointer.removeListeners()\r\n    if (obj.cameraCtrl) obj.cameraCtrl.dispose()\r\n    if (obj.renderer) obj.renderer.dispose()\r\n  }\r\n\r\n  /**\r\n   * resize listener\r\n   */\r\n  function onResize() {\r\n    if (config.resize === 'window') {\r\n      setSize(window.innerWidth, window.innerHeight)\r\n    } else {\r\n      const elt = obj.renderer!.domElement.parentNode as Element\r\n      if (elt) setSize(elt.clientWidth, elt.clientHeight)\r\n    }\r\n    config.onResize?.(size)\r\n  }\r\n\r\n  /**\r\n   * update renderer size and camera\r\n   */\r\n  function setSize(width: number, height: number) {\r\n    size.width = width\r\n    size.height = height\r\n    size.ratio = width / height\r\n\r\n    obj.renderer!.setSize(width, height, false)\r\n\r\n    // already done in EffectComposer\r\n    // if (obj.composer) {\r\n    //   obj.composer.setSize(width, height)\r\n    // }\r\n\r\n    const camera = (<Camera>obj.camera!)\r\n    if (camera.type === 'PerspectiveCamera') {\r\n      const pCamera = (<PerspectiveCamera>camera)\r\n      pCamera.aspect = size.ratio\r\n      pCamera.updateProjectionMatrix()\r\n    }\r\n\r\n    if (camera.type === 'OrthographicCamera') {\r\n      const oCamera = (<OrthographicCamera>camera)\r\n      size.wWidth = oCamera.right - oCamera.left\r\n      size.wHeight = oCamera.top - oCamera.bottom\r\n    } else {\r\n      const wsize = getCameraSize()\r\n      size.wWidth = wsize[0]\r\n      size.wHeight = wsize[1]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * calculate camera visible area size\r\n   */\r\n  function getCameraSize() {\r\n    const camera = (<PerspectiveCamera>obj.camera!)\r\n    const vFOV = (camera.fov * Math.PI) / 180\r\n    const h = 2 * Math.tan(vFOV / 2) * Math.abs(camera.position.z)\r\n    const w = h * camera.aspect\r\n    return [w, h]\r\n  }\r\n  /**\r\n   * Select or unselect an object.\r\n   * It doesn't support selecting more than one objects.\r\n   * It doesn't support selecting a parent object which doesn't have material itself.\r\n   * In order to support de-select, we'll need to store some information, we do this via userData:\r\n   * For InstancedMesh, there are two cases:\r\n   * 1) One Mesh in InstancedMesh is selected\r\n   * it adds following to selected object: userData {\r\n   *   instanceId: number,\r\n   *   originalMatrix: Matrix4,\r\n   *   clonedMesh: Mesh\r\n   * }\r\n   * 2) The whole InstancedMesh is selected. This case is no different from a normal Mesh is selected, so:\r\n   * For Mesh, it adds: userData {\r\n   *   originalMaterial: Material\r\n   * }\r\n   * @param object\r\n   * @param instanceIdOrFaceIndexId pass in instanceId if an InstancedMesh is selected, or faceIndexId for IFCModel\r\n   * @param depthTest set to false if caller want to make sure user can see it. When an object is\r\n   * selected by user manually, we don't need to make sure user can see it. While if selection is\r\n   * made by program, we parbably need to make sure user can see it, in other words, the selected\r\n   * object won't be blocked by other objects.\r\n   */\r\n  function onSelectObject(p: PointerSelectObjectInterface) {\r\n    const { object, instanceIdOrFaceIndexId, depthTest = undefined } = p\r\n    console.log('test selectObject', { object, instanceIdOrFaceIndexId, depthTest })\r\n    // revert last selected object's material if any\r\n    if (obj.pointer?.selectedObject) {\r\n      const userData = obj.pointer.selectedObject.userData\r\n      if (userData.instanceId != null && userData.originalMatrix && userData.clonedMesh) {\r\n        obj.scene && obj.scene.remove(userData.clonedMesh) // clear the cloned mesh\r\n        const im = obj.pointer.selectedObject as InstancedMesh\r\n        im.setMatrixAt(userData.instanceId, userData.originalMatrix) // revert the matrix\r\n        im.instanceMatrix.needsUpdate = true\r\n        im.updateMatrix() // need to call it since object.matrixAutoUpdate is false\r\n        delete userData.instanceId\r\n        delete userData.originalMatrix\r\n\r\n        // if the cloned object is selected, then just de-select it and return\r\n        if (object === userData.clonedMesh) {\r\n          userData.clonedMesh.geometry.dispose()\r\n          delete userData.clonedMesh\r\n          obj.pointer.selectedObject = undefined\r\n          // if (this.outlinePass) {\r\n          //   this.outlinePass.selectedObjects = []\r\n          // }\r\n          return\r\n        }\r\n        userData.clonedMesh.geometry.dispose()\r\n        delete userData.clonedMesh\r\n      } else if (userData.originalMaterial) {\r\n        if (obj.pointer.selectedObject.material) {\r\n          // manually dispose it according to https://threejs.org/docs/#manual/en/introduction/How-to-dispose-of-objects\r\n          const material = obj.pointer.selectedObject.material\r\n          if (Array.isArray(material)) {\r\n            material.forEach(m => m.dispose())\r\n          } else if (material instanceof Material) {\r\n            material.dispose()\r\n          }\r\n        }\r\n        obj.pointer.selectedObject.material = userData.originalMaterial\r\n        delete userData.originalMaterial // clean up\r\n      }\r\n      obj.pointer.selectedObject = undefined\r\n      // if (this.outlinePass) {\r\n      //   this.outlinePass.selectedObjects = [];\r\n      // }\r\n    }\r\n    if (!obj.scene || !object) {\r\n      return\r\n    }\r\n    if (object instanceof InstancedMesh && instanceIdOrFaceIndexId != null && obj.pointer) {\r\n      const im = object as InstancedMesh\r\n      const originalMatrix = new Matrix4()\r\n      const hideMatrix = new Matrix4()\r\n      hideMatrix.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0) // this matrix hides an object\r\n      im.getMatrixAt(instanceIdOrFaceIndexId, originalMatrix)\r\n      obj.pointer.selectedObject = object\r\n      // if (this.outlinePass) {\r\n      //   this.outlinePass.selectedObjects = [object];\r\n      // }\r\n\r\n      // Here is the example to select InstancedMesh, which is to call setColorAt()\r\n      // https://threejs.org/examples/?q=instanc#webgl_instancing_raycast\r\n      // While, it sounds like only support MeshPhongMaterial. So here, we'll clone\r\n      // a mesh with highlighted color to replace the original instance in InstancedMesh\r\n      const clonedMaterial = clonedHighlightMaterials(object, { depthTest })\r\n      if (clonedMaterial) {\r\n        // clone a new mesh for the selected instance\r\n        const clonedMesh = new Mesh(im.geometry.clone(), clonedMaterial)\r\n        clonedMesh.applyMatrix4(object.matrixWorld.multiply(originalMatrix))\r\n        clonedMesh.matrixWorldNeedsUpdate = true\r\n        clonedMesh.name = \"Cloned mesh for highlighting\"\r\n        // hide the original mesh by its matrix\r\n        const matrix = originalMatrix.clone()\r\n        matrix.multiplyMatrices(originalMatrix, hideMatrix)\r\n        im.setMatrixAt(instanceIdOrFaceIndexId, matrix)\r\n        im.instanceMatrix.needsUpdate = true\r\n        im.updateMatrix() // need to call it since object.matrixAutoUpdate is false\r\n        obj.pointer.selectedObject.userData.instanceId = instanceIdOrFaceIndexId // store some instanceId so highlight can be reverted\r\n        obj.pointer.selectedObject.userData.originalMatrix = originalMatrix\r\n        obj.pointer.selectedObject.userData.clonedMesh = clonedMesh\r\n        obj.scene.add(clonedMesh) // add it to scene temporaly\r\n      }\r\n    } else {\r\n      // save the original material, so we can reverit it back when deselect\r\n      const clonedMaterial = clonedHighlightMaterials(object as Mesh, { depthTest })\r\n      if (clonedMaterial) {\r\n        obj.pointer!.selectedObject = object\r\n        obj.pointer!.selectedObject.userData.originalMaterial = obj.pointer!.selectedObject.material\r\n        obj.pointer!.selectedObject.material = clonedMaterial\r\n        // if (this.outlinePass) {\r\n        //   this.outlinePass.selectedObjects = [object];\r\n        // }\r\n      }\r\n    }\r\n  }\r\n\r\n  function clonedHighlightMaterials(mesh: Mesh, options: {\r\n    depthTest?: boolean,\r\n    highlightColor?: Color,\r\n    opacity?: number\r\n  } = {}): Material | Material[] | undefined {\r\n    if (!mesh || !mesh.material) {\r\n      return undefined\r\n    }\r\n    const mat = mesh.material\r\n    if (Array.isArray(mat) && mat.length > 0) {\r\n      const newMaterials: Material[] = []\r\n      mat.forEach(m => {\r\n        newMaterials.push(clonedHighlightMaterial(m, options))\r\n      })\r\n      return newMaterials\r\n    } else if (mat instanceof Material) {\r\n      return clonedHighlightMaterial(mat, options)\r\n    } else {\r\n      console.warn(`Invalid material: ${mat}`)\r\n    }\r\n    return undefined\r\n  }\r\n\r\n  function clonedHighlightMaterial(material: Material, options: {\r\n    depthTest?: boolean,\r\n    highlightColor?: Color,\r\n    opacity?: number\r\n  } = {}) {\r\n    const { depthTest = undefined, highlightColor = new Color(0xff00ff), opacity = 0.7 } = options\r\n    // change highlight color here is we don't like it\r\n    // the original mererial may be used by many objects, we cannot change the original one, thus need to clone\r\n    const mat = material.clone()\r\n    if (mat instanceof MeshStandardMaterial) {\r\n      mat.emissive.set(highlightColor)\r\n      mat.color.set(highlightColor)\r\n    } else if (mat instanceof MeshPhongMaterial) {\r\n      mat.emissive.set(highlightColor)\r\n      mat.color.set(highlightColor)\r\n    } else if (mat instanceof MeshBasicMaterial) {\r\n      mat.color.set(highlightColor)\r\n    } else if (mat instanceof LineBasicMaterial) {\r\n      mat.color.set(highlightColor)\r\n    } else if (mat instanceof MeshLambertMaterial) {\r\n      mat.color.set(highlightColor)\r\n    } else {\r\n      console.error(\"Unsupported Material: \" + (typeof mat).toString())\r\n    }\r\n    // it looks better to be transparent (no matter if it is originally transparent)\r\n    mat.opacity = opacity\r\n    mat.transparent = true // make transparent and so it can visually block other object\r\n    if (depthTest !== undefined) {\r\n      // set depthTest to false so that user can always see it\r\n      mat.depthTest = false\r\n      // make sure to be visible for both side\r\n      mat.side = DoubleSide\r\n    }\r\n    return mat\r\n  }\r\n\r\n  /**\r\n   * Make camera fly to objects\r\n   */\r\n  function flyToObjects(objects: Object3D[]) {\r\n    if (!objects || objects.length === 0 || !obj.camera) {\r\n      return\r\n    }\r\n    const eye = new Vector3()\r\n    const look = new Vector3()\r\n    Viewer3DUtils.getCameraPositionByObjects(objects, obj.camera, eye, look)\r\n    flyTo(eye, look)\r\n  }\r\n\r\n  /**\r\n       * Make camera fly to an object\r\n       */\r\n  function flyToObject(object: Object3D) {\r\n    flyToObjects([object])\r\n  }\r\n\r\n  /**\r\n       * Flies to current selected object if any\r\n       */\r\n  function flyToSelectedObject() {\r\n    if (!obj.pointer?.selectedObject) {\r\n      return\r\n    }\r\n    let sObj = obj.pointer.selectedObject\r\n    // if part of InstancedMesh is selected, fly to that part rather than fly to the whole InstancedMesh\r\n    if (sObj instanceof InstancedMesh && sObj.userData.clonedMesh) {\r\n      sObj = sObj.userData.clonedMesh\r\n    }\r\n    flyToObject(sObj)\r\n  }\r\n  /**\r\n     * Make camera fly to target position with given lookAt position\r\n     * @param position camera's target position\r\n     * @param lookAt camera's new lookAt position\r\n     */\r\n  function flyTo(position: Vector3, lookAt: Vector3, onCompleteCallback?: () => void) {\r\n    const getCamera = (): PerspectiveCamera | OrthographicCamera | undefined => {\r\n      if (obj.camera!.type === 'PerspectiveCamera') {\r\n        const camera = (<PerspectiveCamera>obj.camera)\r\n        return camera\r\n      }\r\n      if (obj.camera!.type === 'OrthographicCamera') {\r\n        const camera = (<OrthographicCamera>obj.camera)\r\n        return camera\r\n      }\r\n    }\r\n\r\n    const camera = getCamera()\r\n    const controls = obj.cameraCtrl\r\n    if (!camera || !controls) {\r\n      return\r\n    }\r\n    if (position.equals(lookAt)) {\r\n      console.error(\"[Viewer3D] camera position and lookAt cannot be the same!\")\r\n      return\r\n    } else if (isNaN(position.x) || isNaN(position.y) || isNaN(position.z) || isNaN(lookAt.x) || isNaN(lookAt.y) || isNaN(lookAt.z)) {\r\n      console.error(\"[Viewer3D] invalid position or lookAt!\")\r\n      return\r\n    }\r\n    // If distance between position and lookAt is too near or far (according to camera's near/far settings).\r\n    // need to adjust 'position' to fit it.\r\n    const distance = position.distanceTo(lookAt)\r\n    if (distance < camera.near) {\r\n      // the new position is just farer than original position\r\n      position = position.clone().sub(lookAt).normalize().multiplyScalar(camera.near * 1.1)\r\n      console.warn(\"[Viewer3D] camera could be too close to see the object!\")\r\n    } else if (distance > camera.far) {\r\n      // the new position is just closer than original position\r\n      position = position.clone().sub(lookAt).normalize().multiplyScalar(camera.far * 0.9)\r\n      console.warn(\"[Viewer3D] camera could be too far to see the object!\")\r\n    }\r\n\r\n    const update = (p?: Vector3, t?: Vector3) => {\r\n      t && camera.lookAt(t)\r\n      p && camera.position.set(p.x, p.y, p.z)\r\n      t && controls.target.set(t.x, t.y, t.z)\r\n      controls.update()\r\n      // this.enableRender()\r\n    }\r\n\r\n    // there are two steps\r\n    // 1) change camera's lookAt point in x miliseconds\r\n    // 2) change camera's position in y miliseconds\r\n    const t = controls.target.clone() // have to copy one, otherwise TWEEN breaks the passed in object!\r\n    const tween1 = new TWEEN.Tween(t)\r\n    tween1.to(lookAt, 500)\r\n    tween1.easing(TWEEN.Easing.Sinusoidal.InOut)\r\n    tween1.onUpdate(() => {\r\n      update(undefined, t)\r\n    })\r\n    tween1.onComplete(() => {\r\n      const p = camera.position.clone()\r\n      const tween2 = new TWEEN.Tween(p)\r\n      tween2.to(position, 1500)\r\n      tween2.easing(TWEEN.Easing.Sinusoidal.InOut)\r\n      tween2.onUpdate(() => {\r\n        update(p, lookAt)\r\n      })\r\n      tween2.onComplete(() => {\r\n        update(p, lookAt)\r\n        onCompleteCallback && onCompleteCallback()\r\n      })\r\n      obj.tween = tween2\r\n      tween2.start()\r\n    })\r\n    obj.tween = tween1\r\n    tween1.start()\r\n  }\r\n}\r\n","/* eslint-disable no-use-before-define */\r\nimport { Camera, Scene, WebGLRenderer, WebGLRendererParameters } from 'three'\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\r\nimport { ComponentPublicInstance, defineComponent, InjectionKey, PropType, watch, watchEffect } from 'vue'\r\nimport { bindObjectProp } from '../tools'\r\nimport { PointerInterface, PointerPublicConfigInterface } from './usePointer'\r\nimport useThree, { SizeInterface, ThreeConfigInterface, ThreeInterface } from './useThree'\r\nimport * as TWEEN from '@tweenjs/tween.js'\r\n\r\ntype CallbackType<T> = (event: T) => void\r\n\r\n// type EventType = 'init' | 'mounted' | 'beforerender' | 'afterrender' | 'resize'\r\n\r\nexport interface EventInterface {\r\n  type: 'init' | 'mounted'\r\n  renderer: RendererInterface\r\n}\r\n\r\nexport interface RenderEventInterface {\r\n  type: 'beforerender' | 'afterrender'\r\n  renderer: RendererInterface\r\n  time: number\r\n}\r\n\r\nexport interface ResizeEventInterface {\r\n  type: 'resize'\r\n  renderer: RendererInterface\r\n  size: SizeInterface\r\n}\r\n\r\ntype InitCallbackType = CallbackType<EventInterface>\r\ntype MountedCallbackType = CallbackType<EventInterface>\r\ntype RenderCallbackType = CallbackType<RenderEventInterface>\r\ntype ResizeCallbackType = CallbackType<ResizeEventInterface>\r\n// type CallbackTypes = InitCallbackType | MountedCallbackType | RenderCallbackType | ResizeCallbackType\r\n\r\n// interface EventMap {\r\n//   'init': EventInterface;\r\n//   'mounted': EventInterface;\r\n//   'beforerender': RenderEventInterface;\r\n//   'afterrender': RenderEventInterface;\r\n//   'resize': ResizeEventInterface;\r\n// }\r\n\r\ninterface EventCallbackMap {\r\n  'init': InitCallbackType;\r\n  'mounted': MountedCallbackType;\r\n  'beforerender': RenderCallbackType;\r\n  'afterrender': RenderCallbackType;\r\n  'resize': ResizeCallbackType;\r\n}\r\n\r\ninterface RenderFunctionEventInterface {\r\n  renderer: RendererInterface\r\n  time: number\r\n}\r\n\r\ninterface RendererSetupInterface {\r\n  canvas: HTMLCanvasElement\r\n  three: ThreeInterface\r\n  renderer: WebGLRenderer\r\n  size: SizeInterface\r\n  renderFn(e: RenderFunctionEventInterface): void\r\n  raf: boolean\r\n\r\n  $pointer?: PointerInterface\r\n\r\n  initCallbacks: InitCallbackType[]\r\n  mountedCallbacks: MountedCallbackType[]\r\n  beforeRenderCallbacks: RenderCallbackType[]\r\n  afterRenderCallbacks: RenderCallbackType[]\r\n  resizeCallbacks: ResizeCallbackType[]\r\n}\r\n\r\nexport interface RendererInterface extends RendererSetupInterface {\r\n  scene?: Scene\r\n  camera?: Camera\r\n  composer?: EffectComposer\r\n\r\n  onInit(cb: InitCallbackType): void\r\n  onMounted(cb: MountedCallbackType): void\r\n\r\n  onBeforeRender(cb: RenderCallbackType): void\r\n  offBeforeRender(cb: RenderCallbackType): void\r\n  onAfterRender(cb: RenderCallbackType): void\r\n  offAfterRender(cb: RenderCallbackType): void\r\n\r\n  onResize(cb: ResizeCallbackType): void\r\n  offResize(cb: ResizeCallbackType): void\r\n\r\n  addListener<T extends keyof EventCallbackMap>(t: T, cb: EventCallbackMap[T]): void\r\n  removeListener<T extends keyof EventCallbackMap>(t: T, cb: EventCallbackMap[T]): void\r\n}\r\n\r\nexport interface RendererPublicInterface extends ComponentPublicInstance, RendererInterface {}\r\n\r\nexport const RendererInjectionKey: InjectionKey<RendererPublicInterface> = Symbol('Renderer')\r\n\r\nexport default defineComponent({\r\n  name: 'Renderer',\r\n  props: {\r\n    params: { type: Object as PropType<WebGLRendererParameters>, default: () => ({}) },\r\n    antialias: Boolean,\r\n    alpha: Boolean,\r\n    autoClear: { type: Boolean, default: true },\r\n    orbitCtrl: { type: [Boolean, Object] as PropType<boolean | Record<string, unknown>>, default: false },\r\n    pointer: { type: [Boolean, Object] as PropType<boolean | PointerPublicConfigInterface>, default: false },\r\n    resize: { type: [Boolean, String] as PropType<boolean | string>, default: false },\r\n    shadow: Boolean,\r\n    width: String,\r\n    height: String,\r\n    pixelRatio: Number,\r\n    xr: Boolean,\r\n    props: { type: Object, default: () => ({}) },\r\n    onReady: Function as PropType<(r: RendererInterface) => void>,\r\n  },\r\n  inheritAttrs: false,\r\n  setup(props, { attrs }): RendererSetupInterface {\r\n    const initCallbacks: InitCallbackType[] = []\r\n    const mountedCallbacks: MountedCallbackType[] = []\r\n    const beforeRenderCallbacks: RenderCallbackType[] = []\r\n    const afterRenderCallbacks: RenderCallbackType[] = []\r\n    const resizeCallbacks: ResizeCallbackType[] = []\r\n\r\n    const canvas = document.createElement('canvas')\r\n    Object.entries(attrs).forEach(([key, value]) => {\r\n      const matches = key.match(/^on([A-Z][a-zA-Z]*)$/)\r\n      if (matches) {\r\n        canvas.addEventListener(matches[1].toLowerCase(), value as {(): void })\r\n      } else {\r\n        canvas.setAttribute(key, value as string)\r\n      }\r\n    })\r\n\r\n    const config: ThreeConfigInterface = {\r\n      canvas,\r\n      params: props.params,\r\n      antialias: props.antialias,\r\n      alpha: props.alpha,\r\n      autoClear: props.autoClear,\r\n      orbitCtrl: props.orbitCtrl,\r\n      pointer: props.pointer,\r\n      resize: props.resize,\r\n    }\r\n\r\n    if (props.width) config.width = parseInt(props.width)\r\n    if (props.height) config.height = parseInt(props.height)\r\n\r\n    const three = useThree(config)\r\n    bindObjectProp(props, 'props', three.renderer)\r\n\r\n    watchEffect(() => {\r\n      if (props.pixelRatio) three.renderer.setPixelRatio(props.pixelRatio)\r\n    })\r\n\r\n    const renderFn: {(): void} = () => {}\r\n\r\n    return {\r\n      canvas,\r\n      three,\r\n      renderer: three.renderer,\r\n      size: three.size,\r\n      renderFn,\r\n      raf: true,\r\n      initCallbacks,\r\n      mountedCallbacks,\r\n      beforeRenderCallbacks,\r\n      afterRenderCallbacks,\r\n      resizeCallbacks,\r\n    }\r\n  },\r\n  computed: {\r\n    camera: {\r\n      get: function(): Camera | undefined { return this.three.camera },\r\n      set: function(camera: Camera): void { this.three.camera = camera },\r\n    },\r\n    scene: {\r\n      get: function(): Scene | undefined { return this.three.scene },\r\n      set: function(scene: Scene): void { this.three.scene = scene },\r\n    },\r\n    composer: {\r\n      get: function(): EffectComposer | undefined { return this.three.composer },\r\n      set: function(composer: EffectComposer): void { this.three.composer = composer },\r\n    },\r\n  },\r\n  provide() {\r\n    return {\r\n      [RendererInjectionKey as symbol]: this,\r\n    }\r\n  },\r\n  mounted() {\r\n    // appendChild won't work on reload\r\n    this.$el.parentNode.insertBefore(this.canvas, this.$el)\r\n\r\n    if (this.three.init()) {\r\n      if (this.three.pointer) {\r\n        this.$pointer = this.three.pointer\r\n      }\r\n\r\n      // TODO : don't use config\r\n      this.three.config.onResize = (size) => {\r\n        this.resizeCallbacks.forEach(e => e({ type: 'resize', renderer: this, size }))\r\n      }\r\n\r\n      if (this.shadow) {\r\n        this.renderer.shadowMap.enabled = true\r\n      }\r\n\r\n      this.renderFn = this.three.composer ? this.three.renderC : this.three.render\r\n\r\n      this.initCallbacks.forEach(e => e({ type: 'init', renderer: this }))\r\n      this.onReady?.(this as RendererInterface)\r\n\r\n      if (this.xr) {\r\n        this.renderer.xr.enabled = true\r\n        this.renderer.setAnimationLoop(this.render)\r\n      } else {\r\n        requestAnimationFrame(this.renderLoop)\r\n      }\r\n    }\r\n\r\n    this.mountedCallbacks.forEach(e => e({ type: 'mounted', renderer: this }))\r\n  },\r\n  beforeUnmount() {\r\n    this.canvas.remove()\r\n    this.beforeRenderCallbacks = []\r\n    this.afterRenderCallbacks = []\r\n    this.raf = false\r\n    this.three.dispose()\r\n  },\r\n  methods: {\r\n    onInit(cb: InitCallbackType) { this.addListener('init', cb) },\r\n    onMounted(cb: MountedCallbackType) { this.addListener('mounted', cb) },\r\n    onBeforeRender(cb: RenderCallbackType) { this.addListener('beforerender', cb) },\r\n    offBeforeRender(cb: RenderCallbackType) { this.removeListener('beforerender', cb) },\r\n    onAfterRender(cb: RenderCallbackType) { this.addListener('afterrender', cb) },\r\n    offAfterRender(cb: RenderCallbackType) { this.removeListener('afterrender', cb) },\r\n    onResize(cb: ResizeCallbackType) { this.addListener('resize', cb) },\r\n    offResize(cb: ResizeCallbackType) { this.removeListener('resize', cb) },\r\n\r\n    addListener(type: string, cb: {(e?: any): void}) {\r\n      const callbacks = this.getCallbacks(type)\r\n      callbacks.push(cb)\r\n    },\r\n\r\n    removeListener(type: string, cb: {(e?: any): void}) {\r\n      const callbacks = this.getCallbacks(type)\r\n      const index = callbacks.indexOf(cb)\r\n      if (index !== -1) callbacks.splice(index, 1)\r\n    },\r\n\r\n    getCallbacks(type: string) {\r\n      if (type === 'init') {\r\n        return this.initCallbacks\r\n      } else if (type === 'mounted') {\r\n        return this.mountedCallbacks\r\n      } else if (type === 'beforerender') {\r\n        return this.beforeRenderCallbacks\r\n      } else if (type === 'afterrender') {\r\n        return this.afterRenderCallbacks\r\n      } else {\r\n        return this.resizeCallbacks\r\n      }\r\n    },\r\n\r\n    render(time: number) {\r\n      this.beforeRenderCallbacks.forEach(e => e({ type: 'beforerender', renderer: this, time }))\r\n      // this.onFrame?.(cbParams)\r\n      this.renderFn({ renderer: this, time })\r\n      this.afterRenderCallbacks.forEach(e => e({ type: 'afterrender', renderer: this, time }))\r\n\r\n      this.three.tween && TWEEN.update()\r\n    },\r\n    renderLoop(time: number) {\r\n      if (this.raf) requestAnimationFrame(this.renderLoop)\r\n      this.render(time)\r\n    },\r\n  },\r\n  render() {\r\n    return this.$slots.default ? this.$slots.default() : []\r\n  },\r\n  __hmrId: 'Renderer',\r\n})\r\n","import { defineComponent } from 'vue'\r\n// import { Camera } from 'three'\r\n// import { RendererInjectionKey, RendererInterface } from './Renderer'\r\n// import Object3D from './Object3D'\r\n\r\n// export interface CameraSetupInterface {\r\n//   renderer?: RendererInterface\r\n//   camera: Camera\r\n// }\r\n\r\nexport default defineComponent({\r\n  // TODO: eventually extend Object3D\r\n  // extends: Object3D,\r\n\r\n  props: {\r\n    props: { type: Object, default: () => ({}) },\r\n  },\r\n\r\n  // inject: { renderer: RendererInjectionKey as symbol },\r\n\r\n  // setup(): CameraSetupInterface {\r\n  //   return {}\r\n  // },\r\n\r\n  render() {\r\n    return this.$slots.default ? this.$slots.default() : []\r\n  },\r\n})\r\n\r\nexport function cameraSetProp(camera: any, key: string, value: any, updateProjectionMatrix = true) {\r\n  camera[key] = value\r\n  if (updateProjectionMatrix) camera.updateProjectionMatrix()\r\n}\r\n","import { defineComponent, inject, PropType, watch } from 'vue'\r\nimport { OrthographicCamera } from 'three'\r\nimport { bindObjectProp, bindProp } from '../tools'\r\nimport Camera, { cameraSetProp } from './Camera'\r\nimport { Vector3PropInterface } from './Object3D'\r\nimport { RendererInjectionKey } from './Renderer'\r\n\r\nexport default defineComponent({\r\n  extends: Camera,\r\n  name: 'OrthographicCamera',\r\n  props: {\r\n    left: { type: Number, default: -1 },\r\n    right: { type: Number, default: 1 },\r\n    top: { type: Number, default: 1 },\r\n    bottom: { type: Number, default: -1 },\r\n    near: { type: Number, default: 0.1 },\r\n    far: { type: Number, default: 2000 },\r\n    zoom: { type: Number, default: 1 },\r\n    position: { type: Object as PropType<Vector3PropInterface>, default: () => ({ x: 0, y: 0, z: 0 }) },\r\n  },\r\n  setup(props) {\r\n    const renderer = inject(RendererInjectionKey)\r\n    if (!renderer) {\r\n      console.error('Renderer not found')\r\n      return\r\n    }\r\n\r\n    const camera = new OrthographicCamera(props.left, props.right, props.top, props.bottom, props.near, props.far)\r\n    renderer.camera = camera\r\n\r\n    bindProp(props, 'position', camera)\r\n    bindObjectProp(props, 'props', camera, true, cameraSetProp);\r\n\r\n    ['left', 'right', 'top', 'bottom', 'near', 'far', 'zoom'].forEach(p => {\r\n      // @ts-ignore\r\n      watch(() => props[p], (value) => {\r\n        cameraSetProp(camera, p, value)\r\n      })\r\n    })\r\n\r\n    return { renderer, camera }\r\n  },\r\n  __hmrId: 'OrthographicCamera',\r\n})\r\n","import { defineComponent, inject, PropType, watch } from 'vue'\r\nimport { PerspectiveCamera } from 'three'\r\nimport { bindObjectProp, bindProp } from '../tools'\r\nimport Camera, { cameraSetProp } from './Camera'\r\nimport { Vector3PropInterface } from './Object3D'\r\nimport { RendererInjectionKey } from './Renderer'\r\n\r\nexport default defineComponent({\r\n  extends: Camera,\r\n  name: 'PerspectiveCamera',\r\n  props: {\r\n    aspect: { type: Number, default: 2.049 },\r\n    far: { type: Number, default: 30000 },\r\n    fov: { type: Number, default: 50 },\r\n    near: { type: Number, default: 0.5 },\r\n    position: { type: Object as PropType<Vector3PropInterface>, default: () => ({ x: 0, y: 0, z: 0 }) },\r\n    lookAt: { type: Object as PropType<Vector3PropInterface>, default: null },\r\n  },\r\n  setup(props) {\r\n    const renderer = inject(RendererInjectionKey)\r\n    if (!renderer) {\r\n      console.error('Renderer not found')\r\n      return\r\n    }\r\n\r\n    const camera = new PerspectiveCamera(props.fov, props.aspect, props.near, props.far)\r\n    renderer.camera = camera\r\n\r\n    bindProp(props, 'position', camera)\r\n\r\n    if (props.lookAt) camera.lookAt(props.lookAt.x ?? 0, props.lookAt.y, props.lookAt.z)\r\n    watch(() => props.lookAt, (v) => { camera.lookAt(v.x ?? 0, v.y, v.z) }, { deep: true })\r\n\r\n    bindObjectProp(props, 'props', camera, true, cameraSetProp);\r\n\r\n    ['aspect', 'far', 'fov', 'near'].forEach(p => {\r\n      // @ts-ignore\r\n      watch(() => props[p], (value) => {\r\n        cameraSetProp(camera, p, value)\r\n      })\r\n    })\r\n\r\n    return { renderer, camera }\r\n  },\r\n  __hmrId: 'PerspectiveCamera',\r\n})\r\n","import { defineComponent, inject, InjectionKey, provide, watch } from 'vue'\r\nimport { Scene, Color, Object3D, Texture } from 'three'\r\nimport { RendererInjectionKey } from './Renderer'\r\n\r\nexport const SceneInjectionKey: InjectionKey<Scene> = Symbol('Scene')\r\n\r\nexport default defineComponent({\r\n  name: 'Scene',\r\n  props: {\r\n    background: [String, Number, Object],\r\n  },\r\n  setup(props) {\r\n    const renderer = inject(RendererInjectionKey)\r\n    const scene = new Scene()\r\n\r\n    if (!renderer) {\r\n      console.error('Renderer not found')\r\n      return\r\n    }\r\n\r\n    renderer.scene = scene\r\n    provide(SceneInjectionKey, scene)\r\n\r\n    const setBackground = (value: any): void => {\r\n      if (!value) return\r\n      if (typeof value === 'string' || typeof value === 'number') {\r\n        if (scene.background instanceof Color) scene.background.set(value)\r\n        else scene.background = new Color(value)\r\n      } else if (value instanceof Texture) {\r\n        scene.background = value\r\n      }\r\n    }\r\n\r\n    setBackground(props.background)\r\n    watch(() => props.background, setBackground)\r\n\r\n    const add = (o: Object3D): void => { scene.add(o) }\r\n    const remove = (o: Object3D): void => { scene.remove(o) }\r\n\r\n    return { scene, add, remove }\r\n  },\r\n  render() {\r\n    return this.$slots.default ? this.$slots.default() : []\r\n  },\r\n  __hmrId: 'Scene',\r\n})\r\n","import { Object3D, Scene } from 'three'\r\nimport { ComponentPublicInstance, defineComponent, getCurrentInstance, PropType, watch } from 'vue'\r\nimport { bindObjectProp, bindProp } from '../tools'\r\nimport { RendererInjectionKey, RendererInterface } from './Renderer'\r\nimport { SceneInjectionKey } from './Scene'\r\n\r\nexport interface Object3DSetupInterface {\r\n  renderer?: RendererInterface\r\n  scene?: Scene\r\n  o3d?: Object3D\r\n  parent?: ComponentPublicInstance\r\n}\r\n\r\nexport interface Object3DInterface extends Object3DSetupInterface {\r\n  addToParent(o?: Object3D): boolean\r\n  removeFromParent(o?: Object3D): boolean\r\n  add(o: Object3D): void\r\n  remove(o: Object3D): void\r\n}\r\n\r\nexport interface Object3DPublicInterface extends ComponentPublicInstance, Object3DInterface {}\r\n\r\n// export function object3DSetup(): Object3DSetupInterface {\r\n//   const renderer = inject(RendererInjectionKey)\r\n//   const scene = inject(SceneInjectionKey)\r\n//   return { scene, renderer }\r\n// }\r\n\r\nexport const pointerProps = {\r\n  onPointerEnter: Function,\r\n  onPointerOver: Function,\r\n  onPointerMove: Function,\r\n  onPointerLeave: Function,\r\n  onPointerDown: Function,\r\n  onPointerUp: Function,\r\n  onClick: Function,\r\n}\r\n\r\nexport interface Vector2PropInterface {\r\n  x?: number\r\n  y?: number\r\n  width?: number\r\n  height?: number\r\n}\r\n\r\nexport interface Vector3PropInterface extends Vector2PropInterface {\r\n  z?: number\r\n}\r\n\r\nexport interface EulerPropInterface extends Vector3PropInterface {\r\n  order?: 'XYZ' | 'YZX' | 'ZXY' | 'XZY' | 'YXZ' | 'ZYX'\r\n}\r\n\r\nexport default defineComponent({\r\n  name: 'Object3D',\r\n  // inject for sub components\r\n  inject: {\r\n    renderer: RendererInjectionKey as symbol,\r\n    scene: SceneInjectionKey as symbol,\r\n  },\r\n  emits: ['created', 'ready'],\r\n  props: {\r\n    position: { type: Object as PropType<Vector3PropInterface>, default: () => ({ x: 0, y: 0, z: 0 }) },\r\n    rotation: { type: Object as PropType<EulerPropInterface>, default: () => ({ x: 0, y: 0, z: 0 }) },\r\n    scale: { type: Object as PropType<Vector3PropInterface>, default: () => ({ x: 1, y: 1, z: 1, order: 'XYZ' }) },\r\n    lookAt: { type: Object as PropType<Vector3PropInterface>, default: null },\r\n    userData: { type: Object, default: () => ({}) },\r\n    visible: { type: Boolean, default: true },\r\n    props: { type: Object, default: () => ({}) },\r\n    disableAdd: { type: Boolean, default: false },\r\n    disableRemove: { type: Boolean, default: false },\r\n    ...pointerProps,\r\n  },\r\n  setup(): Object3DSetupInterface {\r\n    // return object3DSetup()\r\n    return {}\r\n  },\r\n  created() {\r\n    if (!this.renderer) {\r\n      console.error('Missing parent Renderer')\r\n    }\r\n    if (!this.scene) {\r\n      console.error('Missing parent Scene')\r\n    }\r\n  },\r\n  unmounted() {\r\n    if (!this.disableRemove) this.removeFromParent()\r\n    if (this.o3d) {\r\n      if (this.renderer) this.renderer.three.removeIntersectObject(this.o3d)\r\n    }\r\n  },\r\n  methods: {\r\n    initObject3D(o3d: Object3D) {\r\n      this.o3d = o3d\r\n      o3d.userData.component = this\r\n\r\n      if (this.onPointerEnter ||\r\n        this.onPointerOver ||\r\n        this.onPointerMove ||\r\n        this.onPointerLeave ||\r\n        this.onPointerDown ||\r\n        this.onPointerUp ||\r\n        this.onClick) {\r\n        if (this.renderer) this.renderer.three.addIntersectObject(o3d)\r\n      }\r\n\r\n      bindProp(this, 'position', o3d)\r\n      bindProp(this, 'rotation', o3d)\r\n      bindProp(this, 'scale', o3d)\r\n      bindProp(this, 'userData', o3d.userData)\r\n      bindProp(this, 'visible', o3d)\r\n\r\n      bindObjectProp(this, 'props', o3d)\r\n\r\n      this.$emit('created', o3d)\r\n\r\n      if (this.lookAt) o3d.lookAt(this.lookAt.x ?? 0, this.lookAt.y, this.lookAt.z)\r\n      watch(() => this.lookAt, (v) => { o3d.lookAt(v.x ?? 0, v.y, v.z) }, { deep: true })\r\n\r\n      this.parent = this.getParent()\r\n      if (!this.disableAdd) {\r\n        if (this.addToParent()) this.$emit('ready', this)\r\n        else console.error('Missing parent (Scene, Group...)')\r\n      }\r\n    },\r\n    getParent(): undefined | ComponentPublicInstance {\r\n      let parent = this.$parent\r\n\r\n      if (!parent) {\r\n        // for script setup\r\n        const instance = getCurrentInstance() as any // ctx is internal\r\n        if (instance && instance.parent) parent = instance.parent.ctx\r\n      }\r\n\r\n      while (parent) {\r\n        if ((parent as any).add) return parent\r\n        parent = parent.$parent\r\n      }\r\n      return undefined\r\n    },\r\n    addToParent(o?: Object3D) {\r\n      const o3d = o || this.o3d\r\n      if (this.parent) {\r\n        (this.parent as any).add(o3d)\r\n        return true\r\n      }\r\n      return false\r\n    },\r\n    removeFromParent(o?: Object3D) {\r\n      const o3d = o || this.o3d\r\n      if (this.parent) {\r\n        (this.parent as any).remove(o3d)\r\n        return true\r\n      }\r\n      return false\r\n    },\r\n    add(o: Object3D) { this.o3d?.add(o) },\r\n    remove(o: Object3D) { this.o3d?.remove(o) },\r\n  },\r\n  render() {\r\n    return this.$slots.default ? this.$slots.default() : []\r\n  },\r\n  __hmrId: 'Object3D',\r\n})\r\n","import { defineComponent } from 'vue'\r\nimport { Group } from 'three'\r\nimport Object3D from './Object3D'\r\n\r\nexport default defineComponent({\r\n  name: 'Group',\r\n  extends: Object3D,\r\n  setup() {\r\n    return {\r\n      group: new Group(),\r\n    }\r\n  },\r\n  created() {\r\n    this.initObject3D(this.group)\r\n  },\r\n  __hmrId: 'Group',\r\n})\r\n","import { defineComponent, inject, PropType } from 'vue'\r\nimport usePointer, { PointerInterface, PointerIntersectCallbackType } from './usePointer'\r\nimport { RendererInjectionKey, RendererInterface } from './Renderer'\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-function\r\nconst emptyCallBack: PointerIntersectCallbackType = () => {}\r\n\r\ninterface RaycasterSetupInterface {\r\n  renderer?: RendererInterface\r\n  pointer?: PointerInterface\r\n}\r\n\r\nexport default defineComponent({\r\n  name: 'Raycaster',\r\n  props: {\r\n    onPointerEnter: { type: Function as PropType<PointerIntersectCallbackType>, default: emptyCallBack },\r\n    onPointerOver: { type: Function as PropType<PointerIntersectCallbackType>, default: emptyCallBack },\r\n    onPointerMove: { type: Function as PropType<PointerIntersectCallbackType>, default: emptyCallBack },\r\n    onPointerLeave: { type: Function as PropType<PointerIntersectCallbackType>, default: emptyCallBack },\r\n    onClick: { type: Function as PropType<PointerIntersectCallbackType>, default: emptyCallBack },\r\n    onDblClick: { type: Function as PropType<PointerIntersectCallbackType>, default: emptyCallBack },\r\n    intersectMode: { type: String, default: 'move' },\r\n    intersectRecursive: { type: Boolean, default: false },\r\n  },\r\n  setup(): RaycasterSetupInterface {\r\n    const renderer = inject(RendererInjectionKey)\r\n    return { renderer }\r\n  },\r\n  mounted() {\r\n    if (!this.renderer) {\r\n      console.error('Renderer not found')\r\n      return\r\n    }\r\n    const renderer = this.renderer\r\n\r\n    this.renderer.onMounted(() => {\r\n      if (!renderer.camera) return\r\n\r\n      this.pointer = usePointer({\r\n        camera: renderer.camera,\r\n        domElement: renderer.canvas,\r\n        intersectObjects: () => renderer.scene ? renderer.scene.children : [],\r\n        intersectRecursive: this.intersectRecursive,\r\n        onIntersectEnter: this.onPointerEnter,\r\n        onIntersectOver: this.onPointerOver,\r\n        onIntersectMove: this.onPointerMove,\r\n        onIntersectLeave: this.onPointerLeave,\r\n        onIntersectClick: this.onClick,\r\n      })\r\n      this.pointer.addListeners()\r\n\r\n      if (this.intersectMode === 'frame') {\r\n        renderer.onBeforeRender(this.pointer.intersect)\r\n      }\r\n    })\r\n  },\r\n  unmounted() {\r\n    if (this.pointer) {\r\n      this.pointer.removeListeners()\r\n      this.renderer?.offBeforeRender(this.pointer.intersect)\r\n    }\r\n  },\r\n  render() {\r\n    return []\r\n  },\r\n  __hmrId: 'Raycaster',\r\n})\r\n","import { defineComponent, inject, onUnmounted, PropType } from 'vue'\r\nimport { CubeCamera, LinearMipmapLinearFilter, Mesh, RGBAFormat, WebGLCubeRenderTarget } from 'three'\r\nimport Object3D from './Object3D'\r\nimport { RendererInjectionKey } from './Renderer'\r\n\r\ninterface CubeCameraSetupInterface {\r\n  cubeRT?: WebGLCubeRenderTarget\r\n  cubeCamera?: CubeCamera\r\n  updateRT?: {(): void}\r\n}\r\n\r\nexport default defineComponent({\r\n  extends: Object3D,\r\n  props: {\r\n    cubeRTSize: { type: Number, default: 256 },\r\n    cubeCameraNear: { type: Number, default: 0.1 },\r\n    cubeCameraFar: { type: Number, default: 2000 },\r\n    autoUpdate: Boolean,\r\n    hideMeshes: { type: Array as PropType<Mesh[]>, default: () => ([]) },\r\n  },\r\n  setup(props): CubeCameraSetupInterface {\r\n    const rendererC = inject(RendererInjectionKey)\r\n    if (!rendererC || !rendererC.scene) {\r\n      console.error('Missing Renderer / Scene')\r\n      return {}\r\n    }\r\n\r\n    const renderer = rendererC.renderer, scene = rendererC.scene\r\n    const cubeRT = new WebGLCubeRenderTarget(props.cubeRTSize, { format: RGBAFormat, generateMipmaps: true, minFilter: LinearMipmapLinearFilter })\r\n    const cubeCamera = new CubeCamera(props.cubeCameraNear, props.cubeCameraFar, cubeRT)\r\n    const updateRT = () => {\r\n      props.hideMeshes.forEach(m => { m.visible = false })\r\n      cubeCamera.update(renderer, scene)\r\n      props.hideMeshes.forEach(m => { m.visible = true })\r\n    }\r\n\r\n    if (props.autoUpdate) {\r\n      rendererC.onBeforeRender(updateRT)\r\n      onUnmounted(() => { rendererC.offBeforeRender(updateRT) })\r\n    } else {\r\n      rendererC.onMounted(updateRT)\r\n    }\r\n\r\n    return { cubeRT, cubeCamera, updateRT }\r\n  },\r\n  created() {\r\n    if (this.cubeCamera) this.initObject3D(this.cubeCamera)\r\n  },\r\n  render() {\r\n    return []\r\n  },\r\n  __hmrId: 'CubeCamera',\r\n})\r\n","import * as THREE from \"three\"\nimport { Font, FontLoader } from \"three/examples/jsm/loaders/FontLoader.js\"\nimport { TextGeometry } from \"three/examples/jsm/geometries/TextGeometry.js\"\n\nexport default class CoordinateAxes extends THREE.Object3D {\n  name = \"COORDINATE_AXES\";\n  private readonly AXIS_LENGTH = 1;\n  // follows right-hand coordinate system\n  private readonly AXIS_COLOR_X = 0xff0000; // red\n  private readonly AXIS_COLOR_Y = 0x00ff00; // green\n  private readonly AXIS_COLOR_Z = 0x0000ff; // blue\n\n  constructor(addTexts = true) {\n    super();\n\n    const origin = new THREE.Vector3(0, 0, 0);\n    const axisX = new THREE.Vector3(1, 0, 0);\n    const axisY = new THREE.Vector3(0, 1, 0);\n    const axisZ = new THREE.Vector3(0, 0, 1);\n\n    const arrowX = new THREE.ArrowHelper(axisX, origin, this.AXIS_LENGTH, this.AXIS_COLOR_X, this.AXIS_LENGTH / 5, this.AXIS_LENGTH / 8);\n    const arrowY = new THREE.ArrowHelper(axisY, origin, this.AXIS_LENGTH, this.AXIS_COLOR_Y, this.AXIS_LENGTH / 5, this.AXIS_LENGTH / 8);\n    const arrowZ = new THREE.ArrowHelper(axisZ, origin, this.AXIS_LENGTH, this.AXIS_COLOR_Z, this.AXIS_LENGTH / 5, this.AXIS_LENGTH / 8);\n    this.add(arrowX, arrowY, arrowZ);\n\n    // an additional box at the origin\n    // const sphere = new THREE.SphereGeometry(this.AXIS_LENGTH / 20)\n    // const object = new THREE.Mesh(sphere, new THREE.MeshBasicMaterial({ color: 0xffff00 }))\n    // const box = new THREE.BoxHelper(object, 0xffff00)\n    // this.add(box)\n\n    addTexts && this.addTexts();\n  }\n\n  addTexts() {\n    // should be able to load font from threejs' folder, don't know how...\n    new FontLoader().load(\"three/fonts/helvetiker_regular.typeface.json\", (font) => {\n      const x = this.createText(font, \"x\", new THREE.Color(0xff0000));\n      const y = this.createText(font, \"y\", new THREE.Color(0x00ff00));\n      const z = this.createText(font, \"z\", new THREE.Color(0x0000ff));\n      x.position.set(this.AXIS_LENGTH, 0, 0);\n      y.position.set(0, this.AXIS_LENGTH, 0);\n      z.position.set(0, 0, this.AXIS_LENGTH);\n      this.add(x, y, z);\n    });\n  }\n\n  createText(font: Font, text: string, color?: THREE.Color) {\n    const textGeom = new TextGeometry(text, {\n      font: font,\n      size: 0.3,\n      height: 0.02,\n      curveSegments: 6,\n      bevelEnabled: false,\n      bevelThickness: 0,\n      bevelSize: 0.01,\n      bevelSegments: 3\n    });\n    const textMat = new THREE.MeshStandardMaterial({\n      flatShading: true,\n      transparent: true,\n      opacity: 0.6,\n      emissive: color || new THREE.Color(0x00ff00)\n    });\n    return new THREE.Mesh(textGeom, textMat);\n  }\n}\n","import * as THREE from \"three\"\nimport CoordinateAxes from \"./CoordinateAxes\"\n\n/**\n * This renderer monitors the host renderer's camera, and keeps a coordinate axes\n * the same direction as host renderer's\n */\nexport default class CoordinateAxesViewport {\n  hostRenderer?: { camera: any; } | undefined;\n  coordinateAxes?: CoordinateAxes;\n  camera?: THREE.OrthographicCamera;\n  scene?: THREE.Scene;\n  renderer?: THREE.WebGLRenderer;\n  height = 100; // size of render area\n  width = 100;\n\n  constructor(width?: number, height?: number) {\n    this.width = width || this.width;\n    this.height = height || this.height;\n    this.init();\n  }\n\n  init() {\n    this.initRenderer();\n    this.initScene();\n    this.animate();\n  }\n\n  initRenderer() {\n    this.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n    this.renderer.setSize(this.width, this.height);\n  }\n\n  initScene() {\n    this.scene = new THREE.Scene();\n    // do not set a background color, thus background is gonna be transparent\n    // this.scene.background = new THREE.Color(0xebf2f7)\n\n    this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0.1, 100);\n    this.scene.add(this.camera);\n\n    this.coordinateAxes = new CoordinateAxes();\n    this.scene.add(this.coordinateAxes);\n  }\n\n  render() {\n    if (this.renderer && this.scene && this.camera) {\n      this.update();\n      this.renderer.render(this.scene, this.camera);\n    }\n  }\n\n  animate() {\n    requestAnimationFrame(this.animate.bind(this));\n    this.render();\n  }\n\n  setHostRenderer(renderer: { camera: any; } | undefined) {\n    this.hostRenderer = renderer;\n    this.update();\n  }\n\n  update() {\n    if (!this.hostRenderer || !this.hostRenderer.camera) {\n      return;\n    }\n    const camera = this.hostRenderer.camera;\n    if (camera) {\n      const target = new THREE.Vector3();\n      camera.getWorldDirection(target);\n      const up = camera.up;\n      this.updateCameraDirection(target, up);\n    }\n  }\n\n  /**\n   * Update axes according to camera direction.\n   * Camera's direction is the only input factor for this class. It always look at the origin.\n   * @param direction\n   */\n  updateCameraDirection(direction: THREE.Vector3, up: THREE.Vector3) {\n    if (!this.camera || !direction) {\n      return;\n    }\n    direction.normalize();\n    const distanceFactor = 2; // keep camera a little farer, so it looks better\n    const centerDelta = 0.3; // put the lookAt point to be in the first quadrant\n    this.camera.position.set(-direction.x * distanceFactor + centerDelta, -direction.y * distanceFactor + centerDelta, -direction.z * distanceFactor + centerDelta);\n    this.camera.lookAt(centerDelta, centerDelta, centerDelta); // it always looks at the origin\n    this.camera.up = up;\n  }\n\n  dispose() {\n    if (!this.scene || !this.camera || !this.coordinateAxes) {\n      return;\n    }\n    this.scene.clear(); // remove all child objects\n    this.hostRenderer = undefined;\n    this.camera = undefined;\n    this.coordinateAxes = undefined;\n    this.scene = undefined; // this is necessary to call\n  }\n}\n","import { ComponentPropsOptions, ComponentPublicInstance, defineComponent, InjectionKey, watch } from 'vue'\r\nimport { BufferGeometry, Material, Mesh as TMesh } from 'three'\r\nimport Object3D, { Object3DSetupInterface } from '../core/Object3D'\r\nimport { bindProp } from '../tools'\r\n\r\nexport interface MeshSetupInterface extends Object3DSetupInterface {\r\n  mesh?: TMesh\r\n  geometry?: BufferGeometry\r\n  material?: Material\r\n  loading?: boolean\r\n}\r\n\r\nexport interface MeshInterface extends MeshSetupInterface {\r\n  setGeometry(g: BufferGeometry): void\r\n  setMaterial(m: Material): void\r\n}\r\n\r\nexport interface MeshPublicInterface extends ComponentPublicInstance, MeshInterface {}\r\n\r\nexport const MeshInjectionKey: InjectionKey<MeshPublicInterface> = Symbol('Mesh')\r\n\r\nconst Mesh = defineComponent({\r\n  name: 'Mesh',\r\n  extends: Object3D,\r\n  props: {\r\n    castShadow: Boolean,\r\n    receiveShadow: Boolean,\r\n  },\r\n  setup(): MeshSetupInterface {\r\n    return {}\r\n  },\r\n  provide() {\r\n    return {\r\n      [MeshInjectionKey as symbol]: this,\r\n    }\r\n  },\r\n  mounted() {\r\n    // TODO : proper ?\r\n    if (!this.mesh && !this.loading) this.initMesh()\r\n  },\r\n  methods: {\r\n    initMesh() {\r\n      const mesh = new TMesh(this.geometry, this.material)\r\n\r\n      bindProp(this, 'castShadow', mesh)\r\n      bindProp(this, 'receiveShadow', mesh)\r\n\r\n      this.mesh = mesh\r\n      this.initObject3D(mesh)\r\n    },\r\n    createGeometry() {},\r\n    addGeometryWatchers(props: Readonly<ComponentPropsOptions>) {\r\n      Object.keys(props).forEach(prop => {\r\n        // @ts-ignore\r\n        watch(() => this[prop], () => {\r\n          this.refreshGeometry()\r\n        })\r\n      })\r\n    },\r\n    setGeometry(geometry: BufferGeometry) {\r\n      this.geometry = geometry\r\n      if (this.mesh) this.mesh.geometry = geometry\r\n    },\r\n    setMaterial(material: Material) {\r\n      this.material = material\r\n      if (this.mesh) this.mesh.material = material\r\n    },\r\n    refreshGeometry() {\r\n      const oldGeo = this.geometry\r\n      this.createGeometry()\r\n      if (this.mesh && this.geometry) this.mesh.geometry = this.geometry\r\n      oldGeo?.dispose()\r\n    },\r\n  },\r\n  unmounted() {\r\n    // for predefined mesh (geometry/material are not unmounted)\r\n    if (this.geometry) this.geometry.dispose()\r\n    if (this.material) this.material.dispose()\r\n  },\r\n  __hmrId: 'Mesh',\r\n})\r\n\r\nexport default Mesh\r\n\r\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\r\nexport function meshComponent<P extends Readonly<ComponentPropsOptions>>(\r\n  name: string,\r\n  props: P,\r\n  createGeometry: {(c: any): BufferGeometry}\r\n) {\r\n  return defineComponent({\r\n    name,\r\n    extends: Mesh,\r\n    props,\r\n    created() {\r\n      this.createGeometry()\r\n      this.addGeometryWatchers(props)\r\n    },\r\n    methods: {\r\n      createGeometry() {\r\n        this.geometry = createGeometry(this)\r\n      },\r\n    },\r\n  })\r\n}\r\n","import { ComponentPropsOptions, defineComponent, PropType, watch } from 'vue'\r\nimport { BufferAttribute, BufferGeometry } from 'three'\r\nimport { MeshInjectionKey, MeshInterface } from '../meshes/Mesh'\r\n\r\nexport interface GeometrySetupInterface {\r\n  mesh?: MeshInterface\r\n  geometry?: BufferGeometry\r\n  watchProps?: string[]\r\n}\r\n\r\nexport interface GeometryAttributeInterface {\r\n  name: string\r\n  array: ArrayLike<number>\r\n  itemSize: number\r\n  normalized?: boolean\r\n}\r\n\r\n// function defaultSetup(): GeometryInterface {\r\n//   const mesh = inject('mesh') as MeshInterface\r\n//   const watchProps: string[] = []\r\n//   return { mesh, watchProps }\r\n// }\r\n\r\nconst Geometry = defineComponent({\r\n  emits: ['created'],\r\n  props: {\r\n    rotateX: Number,\r\n    rotateY: Number,\r\n    rotateZ: Number,\r\n    attributes: { type: Array as PropType<Array<GeometryAttributeInterface>>, default: () => ([]) },\r\n  },\r\n  // inject for sub components\r\n  inject: {\r\n    mesh: MeshInjectionKey as symbol,\r\n  },\r\n  setup(): GeometrySetupInterface {\r\n    return {}\r\n  },\r\n  created() {\r\n    if (!this.mesh) {\r\n      console.error('Missing parent Mesh')\r\n      return\r\n    }\r\n\r\n    this.createGeometry()\r\n    this.rotateGeometry()\r\n    if (this.geometry) this.mesh.setGeometry(this.geometry)\r\n\r\n    Object.keys(this.$props).forEach(prop => {\r\n      // @ts-ignore\r\n      watch(() => this[prop], this.refreshGeometry)\r\n    })\r\n  },\r\n  unmounted() {\r\n    this.geometry?.dispose()\r\n  },\r\n  methods: {\r\n    createGeometry() {\r\n      const bufferAttributes: Record<string, unknown> = {}\r\n      const geometry = new BufferGeometry()\r\n      this.attributes.forEach(attribute => {\r\n        if (attribute.name && attribute.itemSize && attribute.array) {\r\n          const bufferAttribute = bufferAttributes[attribute.name] = new BufferAttribute(attribute.array, attribute.itemSize, attribute.normalized)\r\n          geometry.setAttribute(attribute.name, bufferAttribute)\r\n        }\r\n      })\r\n      geometry.computeBoundingBox()\r\n      geometry.userData.component = this\r\n      this.geometry = geometry\r\n      this.$emit('created', geometry)\r\n    },\r\n    rotateGeometry() {\r\n      if (!this.geometry) return\r\n      if (this.rotateX) this.geometry.rotateX(this.rotateX)\r\n      if (this.rotateY) this.geometry.rotateY(this.rotateY)\r\n      if (this.rotateZ) this.geometry.rotateZ(this.rotateZ)\r\n    },\r\n    refreshGeometry() {\r\n      const oldGeo = this.geometry\r\n      this.createGeometry()\r\n      this.rotateGeometry()\r\n      if (this.geometry && this.mesh) this.mesh.setGeometry(this.geometry)\r\n      oldGeo?.dispose()\r\n    },\r\n  },\r\n  render() { return [] },\r\n})\r\n\r\nexport default Geometry\r\n\r\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\r\nexport function geometryComponent<P extends Readonly<ComponentPropsOptions>>(\r\n  name: string,\r\n  props: P,\r\n  createGeometry: {(c: any): BufferGeometry}\r\n) {\r\n  return defineComponent({\r\n    name,\r\n    extends: Geometry,\r\n    props,\r\n    methods: {\r\n      createGeometry() {\r\n        this.geometry = createGeometry(this)\r\n        this.geometry.userData.component = this\r\n        this.$emit('created', this.geometry)\r\n      },\r\n    },\r\n  })\r\n}\r\n","import { geometryComponent } from './Geometry'\r\nimport { BoxGeometry } from 'three'\r\n\r\nexport const props = {\r\n  size: Number,\r\n  width: { type: Number, default: 1 },\r\n  height: { type: Number, default: 1 },\r\n  depth: { type: Number, default: 1 },\r\n  widthSegments: { type: Number, default: 1 },\r\n  heightSegments: { type: Number, default: 1 },\r\n  depthSegments: { type: Number, default: 1 },\r\n} as const\r\n\r\nexport function createGeometry(comp: any): BoxGeometry {\r\n  if (comp.size) {\r\n    return new BoxGeometry(comp.size, comp.size, comp.size, comp.widthSegments, comp.heightSegments, comp.depthSegments)\r\n  } else {\r\n    return new BoxGeometry(comp.width, comp.height, comp.depth, comp.widthSegments, comp.heightSegments, comp.depthSegments)\r\n  }\r\n}\r\n\r\nexport default geometryComponent('BoxGeometry', props, createGeometry)\r\n","import { geometryComponent } from './Geometry'\r\nimport { CircleGeometry } from 'three'\r\n\r\nexport const props = {\r\n  radius: { type: Number, default: 1 },\r\n  segments: { type: Number, default: 8 },\r\n  thetaStart: { type: Number, default: 0 },\r\n  thetaLength: { type: Number, default: Math.PI * 2 },\r\n} as const\r\n\r\nexport function createGeometry(comp: any): CircleGeometry {\r\n  return new CircleGeometry(comp.radius, comp.segments, comp.thetaStart, comp.thetaLength)\r\n}\r\n\r\nexport default geometryComponent('CircleGeometry', props, createGeometry)\r\n","import { geometryComponent } from './Geometry'\r\nimport { ConeGeometry } from 'three'\r\n\r\nexport const props = {\r\n  radius: { type: Number, default: 1 },\r\n  height: { type: Number, default: 1 },\r\n  radialSegments: { type: Number, default: 8 },\r\n  heightSegments: { type: Number, default: 1 },\r\n  openEnded: { type: Boolean, default: false },\r\n  thetaStart: { type: Number, default: 0 },\r\n  thetaLength: { type: Number, default: Math.PI * 2 },\r\n} as const\r\n\r\nexport function createGeometry(comp: any): ConeGeometry {\r\n  return new ConeGeometry(comp.radius, comp.height, comp.radialSegments, comp.heightSegments, comp.openEnded, comp.thetaStart, comp.thetaLength)\r\n}\r\n\r\nexport default geometryComponent('ConeGeometry', props, createGeometry)\r\n","import { geometryComponent } from './Geometry'\r\nimport { CylinderGeometry } from 'three'\r\n\r\nexport const props = {\r\n  radiusTop: { type: Number, default: 1 },\r\n  radiusBottom: { type: Number, default: 1 },\r\n  height: { type: Number, default: 1 },\r\n  radialSegments: { type: Number, default: 8 },\r\n  heightSegments: { type: Number, default: 1 },\r\n  openEnded: { type: Boolean, default: false },\r\n  thetaStart: { type: Number, default: 0 },\r\n  thetaLength: { type: Number, default: Math.PI * 2 },\r\n} as const\r\n\r\nexport function createGeometry(comp: any): CylinderGeometry {\r\n  return new CylinderGeometry(comp.radiusTop, comp.radiusBottom, comp.height, comp.radialSegments, comp.heightSegments, comp.openEnded, comp.thetaStart, comp.thetaLength)\r\n}\r\n\r\nexport default geometryComponent('CylinderGeometry', props, createGeometry)\r\n","import { geometryComponent } from './Geometry'\r\nimport { DodecahedronGeometry } from 'three'\r\n\r\nexport const props = {\r\n  radius: { type: Number, default: 1 },\r\n  detail: { type: Number, default: 0 },\r\n} as const\r\n\r\nexport function createGeometry(comp: any): DodecahedronGeometry {\r\n  return new DodecahedronGeometry(comp.radius, comp.detail)\r\n}\r\n\r\nexport default geometryComponent('DodecahedronGeometry', props, createGeometry)\r\n","import { PropType } from 'vue'\r\nimport { geometryComponent } from './Geometry'\r\nimport { ExtrudeGeometry, ExtrudeGeometryOptions, Shape } from 'three'\r\n\r\nexport const props = {\r\n  shapes: { type: [Object, Array] as PropType<Shape | Shape[]> },\r\n  options: { type: Object as PropType<ExtrudeGeometryOptions> },\r\n} as const\r\n\r\nexport function createGeometry(comp: any): ExtrudeGeometry {\r\n  return new ExtrudeGeometry(comp.shapes, comp.options)\r\n}\r\n\r\nexport default geometryComponent('ExtrudeGeometry', props, createGeometry)\r\n","import { geometryComponent } from './Geometry'\r\nimport { IcosahedronGeometry } from 'three'\r\n\r\nexport const props = {\r\n  radius: { type: Number, default: 1 },\r\n  detail: { type: Number, default: 0 },\r\n} as const\r\n\r\nexport function createGeometry(comp: any): IcosahedronGeometry {\r\n  return new IcosahedronGeometry(comp.radius, comp.detail)\r\n}\r\n\r\nexport default geometryComponent('IcosahedronGeometry', props, createGeometry)\r\n","import { geometryComponent } from './Geometry'\r\nimport { LatheGeometry } from 'three'\r\n\r\nexport const props = {\r\n  points: Array,\r\n  segments: { type: Number, default: 12 },\r\n  phiStart: { type: Number, default: 0 },\r\n  phiLength: { type: Number, default: Math.PI * 2 },\r\n} as const\r\n\r\nexport function createGeometry(comp: any): LatheGeometry {\r\n  return new LatheGeometry(comp.points, comp.segments, comp.phiStart, comp.phiLength)\r\n}\r\n\r\nexport default geometryComponent('LatheGeometry', props, createGeometry)\r\n","import { geometryComponent } from './Geometry'\r\nimport { OctahedronGeometry } from 'three'\r\n\r\nexport const props = {\r\n  radius: { type: Number, default: 1 },\r\n  detail: { type: Number, default: 0 },\r\n} as const\r\n\r\nexport function createGeometry(comp: any): OctahedronGeometry {\r\n  return new OctahedronGeometry(comp.radius, comp.detail)\r\n}\r\n\r\nexport default geometryComponent('OctahedronGeometry', props, createGeometry)\r\n","import { geometryComponent } from './Geometry'\r\nimport { PlaneGeometry } from 'three'\r\n\r\nexport const props = {\r\n  width: { type: Number, default: 1 },\r\n  height: { type: Number, default: 1 },\r\n  widthSegments: { type: Number, default: 1 },\r\n  heightSegments: { type: Number, default: 1 },\r\n} as const\r\n\r\nexport function createGeometry(comp: any): PlaneGeometry {\r\n  return new PlaneGeometry(comp.width, comp.height, comp.widthSegments, comp.heightSegments)\r\n}\r\n\r\nexport default geometryComponent('PlaneGeometry', props, createGeometry)\r\n","import { geometryComponent } from './Geometry'\r\nimport { PolyhedronGeometry } from 'three'\r\n\r\nexport const props = {\r\n  vertices: Array,\r\n  indices: Array,\r\n  radius: { type: Number, default: 1 },\r\n  detail: { type: Number, default: 0 },\r\n} as const\r\n\r\nexport function createGeometry(comp: any): PolyhedronGeometry {\r\n  return new PolyhedronGeometry(comp.vertices, comp.indices, comp.radius, comp.detail)\r\n}\r\n\r\nexport default geometryComponent('PolyhedronGeometry', props, createGeometry)\r\n","import { geometryComponent } from './Geometry'\r\nimport { RingGeometry } from 'three'\r\n\r\nexport const props = {\r\n  innerRadius: { type: Number, default: 0.5 },\r\n  outerRadius: { type: Number, default: 1 },\r\n  thetaSegments: { type: Number, default: 8 },\r\n  phiSegments: { type: Number, default: 1 },\r\n  thetaStart: { type: Number, default: 0 },\r\n  thetaLength: { type: Number, default: Math.PI * 2 },\r\n} as const\r\n\r\nexport function createGeometry(comp: any): RingGeometry {\r\n  return new RingGeometry(comp.innerRadius, comp.outerRadius, comp.thetaSegments, comp.phiSegments, comp.thetaStart, comp.thetaLength)\r\n}\r\n\r\nexport default geometryComponent('RingGeometry', props, createGeometry)\r\n","import { geometryComponent } from './Geometry'\r\nimport { SphereGeometry } from 'three'\r\n\r\nexport const props = {\r\n  radius: { type: Number, default: 1 },\r\n  widthSegments: { type: Number, default: 12 },\r\n  heightSegments: { type: Number, default: 12 },\r\n  phiStart: { type: Number, default: 0 },\r\n  phiLength: { type: Number, default: Math.PI * 2 },\r\n  thetaStart: { type: Number, default: 0 },\r\n  thetaLength: { type: Number, default: Math.PI },\r\n} as const\r\n\r\nexport function createGeometry(comp: any): SphereGeometry {\r\n  return new SphereGeometry(comp.radius, comp.widthSegments, comp.heightSegments, comp.phiStart, comp.phiLength, comp.thetaStart, comp.thetaLength)\r\n}\r\n\r\nexport default geometryComponent('SphereGeometry', props, createGeometry)\r\n","import { PropType } from 'vue'\r\nimport { geometryComponent } from './Geometry'\r\nimport { Shape, ShapeGeometry } from 'three'\r\n\r\nexport const props = {\r\n  shapes: { type: [Object, Array] as PropType<Shape | Shape[]> },\r\n  curveSegments: { type: Number },\r\n} as const\r\n\r\nexport function createGeometry(comp: any): ShapeGeometry {\r\n  return new ShapeGeometry(comp.shapes, comp.curveSegments)\r\n}\r\n\r\nexport default geometryComponent('ShapeGeometry', props, createGeometry)\r\n","import { geometryComponent } from './Geometry'\r\nimport { TetrahedronGeometry } from 'three'\r\n\r\nexport const props = {\r\n  radius: { type: Number, default: 1 },\r\n  detail: { type: Number, default: 0 },\r\n} as const\r\n\r\nexport function createGeometry(comp: any): TetrahedronGeometry {\r\n  return new TetrahedronGeometry(comp.radius, comp.detail)\r\n}\r\n\r\nexport default geometryComponent('TetrahedronGeometry', props, createGeometry)\r\n","import { geometryComponent } from './Geometry'\r\nimport { TorusGeometry } from 'three'\r\n\r\nexport const props = {\r\n  radius: { type: Number, default: 1 },\r\n  tube: { type: Number, default: 0.4 },\r\n  radialSegments: { type: Number, default: 8 },\r\n  tubularSegments: { type: Number, default: 6 },\r\n  arc: { type: Number, default: Math.PI * 2 },\r\n} as const\r\n\r\nexport function createGeometry(comp: any): TorusGeometry {\r\n  return new TorusGeometry(comp.radius, comp.tube, comp.radialSegments, comp.tubularSegments, comp.arc)\r\n}\r\n\r\nexport default geometryComponent('TorusGeometry', props, createGeometry)\r\n","import { geometryComponent } from './Geometry'\r\nimport { TorusKnotGeometry } from 'three'\r\n\r\nexport const props = {\r\n  radius: { type: Number, default: 1 },\r\n  tube: { type: Number, default: 0.4 },\r\n  tubularSegments: { type: Number, default: 64 },\r\n  radialSegments: { type: Number, default: 8 },\r\n  p: { type: Number, default: 2 },\r\n  q: { type: Number, default: 3 },\r\n} as const\r\n\r\nexport function createGeometry(comp: any): TorusKnotGeometry {\r\n  return new TorusKnotGeometry(comp.radius, comp.tube, comp.tubularSegments, comp.radialSegments, comp.p, comp.q)\r\n}\r\n\r\nexport default geometryComponent('TorusKnotGeometry', props, createGeometry)\r\n","import { defineComponent } from 'vue'\r\nimport { CatmullRomCurve3, Curve, TubeGeometry, Vector3 } from 'three'\r\nimport Geometry from './Geometry'\r\n\r\nexport const props = {\r\n  points: Array,\r\n  path: Curve,\r\n  tubularSegments: { type: Number, default: 64 },\r\n  radius: { type: Number, default: 1 },\r\n  radialSegments: { type: Number, default: 8 },\r\n  closed: { type: Boolean, default: false },\r\n} as const\r\n\r\nexport function createGeometry(comp: any): TubeGeometry {\r\n  let curve\r\n  if (comp.points) {\r\n    curve = new CatmullRomCurve3(comp.points)\r\n  } else if (comp.path) {\r\n    curve = comp.path\r\n  } else {\r\n    console.error('Missing path curve or points.')\r\n  }\r\n  return new TubeGeometry(curve, comp.tubularSegments, comp.radius, comp.radiusSegments, comp.closed)\r\n}\r\n\r\nexport default defineComponent({\r\n  extends: Geometry,\r\n  props,\r\n  methods: {\r\n    createGeometry() {\r\n      this.geometry = createGeometry(this)\r\n    },\r\n    // update points (without using prop, faster)\r\n    updatePoints(points: Vector3[]) {\r\n      updateTubeGeometryPoints(this.geometry as TubeGeometry, points)\r\n    },\r\n  },\r\n})\r\n\r\nexport function updateTubeGeometryPoints(tube: TubeGeometry, points: Vector3[]): void {\r\n  const curve = new CatmullRomCurve3(points)\r\n  const { radialSegments, radius, tubularSegments, closed } = tube.parameters\r\n  const frames = curve.computeFrenetFrames(tubularSegments, closed)\r\n  tube.tangents = frames.tangents\r\n  tube.normals = frames.normals\r\n  tube.binormals = frames.binormals\r\n  tube.parameters.path = curve\r\n\r\n  const pAttribute = tube.getAttribute('position')\r\n  const nAttribute = tube.getAttribute('normal')\r\n\r\n  const normal = new Vector3()\r\n  const P = new Vector3()\r\n\r\n  for (let i = 0; i < tubularSegments; i++) {\r\n    updateSegment(i)\r\n  }\r\n  updateSegment(tubularSegments)\r\n\r\n  tube.attributes.position.needsUpdate = true\r\n  tube.attributes.normal.needsUpdate = true\r\n\r\n  function updateSegment(i: number) {\r\n    curve.getPointAt(i / tubularSegments, P)\r\n    const N = frames.normals[i]\r\n    const B = frames.binormals[i]\r\n    for (let j = 0; j <= radialSegments; j++) {\r\n      const v = j / radialSegments * Math.PI * 2\r\n      const sin = Math.sin(v)\r\n      const cos = -Math.cos(v)\r\n      normal.x = (cos * N.x + sin * B.x)\r\n      normal.y = (cos * N.y + sin * B.y)\r\n      normal.z = (cos * N.z + sin * B.z)\r\n      normal.normalize()\r\n      const index = (i * (radialSegments + 1) + j)\r\n      nAttribute.setXYZ(index, normal.x, normal.y, normal.z)\r\n      pAttribute.setXYZ(index, P.x + radius * normal.x, P.y + radius * normal.y, P.z + radius * normal.z)\r\n    }\r\n  }\r\n}\r\n","import { DirectionalLight, Light, SpotLight } from 'three'\r\nimport { defineComponent, PropType, watch } from 'vue'\r\nimport Object3D, { Vector2PropInterface } from '../core/Object3D'\r\nimport { bindProp, setFromProp } from '../tools'\r\n\r\nexport interface LightSetupInterface {\r\n  light?: Light\r\n}\r\n\r\nexport default defineComponent({\r\n  extends: Object3D,\r\n  name: 'Light',\r\n  props: {\r\n    color: { type: String, default: '#ffffff' },\r\n    intensity: { type: Number, default: 1 },\r\n    castShadow: { type: Boolean, default: false },\r\n    shadowMapSize: { type: Object as PropType<Vector2PropInterface>, default: () => ({ x: 512, y: 512 }) },\r\n    shadowCamera: { type: Object, default: () => ({}) },\r\n  },\r\n  setup(): LightSetupInterface {\r\n    return {}\r\n  },\r\n  unmounted() {\r\n    if (this.light instanceof SpotLight || this.light instanceof DirectionalLight) {\r\n      this.removeFromParent(this.light.target)\r\n    }\r\n  },\r\n  methods: {\r\n    initLight(light: Light) {\r\n      this.light = light\r\n\r\n      if ((light as any).shadow) {\r\n        light.castShadow = this.castShadow\r\n        // @ts-ignore\r\n        setFromProp(light.shadow.mapSize, this.shadowMapSize)\r\n        // @ts-ignore\r\n        setFromProp(light.shadow.camera, this.shadowCamera)\r\n      }\r\n\r\n      ['color', 'intensity', 'castShadow'].forEach(p => {\r\n        // @ts-ignore\r\n        watch(() => this[p], (value) => {\r\n          if (p === 'color') {\r\n            light.color.set(value)\r\n          } else {\r\n            // @ts-ignore\r\n            light[p] = value\r\n          }\r\n        })\r\n      })\r\n\r\n      this.initObject3D(light)\r\n\r\n      if (light instanceof SpotLight || light instanceof DirectionalLight) {\r\n        bindProp(this, 'target', light.target, 'position')\r\n        this.addToParent(light.target)\r\n      }\r\n    },\r\n  },\r\n  __hmrId: 'Light',\r\n})\r\n","import { defineComponent } from 'vue'\r\nimport { AmbientLight } from 'three'\r\nimport Light from './Light'\r\n\r\nexport default defineComponent({\r\n  extends: Light,\r\n  created() {\r\n    this.initLight(new AmbientLight(this.color, this.intensity))\r\n  },\r\n  __hmrId: 'AmbientLight',\r\n})\r\n","import { defineComponent, PropType } from 'vue'\r\nimport { DirectionalLight } from 'three'\r\nimport { Vector3PropInterface } from '../core/Object3D'\r\nimport Light from './Light'\r\n\r\nexport default defineComponent({\r\n  extends: Light,\r\n  props: {\r\n    target: { type: Object as PropType<Vector3PropInterface>, default: () => ({ x: 0, y: 0, z: 0 }) },\r\n  },\r\n  created() {\r\n    this.initLight(new DirectionalLight(this.color, this.intensity))\r\n  },\r\n  __hmrId: 'DirectionalLight',\r\n})\r\n","import { defineComponent, watch } from 'vue'\r\nimport { HemisphereLight } from 'three'\r\nimport Light from './Light'\r\n\r\nexport default defineComponent({\r\n  extends: Light,\r\n  props: {\r\n    groundColor: { type: String, default: '#444444' },\r\n  },\r\n  created() {\r\n    const light = new HemisphereLight(this.color, this.groundColor, this.intensity)\r\n    watch(() => this.groundColor, (value) => { light.groundColor.set(value) })\r\n    this.initLight(light)\r\n  },\r\n  __hmrId: 'HemisphereLight',\r\n})\r\n","import { defineComponent } from 'vue'\r\nimport { PointLight } from 'three'\r\nimport Light from './Light'\r\n\r\nexport default defineComponent({\r\n  extends: Light,\r\n  props: {\r\n    distance: { type: Number, default: 0 },\r\n    decay: { type: Number, default: 1 },\r\n  },\r\n  created() {\r\n    this.initLight(new PointLight(this.color, this.intensity, this.distance, this.decay))\r\n  },\r\n  __hmrId: 'PointLight',\r\n})\r\n","import { defineComponent, watch } from 'vue'\r\nimport { RectAreaLight } from 'three'\r\nimport { RectAreaLightUniformsLib } from 'three/examples/jsm/lights/RectAreaLightUniformsLib.js'\r\nimport { RectAreaLightHelper } from 'three/examples/jsm/helpers/RectAreaLightHelper.js'\r\nimport Light from './Light'\r\n\r\nexport default defineComponent({\r\n  extends: Light,\r\n  props: {\r\n    width: { type: Number, default: 10 },\r\n    height: { type: Number, default: 10 },\r\n    helper: Boolean,\r\n  },\r\n  created() {\r\n    RectAreaLightUniformsLib.init()\r\n    const light = new RectAreaLight(this.color, this.intensity, this.width, this.height)\r\n\r\n    const watchProps = ['width', 'height']\r\n    watchProps.forEach(p => {\r\n      // @ts-ignore\r\n      watch(() => this[p], (value) => { light[p] = value })\r\n    })\r\n\r\n    if (this.helper) {\r\n      const lightHelper = new RectAreaLightHelper(light)\r\n      light.add(lightHelper)\r\n    }\r\n\r\n    this.initLight(light)\r\n  },\r\n  __hmrId: 'RectAreaLight',\r\n})\r\n","import { defineComponent, watch } from 'vue'\r\nimport { SpotLight } from 'three'\r\nimport Light from './Light'\r\n\r\nexport default defineComponent({\r\n  extends: Light,\r\n  props: {\r\n    angle: { type: Number, default: Math.PI / 3 },\r\n    decay: { type: Number, default: 1 },\r\n    distance: { type: Number, default: 0 },\r\n    penumbra: { type: Number, default: 0 },\r\n    target: Object,\r\n  },\r\n  created() {\r\n    const light = new SpotLight(this.color, this.intensity, this.distance, this.angle, this.penumbra, this.decay)\r\n\r\n    const watchProps = ['angle', 'decay', 'distance', 'penumbra']\r\n    watchProps.forEach(p => {\r\n      // @ts-ignore\r\n      watch(() => this[p], (value) => { light[p] = value })\r\n    })\r\n\r\n    this.initLight(light)\r\n  },\r\n  __hmrId: 'SpotLight',\r\n})\r\n","import { ComponentPropsOptions, ComponentPublicInstance, defineComponent, InjectionKey, PropType, watch } from 'vue'\r\nimport { Color, Material, MeshBasicMaterial, MeshLambertMaterial, MeshPhongMaterial, MeshPhysicalMaterial, MeshStandardMaterial, MeshToonMaterial, PointsMaterial as TPointsMaterial, Texture, ShadowMaterial as TShadowMaterial } from 'three'\r\nimport { MeshInjectionKey, MeshInterface } from '../meshes/Mesh'\r\nimport { bindObjectProp, propsValues } from '../tools'\r\nimport { BasicMaterialPropsInterface, LambertMaterialPropsInterface, MaterialPropsInterface, PhongMaterialPropsInterface, PhysicalMaterialPropsInterface, PointsMaterialPropsInterface, StandardMaterialPropsInterface, ToonMaterialPropsInterface } from './types'\r\n\r\nexport interface MaterialSetupInterface {\r\n  mesh?: MeshInterface\r\n  material?: Material\r\n  createMaterial?(): Material\r\n}\r\n\r\nexport interface MaterialInterface extends MaterialSetupInterface {\r\n  setTexture(texture: Texture | null, key: string): void\r\n}\r\n\r\nexport interface MaterialPublicInterface extends ComponentPublicInstance, MaterialInterface {}\r\n\r\nexport const MaterialInjectionKey: InjectionKey<MaterialPublicInterface> = Symbol('Material')\r\n\r\nconst BaseMaterial = defineComponent({\r\n  emits: ['created'],\r\n  props: {\r\n    color: { type: String, default: '#ffffff' },\r\n    props: { type: Object as PropType<MaterialPropsInterface>, default: () => ({}) },\r\n  },\r\n  inject: {\r\n    mesh: MeshInjectionKey as symbol,\r\n  },\r\n  setup(): MaterialSetupInterface {\r\n    return {}\r\n  },\r\n  provide() {\r\n    return {\r\n      [MaterialInjectionKey as symbol]: this,\r\n    }\r\n  },\r\n  created() {\r\n    if (!this.mesh) {\r\n      console.error('Missing parent Mesh')\r\n      return\r\n    }\r\n\r\n    if (this.createMaterial) {\r\n      const material = this.material = this.createMaterial()\r\n      // @ts-ignore\r\n      watch(() => this.color, (value) => { material.color.set(value) })\r\n      bindObjectProp(this, 'props', material, false, this.setProp)\r\n      this.$emit('created', material)\r\n      this.mesh.setMaterial(material)\r\n    }\r\n  },\r\n  unmounted() {\r\n    this.material?.dispose()\r\n  },\r\n  methods: {\r\n    getMaterialParams() {\r\n      return { ...propsValues(this.$props, ['props']), ...this.props }\r\n    },\r\n    setProp(material: any, key: string, value: any, needsUpdate = false) {\r\n      const dstVal = material[key]\r\n      if (dstVal instanceof Color) dstVal.set(value)\r\n      else material[key] = value\r\n      material.needsUpdate = needsUpdate\r\n    },\r\n    setTexture(texture: Texture | null, key = 'map') {\r\n      this.setProp(this.material, key, texture, true)\r\n    },\r\n  },\r\n  render() {\r\n    return this.$slots.default ? this.$slots.default() : []\r\n  },\r\n  __hmrId: 'Material',\r\n})\r\n\r\nexport default BaseMaterial\r\n\r\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\r\nexport function materialComponent<P extends Readonly<ComponentPropsOptions>>(\r\n  name: string,\r\n  props: P,\r\n  createMaterial: {(opts: any): Material}\r\n) {\r\n  return defineComponent({\r\n    name,\r\n    extends: BaseMaterial,\r\n    props,\r\n    methods: {\r\n      createMaterial() {\r\n        return createMaterial(this.getMaterialParams())\r\n      },\r\n    },\r\n  })\r\n}\r\n\r\n// TODO : proper\r\nexport const BasicMaterial = materialComponent('BasicMaterial', { props: { type: Object as PropType<BasicMaterialPropsInterface>, default: () => ({}) } }, (opts) => new MeshBasicMaterial(opts))\r\nexport const LambertMaterial = materialComponent('LambertMaterial', { props: { type: Object as PropType<LambertMaterialPropsInterface>, default: () => ({}) } }, (opts) => new MeshLambertMaterial(opts))\r\nexport const PhongMaterial = materialComponent('PhongMaterial', { props: { type: Object as PropType<PhongMaterialPropsInterface>, default: () => ({}) } }, (opts) => new MeshPhongMaterial(opts))\r\nexport const PhysicalMaterial = materialComponent('PhysicalMaterial', { props: { type: Object as PropType<PhysicalMaterialPropsInterface>, default: () => ({}) } }, (opts) => new MeshPhysicalMaterial(opts))\r\nexport const PointsMaterial = materialComponent('PointsMaterial', { props: { type: Object as PropType<PointsMaterialPropsInterface>, default: () => ({}) } }, (opts) => new TPointsMaterial(opts))\r\nexport const ShadowMaterial = materialComponent('ShadowMaterial', { color: { type: String, default: '#000000' }, props: { type: Object as PropType<MaterialPropsInterface>, default: () => ({}) } }, (opts) => new TShadowMaterial(opts))\r\nexport const StandardMaterial = materialComponent('StandardMaterial', { props: { type: Object as PropType<StandardMaterialPropsInterface>, default: () => ({}) } }, (opts) => new MeshStandardMaterial(opts))\r\nexport const ToonMaterial = materialComponent('ToonMaterial', { props: { type: Object as PropType<ToonMaterialPropsInterface>, default: () => ({}) } }, (opts) => new MeshToonMaterial(opts))\r\n","import { MeshMatcapMaterial, TextureLoader } from 'three'\r\nimport { propsValues, getMatcapUrl } from '../tools'\r\nimport { materialComponent } from './Material'\r\n\r\nexport default materialComponent(\r\n  'MatcapMaterial',\r\n  {\r\n    src: String,\r\n    name: { type: String, default: '0404E8_0404B5_0404CB_3333FC' },\r\n  },\r\n  (opts) => {\r\n    const src = opts.src ? opts.src : getMatcapUrl(opts.name)\r\n    const params = propsValues(opts, ['src', 'name'])\r\n    params.matcap = new TextureLoader().load(src)\r\n    return new MeshMatcapMaterial(params)\r\n  }\r\n)\r\n","import { ShaderMaterial } from 'three'\r\nimport { materialComponent } from './Material'\r\nimport { propsValues } from '../tools'\r\n\r\nconst defaultVertexShader = `\r\n  varying vec2 vUv;\r\n  void main(){\r\n    vUv = uv;\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position,1.0);\r\n  }\r\n`\r\n\r\nconst defaultFragmentShader = `\r\n  varying vec2 vUv;\r\n  void main() {\r\n    gl_FragColor = vec4(vUv.x, vUv.y, 0., 1.0);\r\n  }\r\n`\r\n\r\nexport default materialComponent(\r\n  'ShaderMaterial',\r\n  {\r\n    props: { type: Object, default: () => ({\r\n      uniforms: {},\r\n      vertexShader: defaultVertexShader,\r\n      fragmentShader: defaultFragmentShader,\r\n    }) },\r\n  },\r\n  (opts) => new ShaderMaterial(propsValues(opts, ['color']))\r\n)\r\n","/**\r\n * ------------------------------------------------------------------------------------------\r\n * Subsurface Scattering shader\r\n * Based on three/examples/jsm/shaders/SubsurfaceScatteringShader.js\r\n * Based on GDC 2011 – Approximating Translucency for a Fast, Cheap and Convincing Subsurface Scattering Look\r\n * https://colinbarrebrisebois.com/2011/03/07/gdc-2011-approximating-translucency-for-a-fast-cheap-and-convincing-subsurface-scattering-look/\r\n *------------------------------------------------------------------------------------------\r\n */\r\nimport {\r\n  Color,\r\n  ShaderChunk,\r\n  ShaderLib,\r\n  UniformsUtils,\r\n} from 'three'\r\n\r\nfunction replaceAll(string: string, find: string, replace: string) {\r\n  return string.split(find).join(replace)\r\n}\r\n\r\nconst meshphongFragHead = ShaderChunk.meshphong_frag.slice(0, ShaderChunk.meshphong_frag.indexOf('void main() {'))\r\nconst meshphongFragBody = ShaderChunk.meshphong_frag.slice(ShaderChunk.meshphong_frag.indexOf('void main() {'))\r\n\r\nconst SubsurfaceScatteringShader = {\r\n\r\n  uniforms: UniformsUtils.merge([\r\n    ShaderLib.phong.uniforms,\r\n    {\r\n      thicknessColor: { value: new Color(0xffffff) },\r\n      thicknessDistortion: { value: 0.1 },\r\n      thicknessAmbient: { value: 0.0 },\r\n      thicknessAttenuation: { value: 0.1 },\r\n      thicknessPower: { value: 2.0 },\r\n      thicknessScale: { value: 10.0 },\r\n    },\r\n  ]),\r\n\r\n  vertexShader: `\r\n    #define USE_UV\r\n    ${ShaderChunk.meshphong_vert}\r\n  `,\r\n\r\n  fragmentShader: `\r\n    #define USE_UV\r\n    #define SUBSURFACE\r\n\r\n    ${meshphongFragHead}\r\n\r\n    uniform float thicknessPower;\r\n    uniform float thicknessScale;\r\n    uniform float thicknessDistortion;\r\n    uniform float thicknessAmbient;\r\n    uniform float thicknessAttenuation;\r\n    uniform vec3 thicknessColor;\r\n\r\n    void RE_Direct_Scattering(const in IncidentLight directLight, const in vec2 uv, const in GeometricContext geometry, inout ReflectedLight reflectedLight) {\r\n      #ifdef USE_COLOR\r\n        vec3 thickness = vColor * thicknessColor;\r\n      #else\r\n        vec3 thickness = thicknessColor;\r\n      #endif\r\n      vec3 scatteringHalf = normalize(directLight.direction + (geometry.normal * thicknessDistortion));\r\n      float scatteringDot = pow(saturate(dot(geometry.viewDir, -scatteringHalf)), thicknessPower) * thicknessScale;\r\n      vec3 scatteringIllu = (scatteringDot + thicknessAmbient) * thickness;\r\n      reflectedLight.directDiffuse += scatteringIllu * thicknessAttenuation * directLight.color;\r\n    }\r\n  ` + meshphongFragBody.replace(\r\n    '#include <lights_fragment_begin>',\r\n    replaceAll(\r\n      ShaderChunk.lights_fragment_begin,\r\n      'RE_Direct( directLight, geometry, material, reflectedLight );',\r\n      `\r\n        RE_Direct( directLight, geometry, material, reflectedLight );\r\n        #if defined( SUBSURFACE ) && defined( USE_UV )\r\n          RE_Direct_Scattering(directLight, vUv, geometry, reflectedLight);\r\n        #endif\r\n      `\r\n    )\r\n  ),\r\n}\r\n\r\nexport default SubsurfaceScatteringShader\r\n","import { defineComponent, PropType } from 'vue'\r\nimport { Color, ShaderMaterial, UniformsUtils } from 'three'\r\nimport SubsurfaceScatteringShader from './SubsurfaceScatteringShader'\r\nimport Material from './Material'\r\nimport { bindObjectProp } from '../tools'\r\n\r\nexport interface SubSurfaceMaterialUniformsInterface {\r\n  diffuse?: string | number\r\n  thicknessColor?: string | number\r\n  thicknessDistortion?: number\r\n  thicknessAmbient?: number\r\n  thicknessAttenuation?: number\r\n  thicknessPower?: number\r\n  thicknessScale?: number\r\n}\r\n\r\nexport default defineComponent({\r\n  extends: Material,\r\n  props: {\r\n    uniforms: { type: Object as PropType<SubSurfaceMaterialUniformsInterface>, default: () => ({\r\n      diffuse: '#ffffff',\r\n      thicknessColor: '#ffffff',\r\n      thicknessDistortion: 0.4,\r\n      thicknessAmbient: 0.01,\r\n      thicknessAttenuation: 0.7,\r\n      thicknessPower: 2,\r\n      thicknessScale: 4,\r\n    }) },\r\n  },\r\n  methods: {\r\n    createMaterial() {\r\n      const params = SubsurfaceScatteringShader\r\n      const uniforms = UniformsUtils.clone(params.uniforms)\r\n\r\n      bindObjectProp(this, 'uniforms', uniforms, true, (dst: any, key: string, value: any) => {\r\n        const dstVal = dst[key].value\r\n        if (dstVal instanceof Color) dstVal.set(value)\r\n        else dst[key].value = value\r\n      })\r\n\r\n      const material = new ShaderMaterial({\r\n        ...params,\r\n        lights: true,\r\n        ...this.props,\r\n        uniforms,\r\n      })\r\n\r\n      return material\r\n    },\r\n  },\r\n})\r\n","import { defineComponent, PropType, watch } from 'vue'\r\nimport { ShaderMaterial, Texture, TextureLoader } from 'three'\r\nimport { bindObjectProp } from '../tools'\r\nimport { MaterialInjectionKey, MaterialInterface } from './Material'\r\n\r\nexport interface TexureInterface {\r\n  material?: MaterialInterface\r\n  texture?: Texture\r\n}\r\n\r\nexport default defineComponent({\r\n  inject: {\r\n    material: MaterialInjectionKey as symbol,\r\n  },\r\n  props: {\r\n    name: { type: String, default: 'map' },\r\n    uniform: String,\r\n    src: String,\r\n    onLoad: Function as PropType<(t: Texture) => void>,\r\n    onProgress: Function as PropType<(e: ProgressEvent) => void>,\r\n    onError: Function as PropType<(e: ErrorEvent) => void>,\r\n    props: { type: Object, default: () => ({}) },\r\n  },\r\n  setup(): TexureInterface {\r\n    return {}\r\n  },\r\n  created() {\r\n    this.refreshTexture()\r\n    watch(() => this.src, this.refreshTexture)\r\n  },\r\n  unmounted() {\r\n    this.material?.setTexture(null, this.name)\r\n    this.texture?.dispose()\r\n  },\r\n  methods: {\r\n    createTexture() {\r\n      if (!this.src) return undefined\r\n      return new TextureLoader().load(this.src, this.onLoaded, this.onProgress, this.onError)\r\n    },\r\n    initTexture() {\r\n      if (!this.texture) return\r\n\r\n      bindObjectProp(this, 'props', this.texture)\r\n      if (!this.material) return\r\n\r\n      this.material.setTexture(this.texture, this.name)\r\n      if (this.material.material instanceof ShaderMaterial && this.uniform) {\r\n        (this.material.material).uniforms[this.uniform] = { value: this.texture }\r\n      }\r\n    },\r\n    refreshTexture() {\r\n      this.texture?.dispose()\r\n      this.texture = this.createTexture()\r\n      this.initTexture()\r\n    },\r\n    onLoaded(t: Texture) {\r\n      this.onLoad?.(t)\r\n    },\r\n  },\r\n  render() { return [] },\r\n})\r\n","import { defineComponent, PropType, watch } from 'vue'\r\nimport { CubeReflectionMapping, CubeTextureLoader } from 'three'\r\nimport Texture from './Texture'\r\n\r\nexport default defineComponent({\r\n  extends: Texture,\r\n  props: {\r\n    name: { type: String, default: 'envMap' },\r\n    path: { type: String, required: true },\r\n    urls: {\r\n      type: Array as PropType<string[]>,\r\n      default: () => ['px.jpg', 'nx.jpg', 'py.jpg', 'ny.jpg', 'pz.jpg', 'nz.jpg'],\r\n    },\r\n    props: { type: Object, default: () => ({ mapping: CubeReflectionMapping }) },\r\n  },\r\n  created() {\r\n    watch(() => this.path, this.refreshTexture)\r\n    watch(() => this.urls, this.refreshTexture)\r\n  },\r\n  methods: {\r\n    createTexture() {\r\n      return new CubeTextureLoader()\r\n        .setPath(this.path)\r\n        .load(this.urls, this.onLoaded, this.onProgress, this.onError)\r\n    },\r\n  },\r\n})\r\n","import { defineComponent, watch } from 'vue'\r\nimport { VideoTexture } from 'three'\r\nimport Texture from './Texture'\r\n\r\nexport default defineComponent({\r\n  extends: Texture,\r\n  props: {\r\n    videoId: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n  },\r\n  created() {\r\n    watch(() => this.videoId, this.refreshTexture)\r\n  },\r\n  methods: {\r\n    createTexture() {\r\n      const video = document.getElementById(this.videoId) as HTMLVideoElement\r\n      return new VideoTexture(video)\r\n    },\r\n  },\r\n})\r\n","import { meshComponent } from './Mesh'\r\nimport { props, createGeometry } from '../geometries/BoxGeometry'\r\n\r\nexport default meshComponent('Box', props, createGeometry)\r\n\r\n// import { defineComponent } from 'vue'\r\n// import Mesh, { meshComponent } from './Mesh'\r\n//\r\n// export default defineComponent({\r\n//   extends: Mesh,\r\n//   props,\r\n//   created() {\r\n//     this.createGeometry()\r\n//     this.addGeometryWatchers(props)\r\n//   },\r\n//   methods: {\r\n//     createGeometry() {\r\n//       this.geometry = createGeometry(this)\r\n//     },\r\n//   },\r\n// })\r\n","import { meshComponent } from './Mesh'\r\nimport { props, createGeometry } from '../geometries/CircleGeometry'\r\n\r\nexport default meshComponent('Circle', props, createGeometry)\r\n","import { meshComponent } from './Mesh'\r\nimport { props, createGeometry } from '../geometries/ConeGeometry'\r\n\r\nexport default meshComponent('Cone', props, createGeometry)\r\n","import { meshComponent } from './Mesh'\r\nimport { props, createGeometry } from '../geometries/CylinderGeometry'\r\n\r\nexport default meshComponent('Cylinder', props, createGeometry)\r\n","import { meshComponent } from './Mesh'\r\nimport { props, createGeometry } from '../geometries/DodecahedronGeometry'\r\n\r\nexport default meshComponent('Dodecahedron', props, createGeometry)\r\n","import { meshComponent } from './Mesh'\r\nimport { props, createGeometry } from '../geometries/IcosahedronGeometry'\r\n\r\nexport default meshComponent('Icosahedron', props, createGeometry)\r\n","import { meshComponent } from './Mesh'\r\nimport { props, createGeometry } from '../geometries/LatheGeometry'\r\n\r\nexport default meshComponent('Lathe', props, createGeometry)\r\n","import { meshComponent } from './Mesh'\r\nimport { props, createGeometry } from '../geometries/OctahedronGeometry'\r\n\r\nexport default meshComponent('Octahedron', props, createGeometry)\r\n","import { meshComponent } from './Mesh'\r\nimport { props, createGeometry } from '../geometries/PlaneGeometry'\r\n\r\nexport default meshComponent('Plane', props, createGeometry)\r\n","import { meshComponent } from './Mesh'\r\nimport { props, createGeometry } from '../geometries/PolyhedronGeometry'\r\n\r\nexport default meshComponent('Polyhedron', props, createGeometry)\r\n","import { meshComponent } from './Mesh'\r\nimport { props, createGeometry } from '../geometries/RingGeometry'\r\n\r\nexport default meshComponent('Ring', props, createGeometry)\r\n","import { meshComponent } from './Mesh'\r\nimport { props, createGeometry } from '../geometries/SphereGeometry'\r\n\r\nexport default meshComponent('Sphere', props, createGeometry)\r\n","import { meshComponent } from './Mesh'\r\nimport { props, createGeometry } from '../geometries/TetrahedronGeometry'\r\n\r\nexport default meshComponent('Tetrahedron', props, createGeometry)\r\n","import { defineComponent, PropType, watch } from 'vue'\r\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry.js'\r\nimport { Font, FontLoader } from 'three/examples/jsm/loaders/FontLoader.js'\r\nimport Mesh, { MeshSetupInterface } from './Mesh'\r\n\r\ninterface TextSetupInterface extends MeshSetupInterface {\r\n  geometry?: TextGeometry\r\n  font?: Font\r\n}\r\n\r\nconst props = {\r\n  text: { type: String, required: true, default: 'Text' },\r\n  fontSrc: { type: String, required: true },\r\n  size: { type: Number, default: 80 },\r\n  height: { type: Number, default: 5 },\r\n  depth: { type: Number, default: 1 },\r\n  curveSegments: { type: Number, default: 12 },\r\n  bevelEnabled: { type: Boolean, default: false },\r\n  bevelThickness: { type: Number, default: 10 },\r\n  bevelSize: { type: Number, default: 8 },\r\n  bevelOffset: { type: Number, default: 0 },\r\n  bevelSegments: { type: Number, default: 5 },\r\n  align: { type: [Boolean, String] as PropType<boolean | string>, default: false },\r\n} as const\r\n\r\nexport default defineComponent({\r\n  extends: Mesh,\r\n  props,\r\n  setup(): TextSetupInterface {\r\n    return {}\r\n  },\r\n  created() {\r\n    if (!this.fontSrc) {\r\n      console.error('Missing required prop: \"font-src\"')\r\n      return\r\n    }\r\n    // if (!this.text) {\r\n    //   console.error('Missing required prop: \"text\"')\r\n    //   return\r\n    // }\r\n\r\n    // add watchers\r\n    const watchProps = [\r\n      'text', 'size', 'height', 'curveSegments',\r\n      'bevelEnabled', 'bevelThickness', 'bevelSize', 'bevelOffset', 'bevelSegments',\r\n      'align',\r\n    ]\r\n    watchProps.forEach(p => {\r\n      // @ts-ignore\r\n      watch(() => this[p], () => {\r\n        if (this.font) this.refreshGeometry()\r\n      })\r\n    })\r\n\r\n    const loader = new FontLoader()\r\n    this.loading = true\r\n    loader.load(this.fontSrc, (font) => {\r\n      this.loading = false\r\n      this.font = font\r\n      this.createGeometry()\r\n      this.initMesh()\r\n    })\r\n  },\r\n  methods: {\r\n    createGeometry() {\r\n      this.geometry = new TextGeometry(this.text, {\r\n        // @ts-ignore\r\n        font: this.font,\r\n        size: this.size,\r\n        height: this.height,\r\n        depth: this.depth,\r\n        curveSegments: this.curveSegments,\r\n        bevelEnabled: this.bevelEnabled,\r\n        bevelThickness: this.bevelThickness,\r\n        bevelSize: this.bevelSize,\r\n        bevelOffset: this.bevelOffset,\r\n        bevelSegments: this.bevelSegments,\r\n      })\r\n\r\n      if (this.align === 'center') {\r\n        this.geometry.center()\r\n      }\r\n    },\r\n  },\r\n})\r\n","import { meshComponent } from './Mesh'\r\nimport { props, createGeometry } from '../geometries/TorusGeometry'\r\n\r\nexport default meshComponent('Torus', props, createGeometry)\r\n","import { meshComponent } from './Mesh'\r\nimport { props, createGeometry } from '../geometries/TorusKnotGeometry'\r\n\r\nexport default meshComponent('TorusKnot', props, createGeometry)\r\n","import { defineComponent } from 'vue'\r\nimport { TubeGeometry, Vector3 } from 'three'\r\nimport Mesh from './Mesh'\r\nimport { props, createGeometry, updateTubeGeometryPoints } from '../geometries/TubeGeometry'\r\n\r\nexport default defineComponent({\r\n  extends: Mesh,\r\n  props,\r\n  created() {\r\n    this.createGeometry()\r\n    this.addGeometryWatchers(props)\r\n  },\r\n  methods: {\r\n    createGeometry() {\r\n      this.geometry = createGeometry(this)\r\n    },\r\n    // update curve points (without using prop, faster)\r\n    updatePoints(points: Vector3[]) {\r\n      updateTubeGeometryPoints(this.geometry as TubeGeometry, points)\r\n    },\r\n  },\r\n  __hmrId: 'Tube',\r\n})\r\n","import { defineComponent, watch } from 'vue'\r\nimport { DoubleSide, MeshBasicMaterial, PlaneGeometry, Texture, TextureLoader } from 'three'\r\nimport Mesh, { MeshSetupInterface } from './Mesh'\r\n\r\ninterface ImageSetupInterface extends MeshSetupInterface {\r\n  material?: MeshBasicMaterial\r\n  texture?: Texture\r\n}\r\n\r\nexport default defineComponent({\r\n  emits: ['loaded'],\r\n  extends: Mesh,\r\n  props: {\r\n    src: { type: String, required: true },\r\n    width: Number,\r\n    height: Number,\r\n    widthSegments: { type: Number, default: 1 },\r\n    heightSegments: { type: Number, default: 1 },\r\n    keepSize: Boolean,\r\n  },\r\n  setup(): ImageSetupInterface {\r\n    return {}\r\n  },\r\n  created() {\r\n    if (!this.renderer) return\r\n\r\n    this.geometry = new PlaneGeometry(1, 1, this.widthSegments, this.heightSegments)\r\n    this.material = new MeshBasicMaterial({ side: DoubleSide, map: this.loadTexture() })\r\n\r\n    watch(() => this.src, this.refreshTexture);\r\n\r\n    ['width', 'height'].forEach(p => {\r\n      // @ts-ignore\r\n      watch(() => this[p], this.resize)\r\n    })\r\n\r\n    this.resize()\r\n    if (this.keepSize) this.renderer.onResize(this.resize)\r\n  },\r\n  unmounted() {\r\n    this.renderer?.offResize(this.resize)\r\n  },\r\n  methods: {\r\n    loadTexture() {\r\n      return new TextureLoader().load(this.src, this.onLoaded)\r\n    },\r\n    refreshTexture() {\r\n      this.texture?.dispose()\r\n      if (this.material) {\r\n        this.material.map = this.loadTexture()\r\n        this.material.needsUpdate = true\r\n      }\r\n    },\r\n    onLoaded(texture: Texture) {\r\n      this.texture = texture\r\n      this.resize()\r\n      this.$emit('loaded', texture)\r\n    },\r\n    resize() {\r\n      if (!this.renderer || !this.texture) return\r\n      const screen = this.renderer.size\r\n      const iW = this.texture.image.width\r\n      const iH = this.texture.image.height\r\n      const iRatio = iW / iH\r\n      let w = 1, h = 1\r\n      if (this.width && this.height) {\r\n        w = this.width * screen.wWidth / screen.width\r\n        h = this.height * screen.wHeight / screen.height\r\n      } else if (this.width) {\r\n        w = this.width * screen.wWidth / screen.width\r\n        h = w / iRatio\r\n      } else if (this.height) {\r\n        h = this.height * screen.wHeight / screen.height\r\n        w = h * iRatio\r\n      } else {\r\n        if (iRatio > 1) w = h * iRatio\r\n        else h = w / iRatio\r\n      }\r\n      if (this.mesh) {\r\n        this.mesh.scale.x = w\r\n        this.mesh.scale.y = h\r\n      }\r\n    },\r\n  },\r\n  __hmrId: 'Image',\r\n})\r\n","import { defineComponent } from 'vue'\r\nimport { InstancedMesh } from 'three'\r\nimport Mesh from './Mesh'\r\nimport { bindProp } from '../tools'\r\n\r\nexport default defineComponent({\r\n  extends: Mesh,\r\n  props: {\r\n    count: { type: Number, required: true },\r\n  },\r\n  methods: {\r\n    initMesh() {\r\n      if (!this.renderer) return\r\n\r\n      if (!this.geometry || !this.material) {\r\n        console.error('Missing geometry and/or material')\r\n        return false\r\n      }\r\n\r\n      this.mesh = new InstancedMesh(this.geometry, this.material, this.count)\r\n      this.mesh.userData.component = this\r\n\r\n      bindProp(this, 'castShadow', this.mesh)\r\n      bindProp(this, 'receiveShadow', this.mesh)\r\n\r\n      if (this.onPointerEnter ||\r\n        this.onPointerOver ||\r\n        this.onPointerMove ||\r\n        this.onPointerLeave ||\r\n        this.onPointerDown ||\r\n        this.onPointerUp ||\r\n        this.onClick) {\r\n        this.renderer.three.addIntersectObject(this.mesh)\r\n      }\r\n\r\n      this.initObject3D(this.mesh)\r\n    },\r\n  },\r\n  __hmrId: 'InstancedMesh',\r\n})\r\n","import { defineComponent } from 'vue'\r\nimport { Sprite, SpriteMaterial, Texture, TextureLoader } from 'three'\r\nimport Object3D, { Object3DSetupInterface } from '../core/Object3D'\r\n\r\ninterface SpriteSetupInterface extends Object3DSetupInterface {\r\n  texture?: Texture\r\n  material?: SpriteMaterial\r\n  sprite?: Sprite\r\n}\r\n\r\nexport default defineComponent({\r\n  extends: Object3D,\r\n  emits: ['loaded'],\r\n  props: {\r\n    src: { type: String, required: true },\r\n  },\r\n  setup(): SpriteSetupInterface {\r\n    return {}\r\n  },\r\n  created() {\r\n    this.texture = new TextureLoader().load(this.src, this.onLoaded)\r\n    this.material = new SpriteMaterial({ map: this.texture })\r\n    this.sprite = new Sprite(this.material)\r\n    this.initObject3D(this.sprite)\r\n  },\r\n  unmounted() {\r\n    this.texture?.dispose()\r\n    this.material?.dispose()\r\n  },\r\n  methods: {\r\n    onLoaded() {\r\n      this.updateUV()\r\n      this.$emit('loaded')\r\n    },\r\n    updateUV() {\r\n      if (!this.texture || !this.sprite) return\r\n\r\n      const iWidth = this.texture.image.width\r\n      const iHeight = this.texture.image.height\r\n      const iRatio = iWidth / iHeight\r\n\r\n      let x = 0.5, y = 0.5\r\n      if (iRatio > 1) {\r\n        x = 0.5 * iRatio\r\n      } else {\r\n        y = 0.5 / iRatio\r\n      }\r\n\r\n      const positions = this.sprite.geometry.attributes.position.array as Array<number>\r\n      positions[0] = -x; positions[1] = -y\r\n      positions[5] = x; positions[6] = -y\r\n      positions[10] = x; positions[11] = y\r\n      positions[15] = -x; positions[16] = y\r\n      this.sprite.geometry.attributes.position.needsUpdate = true\r\n    },\r\n  },\r\n  __hmrId: 'Sprite',\r\n})\r\n","import { defineComponent } from 'vue'\r\nimport { BufferGeometry, Material, Points } from 'three'\r\nimport Object3D, { Object3DSetupInterface } from '../core/Object3D'\r\nimport { MeshInjectionKey } from './Mesh'\r\n\r\nexport interface PointsSetupInterface extends Object3DSetupInterface {\r\n  mesh?: Points\r\n  points?: Points\r\n  geometry?: BufferGeometry\r\n  material?: Material\r\n}\r\n\r\nexport interface PointsInterface extends PointsSetupInterface {\r\n  setGeometry(geometry: BufferGeometry): void\r\n  setMaterial(material: Material): void\r\n}\r\n\r\n// not really a mesh, but allow us to easily get geometry/material support\r\nexport default defineComponent({\r\n  extends: Object3D,\r\n  setup(): PointsSetupInterface {\r\n    return {}\r\n  },\r\n  provide() {\r\n    return {\r\n      [MeshInjectionKey as symbol]: this,\r\n    }\r\n  },\r\n  mounted() {\r\n    this.mesh = this.points = new Points(this.geometry, this.material)\r\n    this.initObject3D(this.mesh)\r\n  },\r\n  methods: {\r\n    setGeometry(geometry: BufferGeometry) {\r\n      this.geometry = geometry\r\n      if (this.mesh) this.mesh.geometry = geometry\r\n    },\r\n    setMaterial(material: Material) {\r\n      this.material = material\r\n      if (this.mesh) this.mesh.material = material\r\n    },\r\n  },\r\n})\r\n","import { Object3D as TObject3D } from 'three'\r\nimport { defineComponent } from 'vue'\r\nimport Object3D from '../core/Object3D'\r\n\r\nexport default defineComponent({\r\n  extends: Object3D,\r\n  emits: ['before-load', 'load', 'progress', 'error'],\r\n  props: {\r\n    src: { type: String, required: true },\r\n  },\r\n  data() {\r\n    return {\r\n      progress: 0,\r\n    }\r\n  },\r\n  methods: {\r\n    onLoad(model: TObject3D) {\r\n      this.$emit('load', model)\r\n    },\r\n    onProgress(progress: ProgressEvent) {\r\n      this.progress = progress.loaded / progress.total\r\n      this.$emit('progress', progress)\r\n    },\r\n    onError(error: ErrorEvent) {\r\n      this.$emit('error', error)\r\n    },\r\n  },\r\n})\r\n","import { defineComponent } from 'vue'\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js'\r\nimport { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader.js'\r\nimport Model from './Model'\r\n\r\nexport default defineComponent({\r\n  extends: Model,\r\n  props: {\r\n    dracoPath: { type: String, required: true },\r\n  },\r\n  created() {\r\n    const loader = new GLTFLoader()\r\n    if (this.dracoPath) {\r\n      const dracoLoader = new DRACOLoader()\r\n      dracoLoader.setDecoderPath(this.dracoPath)\r\n      loader.setDRACOLoader(dracoLoader)\r\n    }\r\n    this.$emit('before-load', loader)\r\n    loader.load(this.src, (gltf) => {\r\n      this.onLoad(gltf)\r\n      this.initObject3D(gltf.scene)\r\n    }, this.onProgress, this.onError)\r\n  },\r\n})\r\n","import { defineComponent } from 'vue'\r\nimport { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader.js'\r\nimport Model from './Model'\r\n\r\nexport default defineComponent({\r\n  extends: Model,\r\n  created() {\r\n    const loader = new FBXLoader()\r\n    this.$emit('before-load', loader)\r\n    loader.load(this.src, (fbx) => {\r\n      this.onLoad(fbx)\r\n      this.initObject3D(fbx)\r\n    }, this.onProgress, this.onError)\r\n  },\r\n})\r\n","import { defineComponent, inject, InjectionKey } from 'vue'\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js'\r\nimport { Pass } from 'three/examples/jsm/postprocessing/Pass'\r\nimport { RendererInjectionKey, RendererInterface } from '../core/Renderer'\r\n\r\ninterface EffectComposerSetupInterface {\r\n  renderer?: RendererInterface\r\n  composer?: EffectComposer\r\n}\r\n\r\nexport interface EffectComposerInterface extends EffectComposerSetupInterface {\r\n  addPass(pass: Pass): void\r\n  removePass(pass: Pass): void\r\n}\r\n\r\nexport const ComposerInjectionKey: InjectionKey<EffectComposerInterface> = Symbol('Composer')\r\n\r\nexport default defineComponent({\r\n  setup(): EffectComposerSetupInterface {\r\n    const renderer = inject(RendererInjectionKey)\r\n    return { renderer }\r\n  },\r\n  provide() {\r\n    return {\r\n      [ComposerInjectionKey as symbol]: this,\r\n    }\r\n  },\r\n  created() {\r\n    if (!this.renderer) {\r\n      console.error('Renderer not found')\r\n      return\r\n    }\r\n    const renderer = this.renderer\r\n\r\n    const composer = new EffectComposer(this.renderer.renderer)\r\n    this.composer = composer\r\n    this.renderer.composer = composer\r\n\r\n    // this.renderer.onInit(() => {\r\n    renderer.addListener('init', () => {\r\n      renderer.renderer.autoClear = false\r\n      this.resize()\r\n      renderer.addListener('resize', this.resize)\r\n    })\r\n  },\r\n  unmounted() {\r\n    this.renderer?.removeListener('resize', this.resize)\r\n  },\r\n  methods: {\r\n    addPass(pass: Pass) {\r\n      this.composer?.addPass(pass)\r\n    },\r\n    removePass(pass: Pass) {\r\n      this.composer?.removePass(pass)\r\n    },\r\n    resize() {\r\n      if (this.composer && this.renderer) {\r\n        this.composer.setSize(this.renderer.size.width, this.renderer.size.height)\r\n      }\r\n    },\r\n  },\r\n  render() {\r\n    return this.$slots.default ? this.$slots.default() : []\r\n  },\r\n  __hmrId: 'EffectComposer',\r\n})\r\n","import { Pass } from 'three/examples/jsm/postprocessing/Pass'\r\nimport { defineComponent } from 'vue'\r\nimport { RendererInjectionKey, RendererInterface } from '../core/Renderer'\r\nimport { ComposerInjectionKey, EffectComposerInterface } from './EffectComposer'\r\n\r\nexport interface EffectSetupInterface {\r\n  renderer?: RendererInterface\r\n  composer?: EffectComposerInterface\r\n  pass?: Pass\r\n}\r\n\r\nexport default defineComponent({\r\n  // inject for sub components\r\n  inject: {\r\n    renderer: RendererInjectionKey as symbol,\r\n    composer: ComposerInjectionKey as symbol,\r\n  },\r\n  emits: ['ready'],\r\n  setup(): EffectSetupInterface {\r\n    return {}\r\n  },\r\n  created() {\r\n    if (!this.composer) {\r\n      console.error('Missing parent EffectComposer')\r\n    }\r\n    if (!this.renderer) {\r\n      console.error('Missing parent Renderer')\r\n    }\r\n  },\r\n  unmounted() {\r\n    if (this.pass) {\r\n      this.composer?.removePass(this.pass);\r\n      (this.pass as any).dispose?.()\r\n    }\r\n  },\r\n  methods: {\r\n    initEffectPass(pass: Pass) {\r\n      this.pass = pass\r\n      this.composer?.addPass(pass)\r\n      this.$emit('ready', pass)\r\n    },\r\n  },\r\n  render() {\r\n    return []\r\n  },\r\n  __hmrId: 'EffectPass',\r\n})\r\n","import { defineComponent } from 'vue'\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js'\r\nimport EffectPass from './EffectPass'\r\n\r\nexport default defineComponent({\r\n  extends: EffectPass,\r\n  created() {\r\n    if (!this.renderer) return\r\n\r\n    if (!this.renderer.scene) {\r\n      console.error('Missing Scene')\r\n      return\r\n    }\r\n    if (!this.renderer.camera) {\r\n      console.error('Missing Camera')\r\n      return\r\n    }\r\n    const pass = new RenderPass(this.renderer.scene, this.renderer.camera)\r\n    this.initEffectPass(pass)\r\n  },\r\n  __hmrId: 'RenderPass',\r\n})\r\n","import { defineComponent, watch } from 'vue'\r\nimport { BokehPass } from 'three/examples/jsm/postprocessing/BokehPass.js'\r\nimport EffectPass from './EffectPass'\r\n\r\nconst props = {\r\n  focus: { type: Number, default: 1 },\r\n  aperture: { type: Number, default: 0.025 },\r\n  maxblur: { type: Number, default: 0.01 },\r\n} as const\r\n\r\nexport default defineComponent({\r\n  extends: EffectPass,\r\n  props,\r\n  created() {\r\n    if (!this.renderer) return\r\n\r\n    if (!this.renderer.scene) {\r\n      console.error('Missing Scene')\r\n      return\r\n    }\r\n    if (!this.renderer.camera) {\r\n      console.error('Missing Camera')\r\n      return\r\n    }\r\n\r\n    const params = {\r\n      focus: this.focus,\r\n      aperture: this.aperture,\r\n      maxblur: this.maxblur,\r\n      width: this.renderer.size.width,\r\n      height: this.renderer.size.height,\r\n    }\r\n\r\n    const pass = new BokehPass(this.renderer.scene, this.renderer.camera, params)\r\n\r\n    Object.keys(props).forEach(p => {\r\n      // @ts-ignore\r\n      watch(() => this[p], (value) => { pass.uniforms[p].value = value })\r\n    })\r\n\r\n    this.initEffectPass(pass)\r\n  },\r\n  __hmrId: 'BokehPass',\r\n})\r\n","import { defineComponent, watch } from 'vue'\r\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass.js'\r\nimport EffectPass from './EffectPass'\r\n\r\nconst props = {\r\n  noiseIntensity: { type: Number, default: 0.5 },\r\n  scanlinesIntensity: { type: Number, default: 0.05 },\r\n  scanlinesCount: { type: Number, default: 4096 },\r\n  grayscale: { type: Number, default: 0 },\r\n} as const\r\n\r\nexport default defineComponent({\r\n  extends: EffectPass,\r\n  props,\r\n  created() {\r\n    const pass = new FilmPass(this.noiseIntensity, this.scanlinesIntensity, this.scanlinesCount, this.grayscale)\r\n\r\n    Object.keys(props).forEach(p => {\r\n      // @ts-ignore\r\n      watch(() => this[p], (value) => { pass.uniforms[p].value = value })\r\n    })\r\n\r\n    this.initEffectPass(pass)\r\n  },\r\n  __hmrId: 'FilmPass',\r\n})\r\n","import { defineComponent } from 'vue'\r\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass.js'\r\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader.js'\r\nimport EffectPass from './EffectPass'\r\nimport { SizeInterface } from '../core/useThree'\r\n\r\nexport default defineComponent({\r\n  extends: EffectPass,\r\n  created() {\r\n    const pass = new ShaderPass(FXAAShader)\r\n\r\n    // resize will be first called in renderer init\r\n    this.renderer?.addListener('resize', this.resize)\r\n\r\n    this.initEffectPass(pass)\r\n  },\r\n  unmounted() {\r\n    this.renderer?.removeListener('resize', this.resize)\r\n  },\r\n  methods: {\r\n    resize({ size }: { size: SizeInterface }) {\r\n      if (this.pass) {\r\n        const { resolution } = (this.pass as ShaderPass).material.uniforms\r\n        resolution.value.x = 1 / size.width\r\n        resolution.value.y = 1 / size.height\r\n      }\r\n    },\r\n  },\r\n  __hmrId: 'FXAAPass',\r\n})\r\n","import { defineComponent, watch } from 'vue'\r\nimport { HalftonePass } from 'three/examples/jsm/postprocessing/HalftonePass.js'\r\nimport EffectPass from './EffectPass'\r\n\r\nconst props = {\r\n  shape: { type: Number, default: 1 },\r\n  radius: { type: Number, default: 4 },\r\n  rotateR: { type: Number, default: Math.PI / 12 * 1 },\r\n  rotateG: { type: Number, default: Math.PI / 12 * 2 },\r\n  rotateB: { type: Number, default: Math.PI / 12 * 3 },\r\n  scatter: { type: Number, default: 0 },\r\n} as const\r\n\r\nexport default defineComponent({\r\n  extends: EffectPass,\r\n  props,\r\n  created() {\r\n    if (!this.renderer) return\r\n\r\n    const pass = new HalftonePass(this.renderer.size.width, this.renderer.size.height, {})\r\n\r\n    Object.keys(props).forEach(p => {\r\n      // @ts-ignore\r\n      pass.uniforms[p].value = this[p]\r\n      // @ts-ignore\r\n      watch(() => this[p], (value) => { pass.uniforms[p].value = value })\r\n    })\r\n\r\n    this.initEffectPass(pass)\r\n  },\r\n  __hmrId: 'HalftonePass',\r\n})\r\n","import { defineComponent } from 'vue'\r\nimport { SMAAPass } from 'three/examples/jsm/postprocessing/SMAAPass.js'\r\nimport EffectPass from './EffectPass'\r\n\r\nexport default defineComponent({\r\n  extends: EffectPass,\r\n  created() {\r\n    if (!this.renderer) return\r\n\r\n    const pass = new SMAAPass(this.renderer.size.width, this.renderer.size.height)\r\n    this.initEffectPass(pass)\r\n  },\r\n  __hmrId: 'SMAAPass',\r\n})\r\n","import { defineComponent } from 'vue'\r\nimport { SSAOPass } from 'three/examples/jsm/postprocessing/SSAOPass.js'\r\nimport EffectPass from './EffectPass'\r\n\r\nexport default defineComponent({\r\n  extends: EffectPass,\r\n  props: {\r\n    options: {\r\n      type: Object,\r\n      default: () => ({}),\r\n    },\r\n  },\r\n  created() {\r\n    if (!this.renderer) return\r\n\r\n    if (!this.renderer.scene) {\r\n      console.error('Missing Scene')\r\n      return\r\n    }\r\n    if (!this.renderer.camera) {\r\n      console.error('Missing Camera')\r\n      return\r\n    }\r\n\r\n    const pass = new SSAOPass(\r\n      this.renderer.scene,\r\n      this.renderer.camera,\r\n      this.renderer.size.width,\r\n      this.renderer.size.height\r\n    )\r\n\r\n    Object.keys(this.options).forEach(key => {\r\n      // @ts-ignore\r\n      pass[key] = this.options[key]\r\n    })\r\n\r\n    this.initEffectPass(pass)\r\n  },\r\n  __hmrId: 'SSAOPass',\r\n})\r\n","export default {\r\n  uniforms: {},\r\n  vertexShader: `\r\n    varying vec2 vUv;\r\n    void main() {\r\n      vUv = uv;\r\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\r\n    }\r\n  `,\r\n  fragmentShader: `\r\n    varying vec2 vUv;\r\n    void main() {\r\n      gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\r\n    }\r\n  `,\r\n}\r\n","// From https://github.com/evanw/glfx.js\r\nimport { Vector2 } from 'three'\r\nimport DefaultShader from './default'\r\n\r\nexport default {\r\n  uniforms: {\r\n    tDiffuse: { value: null },\r\n    blurRadius: { value: 0 },\r\n    gradientRadius: { value: 0 },\r\n    start: { value: new Vector2() },\r\n    end: { value: new Vector2() },\r\n    delta: { value: new Vector2() },\r\n    texSize: { value: new Vector2() },\r\n  },\r\n  vertexShader: DefaultShader.vertexShader,\r\n  fragmentShader: `\r\n    uniform sampler2D tDiffuse;\r\n    uniform float blurRadius;\r\n    uniform float gradientRadius;\r\n    uniform vec2 start;\r\n    uniform vec2 end;\r\n    uniform vec2 delta;\r\n    uniform vec2 texSize;\r\n    varying vec2 vUv;\r\n\r\n    float random(vec3 scale, float seed) {\r\n      /* use the fragment position for a different seed per-pixel */\r\n      return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\r\n    }\r\n\r\n    void main() {\r\n      vec4 color = vec4(0.0);\r\n      float total = 0.0;\r\n\r\n      /* randomize the lookup values to hide the fixed number of samples */\r\n      float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\r\n\r\n      vec2 normal = normalize(vec2(start.y - end.y, end.x - start.x));\r\n      float radius = smoothstep(0.0, 1.0, abs(dot(vUv * texSize - start, normal)) / gradientRadius) * blurRadius;\r\n      for (float t = -30.0; t <= 30.0; t++) {\r\n          float percent = (t + offset - 0.5) / 30.0;\r\n          float weight = 1.0 - abs(percent);\r\n          vec4 texel = texture2D(tDiffuse, vUv + delta / texSize * percent * radius);\r\n          // vec4 texel2 = texture2D(tDiffuse, vUv + vec2(-delta.y, delta.x) / texSize * percent * radius);\r\n\r\n          /* switch to pre-multiplied alpha to correctly blur transparent images */\r\n          texel.rgb *= texel.a;\r\n          // texel2.rgb *= texel2.a;\r\n\r\n          color += texel * weight;\r\n          total += 2.0 * weight;\r\n      }\r\n\r\n      gl_FragColor = color / total;\r\n\r\n      /* switch back from pre-multiplied alpha */\r\n      gl_FragColor.rgb /= gl_FragColor.a + 0.00001;\r\n    }\r\n  `,\r\n}\r\n","import { defineComponent, PropType, watch } from 'vue'\r\nimport { Vector2 } from 'three'\r\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass.js'\r\nimport EffectPass from './EffectPass'\r\nimport TiltShift from '../shaders/TiltShift'\r\nimport { Vector2PropInterface } from '../core/Object3D'\r\nimport { bindProp } from '../tools'\r\n\r\nconst props = {\r\n  blurRadius: { type: Number, default: 10 },\r\n  gradientRadius: { type: Number, default: 100 },\r\n  start: { type: Object as PropType<Vector2PropInterface>, default: () => ({ x: 0, y: 100 }) },\r\n  end: { type: Object as PropType<Vector2PropInterface>, default: () => ({ x: 10, y: 100 }) },\r\n} as const\r\n\r\ninterface TiltShiftPassSetupInterface {\r\n  uniforms1: {[name: string]: { value: any }}\r\n  uniforms2: {[name: string]: { value: any }}\r\n  pass1?: ShaderPass\r\n  pass2?: ShaderPass\r\n}\r\n\r\nexport default defineComponent({\r\n  extends: EffectPass,\r\n  props,\r\n  setup(): TiltShiftPassSetupInterface {\r\n    return { uniforms1: {}, uniforms2: {} }\r\n  },\r\n  created() {\r\n    if (!this.composer) return\r\n\r\n    this.pass1 = new ShaderPass(TiltShift)\r\n    this.pass2 = new ShaderPass(TiltShift)\r\n\r\n    const uniforms1 = this.uniforms1 = this.pass1.uniforms\r\n    const uniforms2 = this.uniforms2 = this.pass2.uniforms\r\n\r\n    // shared uniforms\r\n    uniforms2.blurRadius = uniforms1.blurRadius\r\n    uniforms2.gradientRadius = uniforms1.gradientRadius\r\n    uniforms2.start = uniforms1.start\r\n    uniforms2.end = uniforms1.end\r\n    uniforms2.texSize = uniforms1.texSize\r\n\r\n    bindProp(this, 'blurRadius', uniforms1.blurRadius, 'value')\r\n    bindProp(this, 'gradientRadius', uniforms1.gradientRadius, 'value')\r\n\r\n    this.updateFocusLine();\r\n\r\n    ['start', 'end'].forEach(p => {\r\n      // @ts-ignore\r\n      watch(() => this[p], this.updateFocusLine, { deep: true })\r\n    })\r\n\r\n    this.pass1.setSize = (width: number, height: number) => {\r\n      uniforms1.texSize.value.set(width, height)\r\n    }\r\n\r\n    this.initEffectPass(this.pass1)\r\n    this.composer.addPass(this.pass2)\r\n  },\r\n  unmounted() {\r\n    if (this.composer && this.pass2) this.composer.removePass(this.pass2)\r\n  },\r\n  methods: {\r\n    updateFocusLine() {\r\n      this.uniforms1.start.value.copy(this.start)\r\n      this.uniforms1.end.value.copy(this.end)\r\n      const dv = new Vector2().copy(this.end as Vector2).sub(this.start as Vector2).normalize()\r\n      this.uniforms1.delta.value.copy(dv)\r\n      this.uniforms2.delta.value.set(-dv.y, dv.x)\r\n    },\r\n  },\r\n  __hmrId: 'TiltShiftPass',\r\n})\r\n","import { defineComponent, watch } from 'vue'\r\nimport { Vector2 } from 'three'\r\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js'\r\nimport EffectPass from './EffectPass'\r\n\r\nconst props = {\r\n  strength: { type: Number, default: 1.5 },\r\n  radius: { type: Number, default: 0 },\r\n  threshold: { type: Number, default: 0 },\r\n} as const\r\n\r\nexport default defineComponent({\r\n  extends: EffectPass,\r\n  props,\r\n  created() {\r\n    if (!this.renderer) return\r\n\r\n    const size = new Vector2(this.renderer.size.width, this.renderer.size.height)\r\n    const pass = new UnrealBloomPass(size, this.strength, this.radius, this.threshold)\r\n\r\n    Object.keys(props).forEach(p => {\r\n      // @ts-ignore\r\n      watch(() => this[p], (value) => { pass.uniforms[p].value = value })\r\n    })\r\n\r\n    this.initEffectPass(pass)\r\n  },\r\n  __hmrId: 'UnrealBloomPass',\r\n})\r\n","// From https://github.com/evanw/glfx.js\r\nimport { Vector2 } from 'three'\r\nimport DefaultShader from './default'\r\n\r\nexport default {\r\n  uniforms: {\r\n    tDiffuse: { value: null },\r\n    center: { value: new Vector2(0.5, 0.5) },\r\n    strength: { value: 0 },\r\n  },\r\n  vertexShader: DefaultShader.vertexShader,\r\n  fragmentShader: `\r\n    uniform sampler2D tDiffuse;\r\n    uniform vec2 center;\r\n    uniform float strength;\r\n    varying vec2 vUv;\r\n\r\n    float random(vec3 scale, float seed) {\r\n      /* use the fragment position for a different seed per-pixel */\r\n      return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\r\n    }\r\n    \r\n    void main() {\r\n      vec4 color = vec4(0.0);\r\n      float total = 0.0;\r\n      vec2 toCenter = center - vUv;\r\n      \r\n      /* randomize the lookup values to hide the fixed number of samples */\r\n      float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\r\n      \r\n      for (float t = 0.0; t <= 40.0; t++) {\r\n        float percent = (t + offset) / 40.0;\r\n        float weight = 4.0 * (percent - percent * percent);\r\n        vec4 texel = texture2D(tDiffuse, vUv + toCenter * percent * strength);\r\n\r\n        /* switch to pre-multiplied alpha to correctly blur transparent images */\r\n        texel.rgb *= texel.a;\r\n\r\n        color += texel * weight;\r\n        total += weight;\r\n      }\r\n\r\n      gl_FragColor = color / total;\r\n\r\n      /* switch back from pre-multiplied alpha */\r\n      gl_FragColor.rgb /= gl_FragColor.a + 0.00001;\r\n    }\r\n  `,\r\n}\r\n","import { defineComponent, PropType } from 'vue'\r\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass.js'\r\nimport EffectPass from './EffectPass'\r\nimport ZoomBlur from '../shaders/ZoomBlur'\r\nimport { Vector2PropInterface } from '../core/Object3D'\r\nimport { bindProp } from '../tools'\r\n\r\nexport default defineComponent({\r\n  extends: EffectPass,\r\n  props: {\r\n    center: { type: Object as PropType<Vector2PropInterface>, default: () => ({ x: 0.5, y: 0.5 }) },\r\n    strength: { type: Number, default: 0.5 },\r\n  },\r\n  created() {\r\n    const pass = new ShaderPass(ZoomBlur)\r\n\r\n    bindProp(this, 'center', pass.uniforms.center, 'value')\r\n    bindProp(this, 'strength', pass.uniforms.strength, 'value')\r\n\r\n    this.initEffectPass(pass)\r\n  },\r\n  __hmrId: 'ZoomBlurPass',\r\n})\r\n","import { App, createApp as _createApp } from 'vue'\r\nimport * as TROIS from './index'\r\n\r\nexport const TroisJSVuePlugin = {\r\n  install(app: App): void {\r\n    const comps = [\r\n      'Camera',\r\n      'OrthographicCamera',\r\n      'PerspectiveCamera',\r\n      'Raycaster',\r\n      'Renderer',\r\n      'Scene',\r\n      'Group',\r\n\r\n      'CubeCamera',\r\n\r\n      'AmbientLight',\r\n      'DirectionalLight',\r\n      'HemisphereLight',\r\n      'PointLight',\r\n      'RectAreaLight',\r\n      'SpotLight',\r\n\r\n      'BasicMaterial',\r\n      'LambertMaterial',\r\n      'MatcapMaterial',\r\n      'PhongMaterial',\r\n      'PhysicalMaterial',\r\n      'PointsMaterial',\r\n      'ShaderMaterial',\r\n      'StandardMaterial',\r\n      'SubSurfaceMaterial',\r\n      'ToonMaterial',\r\n\r\n      'Texture',\r\n      'CubeTexture',\r\n\r\n      'BufferGeometry',\r\n\r\n      'Mesh',\r\n\r\n      'Box', 'BoxGeometry',\r\n      'Circle', 'CircleGeometry',\r\n      'Cone', 'ConeGeometry',\r\n      'Cylinder', 'CylinderGeometry',\r\n      'Dodecahedron', 'DodecahedronGeometry',\r\n      'Icosahedron', 'IcosahedronGeometry',\r\n      'Lathe', 'LatheGeometry',\r\n      'Octahedron', 'OctahedronGeometry',\r\n      'Plane', 'PlaneGeometry',\r\n      'Polyhedron', 'PolyhedronGeometry',\r\n      'Ring', 'RingGeometry',\r\n      'Sphere', 'SphereGeometry',\r\n      'Tetrahedron', 'TetrahedronGeometry',\r\n      'Text',\r\n      'Torus', 'TorusGeometry',\r\n      'TorusKnot', 'TorusKnotGeometry',\r\n      'Tube', 'TubeGeometry',\r\n\r\n      'Image',\r\n      'InstancedMesh',\r\n      'Points',\r\n      'Sprite',\r\n\r\n      'FbxModel',\r\n      'GltfModel',\r\n\r\n      'BokehPass',\r\n      'EffectComposer',\r\n      'FilmPass',\r\n      'FXAAPass',\r\n      'HalftonePass',\r\n      'RenderPass',\r\n      'SAOPass',\r\n      'SMAAPass',\r\n      'SSAOPass',\r\n      'TiltShiftPass',\r\n      'UnrealBloomPass',\r\n      'ZoomBlurPass',\r\n    ]\r\n\r\n    comps.forEach(comp => {\r\n      // @ts-ignore\r\n      app.component(comp, TROIS[comp])\r\n    })\r\n  },\r\n}\r\n\r\nexport function createApp(params: any): App {\r\n  return _createApp(params).use(TroisJSVuePlugin)\r\n}\r\n","export const decimalPrecisionRange: {[key: string]: number} = {\n  \"Precision from file\": 99,\n  \"0(1)\": 0,\n  \"0.1(1/2)\": 1,\n  \"0.01(1/4)\": 2,\n  \"0.001(1/8)\": 3,\n  \"0.0001(1/16)\": 4,\n  \"0.00001(1/32)\": 5,\n  \"0.000001(1/64)\": 6\n};\n\nexport const showPrecisionValue = (value: number, precistionType: number) => {\n  const str = value.toFixed(precistionType === decimalPrecisionRange[\"Precision from file\"] ? 2 : precistionType);\n  return str;\n};\n","import * as THREE from \"three\";\nimport { DRACOExporter, DRACOExporterOptions } from \"three/examples/jsm/exporters/DRACOExporter.js\";\n// import { GLTFExporter, GLTFExporterOptions } from \"three/examples/jsm/exporters/GLTFExporter\";\nimport { OBJExporter } from \"three/examples/jsm/exporters/OBJExporter.js\";\n\nexport class ExportUtils {\n  public static EXTENSION_GLTF = \".gltf\";\n  public static EXTENSION_GLB = \".glb\";\n  public static EXTENSION_OBJ = \".obj\";\n  public static EXTENSION_DRACO = \".drc\";\n  public static EXTENSION_JSON = \".json\";\n\n  // creates a link element in order to trigger download\n  private static downloadLink: HTMLAnchorElement;\n\n  /**\n   * Exports given object to gltf file\n   */\n  public static exportToGltf(input: THREE.Object3D, filename: string) {\n    ExportUtils.exportToGltfOrGlb(input, filename, { binary: false });\n  }\n\n  /**\n   * Exports given object to glb file\n   */\n  public static exportToGlb(input: THREE.Object3D, filename: string) {\n    ExportUtils.exportToGltfOrGlb(input, filename, { binary: true });\n  }\n\n  /**\n   * Exports given object to gltf/glb file\n   * @param input given object\n   * @param filename filename without path, nor extension\n   * @param options\n   */\n  public static exportToGltfOrGlb(input: THREE.Object3D, filename: string, options: object = {}) {\n    if (!input || !filename) {\n      throw new Error(\"Invalid input or filename!\");\n    }\n    // Something is wrong when upgrading threejs version, so disable this feature for now\n    console.warn(\"Not implemented yet!\");\n    // const exporter = new GLTFExporter();\n    // const DEFAULT_OPTIONS: GLTFExporterOptions = {\n    //   binary: true,\n    //   onlyVisible: false,\n    //   includeCustomExtensions: false\n    // };\n    // options = Object.assign({}, DEFAULT_OPTIONS, options);\n    // exporter.parse(input, (gltf: object) => {\n    //   if (options.binary) {\n    //     filename = ExportUtils.addExtention(filename, ExportUtils.EXTENSION_GLB);\n    //     const ab = gltf as ArrayBuffer;\n    //     ExportUtils.saveArrayBuffer(ab, filename);\n    //   } else {\n    //     filename = ExportUtils.addExtention(filename, ExportUtils.EXTENSION_GLTF);\n    //     ExportUtils.saveJson(gltf, filename);\n    //   }\n    // }, options);\n  }\n\n  /**\n   * Exports given object to obj file\n   */\n  public static exportToObj(input: THREE.Object3D, filename: string) {\n    if (!input || !filename) {\n      throw new Error(\"Invalid input or filename!\");\n    }\n    filename = ExportUtils.addExtention(filename, ExportUtils.EXTENSION_OBJ);\n    const exporter = new OBJExporter();\n    const result = exporter.parse(input);\n    ExportUtils.saveString(result, filename);\n  }\n\n  /**\n   * Exports given object to draco(drc) file\n   */\n  public static exportToDraco(input: THREE.Mesh, filename: string, options: DRACOExporterOptions = {}) {\n    if (!input || !filename) {\n      throw new Error(\"Invalid input or filename!\");\n    }\n    filename = ExportUtils.addExtention(filename, ExportUtils.EXTENSION_DRACO);\n    const exporter = new DRACOExporter();\n    const DEFAULT_OPTIONS: DRACOExporterOptions = {\n      encodeSpeed: 5\n    };\n    options = Object.assign({}, DEFAULT_OPTIONS, options);\n    const result = exporter.parse(input, options);\n    ExportUtils.saveArrayBuffer(result, filename);\n  }\n\n  /**\n   * Exports to threejs json\n   * @param input\n   * @param filename\n   */\n  public static exportToThreeJsJson(input: THREE.Object3D, filename: string) {\n    const json = input.toJSON();\n    if (!filename.toLowerCase().endsWith(ExportUtils.EXTENSION_JSON)) {\n      filename += ExportUtils.EXTENSION_JSON;\n    }\n    ExportUtils.saveJson(json, filename);\n  }\n\n  /**\n   * Saves blob as file\n   */\n  static save(blob: Blob, filename: string) {\n    let link = ExportUtils.downloadLink;\n    if (!link) {\n      link = document.createElement(\"a\");\n      link.style.display = \"none\";\n      document.body.appendChild(link);\n      ExportUtils.downloadLink = link;\n    }\n    link.href = URL.createObjectURL(blob);\n    link.download = filename;\n    link.click();\n  }\n\n  static saveArrayBuffer(buffer: ArrayBuffer, filename: string) {\n    ExportUtils.save(new Blob([buffer], { type: \"application/octet-stream\" }), filename);\n  }\n\n  static saveJson(json: Object, filename: string) {\n    ExportUtils.saveJsonString(JSON.stringify(json), filename);\n  }\n\n  static saveJsonString(jsonString: string, filename: string) {\n    ExportUtils.save(new Blob([jsonString], { type: \"application/json\" }), filename);\n  }\n\n  static saveString(str: string, filename: string) {\n    ExportUtils.save(new Blob([str], { type: \"text/csv\" }), filename);\n  }\n\n  /**\n   * Adds extention if missing\n   */\n  private static addExtention(filename: string, extension: string) {\n    if (!filename.toLowerCase().endsWith(extension.toLowerCase())) {\n      filename += extension;\n    }\n    return filename;\n  }\n}\n","import * as THREE from \"three\";\n\n/**\n * MaterialUtils class\n */\nexport class MaterialUtils {\n  /**\n   * Compares two materials\n   */\n  public static materialEquals(m1: THREE.Material, m2: THREE.Material): boolean {\n    if (m1 === m2) {\n      return true;\n    }\n    if (m1 instanceof THREE.Material && m2 instanceof THREE.Material) {\n      const result = m1.type === m2.type &&\n        m1.alphaTest === m2.alphaTest &&\n        m1.opacity === m2.opacity &&\n        m1.side === m2.side &&\n        m1.visible === m2.visible &&\n        m1.name === m2.name &&\n        m1.transparent === m2.transparent &&\n        this.colorEquals((m1 as any).color, (m2 as any).color) &&\n        this.colorEquals((m1 as any).emissive, (m2 as any).emissive) &&\n        (m1 as any).roughness === (m2 as any).roughness &&\n        (m1 as any).metalness === (m2 as any).metalness &&\n        (m1 as any).alphaMap === (m2 as any).alphaMap;\n      // there are more, but let's compare these for now!\n      return result;\n    }\n    return false;\n  }\n\n  /**\n   * Compares two materials, which could be material or material array\n   */\n  public static materialsEquals(m1: THREE.Material | THREE.Material[], m2: THREE.Material | THREE.Material[]): boolean {\n    if (m1 === m2) {\n      return true;\n    } else if (Array.isArray(m1) && Array.isArray(m2) && m1.length === m2.length) {\n      for (let i = 0; i < m1.length; ++i) {\n        if (!this.materialEquals(m1[i], m2[i])) {\n          return false;\n        }\n      }\n      return true;\n    } else if (m1 instanceof THREE.Material && m2 instanceof THREE.Material) {\n      return this.materialEquals(m1, m2);\n    }\n    return false;\n  }\n\n  /**\n   * Compares two colors\n   */\n  public static colorEquals(c1: THREE.Color, c2: THREE.Color): boolean {\n    if (c1 === c2) {\n      return true;\n    }\n    if (c1 instanceof THREE.Color && c2 instanceof THREE.Color) {\n      return c1.equals(c2);\n    }\n    return false;\n  }\n}\n","/**\n * To improve performance, we can set object.matrixAutoUpdate = false for static or rarely moving objects and\n * manually call object.updateMatrix() whenever their position/rotation/quaternion/scale are updated.\n * Add a constrant here, so developer can change it here easily for debugging.\n */\nexport const matrixAutoUpdate = false;\n","import * as THREE from \"three\";\nimport { matrixAutoUpdate } from \"./Constants\";\nimport Exploder from \"../exploder/Exploder\";\nimport { SceneUtils } from \"./SceneUtils\";\n\nexport interface MaterialInfo {\n  uuid: string;\n  material?: THREE.Material,\n  clonedMaterial?: THREE.Material,\n  opacity: number;\n  transparent: boolean;\n}\n\n/**\n * Util class for Threejs Object\n */\nexport class ObjectUtils {\n  /**\n   * Clears any styles, including transparency, wireframe mode, filter by floor, etc.\n   * @param object\n   */\n  public static resetObjectStyle(object: THREE.Object3D) {\n    this.revertWireframeMode(object);\n    // as we don't know the materialInfoList, there is side effect that the opacity will be set to 1.0\n    this.revertObjectOpacity(object, []);\n    // revert visible\n    this.revertVisibleForFloors(object);\n  }\n\n  /**\n   * Clears any styles, including transparency, wireframe mode, filter by floor, etc.\n   */\n  public static resetObjectStyleByUuid(scene: THREE.Scene, uuid: string) {\n    const object = this.getObjectByUuid(scene, uuid);\n    this.resetObjectStyle(object);\n  }\n\n  /**\n   * Sets an object's opacity\n   * @returns returns MaterialInfo list in case caller want to revert the opacity\n   */\n  public static setObjectOpacity(object: THREE.Object3D, opacity = 0.3, includeObjectUuids?: string[], excludeObjectUuids?: string[]): MaterialInfo[] {\n    // need to store the original materials' opacity, so that we can revert the transparent mode back\n    const materialInfoList: MaterialInfo[] = [];\n    const addOpacity = (mat: THREE.Material) => {\n      // only add it when there is no such a material in cache list yet\n      if (!materialInfoList.find(m => m.uuid === mat.uuid)) {\n        materialInfoList.push({ uuid: mat.uuid, opacity: mat.opacity, transparent: mat.transparent });\n        mat.opacity *= opacity; // shouldn't set to target opacity directly, because it may already has opacity\n        mat.transparent = true;\n      }\n    };\n    const addOpacityForClonedMaterial = (mat: THREE.Material): THREE.Material | undefined => {\n      // only add it when there is no such a material in cache list yet\n      const matInfo = materialInfoList.find(m => m.uuid === mat.uuid);\n      if (!matInfo) {\n        const clonedMaterial = mat.clone();\n        materialInfoList.push({ uuid: mat.uuid, opacity: mat.opacity, transparent: mat.transparent, material: mat, clonedMaterial });\n        clonedMaterial.opacity *= opacity; // shouldn't set to target opacity directly, because it may already has opacity\n        clonedMaterial.transparent = true;\n        return clonedMaterial;\n      }\n      return matInfo.clonedMaterial;\n    };\n    object.traverse(obj => {\n      if (excludeObjectUuids && excludeObjectUuids.indexOf(obj.uuid) !== -1) {\n        return; // excluded\n      }\n      if (includeObjectUuids && includeObjectUuids.indexOf(obj.uuid) === -1) {\n        return; // not in include list\n      }\n      // probably not only Mesh, but also some other object like InstancedMesh should be considered!\n      if (obj instanceof THREE.Mesh) {\n        const mesh = obj as THREE.Mesh;\n        // if there is any includeObjectUuids, we should copy materials rather than change them directly\n        if (includeObjectUuids) {\n          if (Array.isArray(mesh.material)) {\n            const materials: THREE.Material[] = [];\n            mesh.material.forEach(mat => {\n              const m = addOpacityForClonedMaterial(mat);\n              if (m) {\n                materials.push(m);\n              }\n            });\n            mesh.material = materials;\n          } else if (mesh.material) {\n            const m = addOpacityForClonedMaterial(mesh.material);\n            if (m) {\n              mesh.material = m;\n            }\n          }\n        } else {\n          if (Array.isArray(mesh.material)) {\n            mesh.material.forEach(mat => {\n              addOpacity(mat);\n            });\n          } else if (mesh.material) {\n            const mat = mesh.material;\n            addOpacity(mat);\n          }\n        }\n      }\n    });\n    return materialInfoList;\n  }\n\n  /**\n   * Reverts an object's opacity\n   * @param object the root object\n   */\n  public static revertObjectOpacity(object: THREE.Object3D, materialInfoList: MaterialInfo[], includeObjectUuids?: string[], excludeObjectUuids?: string[]) {\n    const revertOpacity = (mat: THREE.Material) => {\n      // revert opacity for this material\n      const material = materialInfoList.find(m => m.uuid === mat.uuid);\n      if (material) {\n        mat.opacity = material.opacity;\n        mat.transparent = material.transparent;\n      } else {\n        // if we cannot find the MaterialInfo, still need to set opacity to 1.0\n        mat.opacity = 1.0;\n      }\n    };\n    const tryGetOriginalMaterial = (mat: THREE.Material) => {\n      // check if the passed in mat is a cloned one\n      const matInfo = materialInfoList.find(m => m.clonedMaterial && m.clonedMaterial.uuid === mat.uuid);\n      if (matInfo) {\n        return matInfo.material;\n      }\n      return undefined;\n    };\n    object.traverse(mesh => {\n      if (excludeObjectUuids && excludeObjectUuids.indexOf(mesh.uuid) !== -1) {\n        return; // excluded\n      }\n      if (includeObjectUuids && includeObjectUuids.indexOf(mesh.uuid) === -1) {\n        return; // not in include list\n      }\n      // probably not only Mesh, but also some other object like InstancedMesh should be considered!\n      if (mesh instanceof THREE.Mesh) {\n        // if there is any includeObjectUuids, we should copy materials rather than change them directly\n        if (includeObjectUuids) {\n          if (Array.isArray(mesh.material)) {\n            const materials: THREE.Material[] = [];\n            mesh.material.forEach(mat => {\n              const m = tryGetOriginalMaterial(mat);\n              if (m) {\n                materials.push(m);\n              }\n            });\n            mesh.material = materials;\n          } else if (mesh.material) {\n            const m = tryGetOriginalMaterial(mesh.material);\n            if (m) {\n              mesh.material = m;\n            }\n          }\n        } else {\n          if (Array.isArray(mesh.material)) {\n            mesh.material.forEach(mat => {\n              revertOpacity(mat);\n            });\n          } else if (mesh.material) {\n            const mat = mesh.material;\n            revertOpacity(mat);\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Sets an object's opacity\n   */\n  public static setObjectOpacityByUuid(scene: THREE.Scene, uuid: string, opacity = 0.3, includeObjectUuids?: string[], excludeObjectUuids?: string[]): MaterialInfo[] {\n    const object = scene.getObjectByProperty(\"uuid\", uuid);\n    if (!object) {\n      throw new Error(`Failed to find object by uuid: ${uuid}`);\n    }\n    return ObjectUtils.setObjectOpacity(object, opacity, includeObjectUuids, excludeObjectUuids);\n  }\n\n  /**\n   * Reverts an object's opacity\n   */\n  public static revertObjectOpacityByUuid(scene: THREE.Scene, uuid: string, materialInfoList: MaterialInfo[], includeObjectUuids?: string[], excludeObjectUuids?: string[]) {\n    const object = scene.getObjectByProperty(\"uuid\", uuid);\n    if (!object) {\n      throw new Error(`Failed to find object by uuid: ${uuid}`);\n    }\n    ObjectUtils.revertObjectOpacity(object, materialInfoList, includeObjectUuids, excludeObjectUuids);\n  }\n\n  /**\n   * Explodes an object\n   */\n  public static explodeObject(scene: THREE.Scene, object: THREE.Object3D, explodeUp = false): Exploder {\n    const position = new THREE.Vector3();\n    SceneUtils.getPositionCenter(object, position);\n    const exploder = new Exploder(scene, object.id, position);\n    exploder.setOnlyExplodeUp(explodeUp);\n    exploder.explode();\n    return exploder;\n  }\n\n  /**\n   * Unexplodes an object\n   */\n  public static unexplodeObject(exploder: Exploder) {\n    if (!exploder) {\n      throw new Error(\"Invalid exploder!\");\n    }\n    exploder.unexplode();\n  }\n\n  /**\n   * Sets an object to be wireframe mode.\n   * In order to revert wireframe mode, we'll store original material in userData: {\n   *   materialForWireframe: THREE.Material\n   * }\n   * It seems wireframe mode have performance degradation, look at here for more info:\n   * https://stackoverflow.com/questions/45917611/shader-wireframe-of-an-object\n   */\n  public static setWireframeMode(object: THREE.Object3D) {\n    const wireframeMaterial = new THREE.MeshBasicMaterial({\n      color: 0xff5000,\n      wireframe: true,\n      transparent: true,\n      opacity: 0.8\n    });\n    object.traverseVisible(obj => {\n      if (obj instanceof THREE.Mesh) {\n        const mesh = obj as THREE.Mesh;\n        mesh.userData.materialForWireframe = mesh.material;\n        mesh.material = wireframeMaterial;\n      }\n    });\n  }\n\n  /**\n   * Sets an object to be wireframe mode.\n   */\n  public static setWireframeModeByUuid(scene: THREE.Scene, uuid: string) {\n    const object = scene.getObjectByProperty(\"uuid\", uuid);\n    if (!object) {\n      throw new Error(`Failed to find object by uuid: ${uuid}`);\n    }\n    ObjectUtils.setWireframeMode(object);\n  }\n\n  /**\n   * Reverts an object to be non-wireframe mode.\n   */\n  public static revertWireframeMode(object: THREE.Object3D) {\n    object.traverseVisible(obj => {\n      if (obj instanceof THREE.Mesh) {\n        // caller need to make sure there is userData.materialForWireframe\n        if (obj.userData.materialForWireframe) {\n          obj.material = obj.userData.materialForWireframe;\n          obj.userData.materialForWireframe = undefined; // clean it up\n        }\n      }\n    });\n  }\n\n  /**\n   * Reverts an object to be non-wireframe mode.\n   */\n  public static revertWireframeModeByUuid(scene: THREE.Scene, uuid: string) {\n    const object = scene.getObjectByProperty(\"uuid\", uuid);\n    if (!object) {\n      throw new Error(`Failed to find object by uuid: ${uuid}`);\n    }\n    ObjectUtils.revertWireframeMode(object);\n  }\n\n  /**\n   * Finds objects by name, id, userData, etc.\n   * @param scene\n   * @param targetUuids target object uuids to find from\n   * @param searchText search text\n   * @param findFirst only find the first\n   */\n  private static findInner(scene: THREE.Scene, searchText: string, targetUuids: string[] = [], findFirst = false): THREE.Object3D[] {\n    const val = searchText.toLowerCase();\n    const results: THREE.Object3D[] = [];\n\n    const matchStr = (str: string) => {\n      return str.toLowerCase().indexOf(val) !== -1;\n    };\n    const matchNum = (num: number) => {\n      return num.toString().indexOf(val) !== -1;\n    };\n    const matchUserData = (userData: any) => {\n      if (userData.name) {\n        if (userData.name.toLowerCase().indexOf(val) !== -1) {\n          return true;\n        }\n      }\n      if (userData.gltfExtensions) {\n        const ext = userData.gltfExtensions;\n        const id = (ext.objectId && ext.objectId.Value) || (ext.elementId && ext.elementId.Value);\n        if (id && id.toLowerCase().indexOf(val) !== -1) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    if (targetUuids.length > 0) {\n      for (let i = 0; i < targetUuids.length; ++i) {\n        const uuid = targetUuids[i];\n        const object = scene.getObjectByProperty(\"uuid\", uuid);\n        if (object) {\n          object.traverse(obj => {\n            if (matchStr(obj.name) || matchNum(obj.id) || matchUserData(obj.userData)) {\n              results.push(obj);\n            }\n          });\n        }\n        if (findFirst && results.length > 0) {\n          return [results[0]];\n        }\n      }\n    } else {\n      // if no target uuid is passed in, find it from whole scene\n      scene.traverse(obj => {\n        if (matchStr(obj.name) || matchNum(obj.id) || matchUserData(obj.userData)) {\n          results.push(obj);\n        }\n      });\n      if (findFirst && results.length > 0) {\n        return [results[0]];\n      }\n    }\n    return results;\n  }\n\n  /**\n   * Finds objects by given string\n   */\n  public static find(scene: THREE.Scene, searchText: string, targetUuids: string[] = [], findFirst = false): THREE.Object3D[] {\n    return this.findInner(scene, searchText, targetUuids);\n  }\n\n  /**\n   * Finds the first object by given string\n   */\n  public static findFirst(scene: THREE.Scene, searchText: string, targetUuids: string[] = [], findFirst = false): THREE.Object3D | undefined {\n    const results = this.findInner(scene, searchText, targetUuids, true);\n    if (results.length > 0) {\n      return results[0];\n    }\n    return undefined;\n  }\n\n  /**\n   * Checks if given string contains floor\n   * @param str string to match, e.g. '5F(xxx)'\n   */\n  private static getFloorsFromString(str: string): number[] {\n    const results: number[] = [];\n    // Regular text to find if there is floor in a string.\n    // It matches such cases: 5F, 15F, -1F, a5F, a5F(xxx), 10.5F\n    // It doesn't match cases: 5f, 5Fa, 5F_, 5F-, 10.3F\n    const reg = new RegExp(/(?:-?(?:\\d+(?:\\.5)?)F)(?=\\W|$)/, \"g\"); // case sensitive\n    const arr = reg.exec(str);\n    if (arr && arr.length > 0) {\n      arr.forEach(r => {\n        if (r) {\n          const f = r.replace(\"F\", \"\");\n          const num = Number(f);\n          if (num) {\n            results.push(num);\n          } else {\n            console.log(`[OU] invalid floor: ${r}`); // TODO: remove this later\n          }\n        }\n      });\n    }\n    return results;\n  }\n\n  /**\n   * Matches if a string contains floor string\n   * @param str string to match, e.g. '5F(xxx)'\n   * @param floor '5F', etc.\n   */\n  private static matchFloor(str: string, floor: number): boolean {\n    const results = this.getFloorsFromString(str);\n    const i = results.findIndex(r => r === floor);\n    return i !== -1;\n  }\n\n  /**\n   * Matches if a string contains one of floor string in floors\n   * @param str string to match, e.g. '5F(xxx)'\n   * @param floor '5F', etc.\n   */\n  private static matchFloors(str: string, floors: number[]): boolean {\n    const results = this.getFloorsFromString(str);\n    const i = results.findIndex(r => {\n      const j = floors.findIndex(f => f === r);\n      return j !== -1;\n    });\n    return i !== -1;\n  }\n\n  /**\n   * Distincts/find floors from models, by checking children object.name\n   */\n  public static distinctFloors(scene: THREE.Scene, modelUuid: string[]): string[] {\n    const floors: { [floor: number]: boolean } = [];\n\n    const match = (name: string) => {\n      const results = this.getFloorsFromString(name);\n      results.forEach(f => {\n        floors[f] = true;\n      });\n    };\n\n    modelUuid.forEach(uuid => {\n      const object = scene.getObjectByProperty(\"uuid\", uuid);\n      if (object) {\n        object.traverse(obj => {\n          match(obj.name);\n          if (obj.userData.gltfExtensions) {\n            const ext = obj.userData.gltfExtensions;\n            if (ext.level && ext.level.Value) {\n              match(ext.level.Value);\n            }\n          }\n        });\n      }\n    });\n\n    return Object.keys(floors).sort();\n  }\n\n  /**\n   * Sets object's visible to true if its name, etc. match one of given floor.\n   * This method won't affect other objects that don't match.\n   */\n  public static traverseObjectByFloors(scene: THREE.Scene, modelUuid: string, floors: number[], matchCallback?: (object: THREE.Object3D) => void, unmatchCallback?: (object: THREE.Object3D) => void) {\n    const object = scene.getObjectByProperty(\"uuid\", modelUuid);\n    if (!object) {\n      return [];\n    }\n    // const uuids: string[] = []\n    object.traverse(obj => {\n      let isMatch = this.matchFloors(obj.name, floors);\n      if (!isMatch) {\n        if (obj.userData && obj.userData.gltfExtensions) {\n          const ext = obj.userData.gltfExtensions;\n          if (ext.level && ext.level.Value) {\n            isMatch = this.matchFloors(ext.level.Value, floors);\n          }\n        }\n      }\n      if (isMatch && matchCallback) {\n        matchCallback(obj);\n      }\n      if (!isMatch && unmatchCallback) {\n        unmatchCallback(obj);\n      }\n    });\n  }\n\n  /**\n   * Sets object belong to given floors to be visible\n   * @param modelUuid root or parent object uuid\n   * @param makeUnmatchedInvisible if it should make unmatched object invisible\n   */\n  public static setVisibleForFloors(scene: THREE.Scene, modelUuid: string, floors: number[], makeUnmatchedInvisible = true) {\n    this.traverseObjectByFloors(scene, modelUuid, floors, (object: THREE.Object3D) => {\n      let obj: THREE.Object3D | undefined = object;\n      while (obj) {\n        obj.visible = true;\n        obj = obj.parent || undefined;\n      }\n    }, (object: THREE.Object3D) => {\n      if (makeUnmatchedInvisible) {\n        object.visible = false;\n      }\n    });\n  }\n\n  public static revertVisibleForFloors(object: THREE.Object3D) {\n    object.traverse(obj => {\n      obj.visible = true;\n    });\n  }\n\n  public static revertVisibleForFloorsByUuid(scene: THREE.Scene, uuid: string) {\n    const object = this.getObjectByUuid(scene, uuid);\n    this.revertVisibleForFloors(object);\n  }\n\n  private static getObjectByUuid(scene: THREE.Scene, uuid: string) {\n    const object = scene.getObjectByProperty(\"uuid\", uuid);\n    if (!object) {\n      throw new Error(`Failed to find object by uuid: ${uuid}`);\n    }\n    return object;\n  }\n\n  /**\n   * Outline default material\n   */\n  private static OUTLINE_MATERIAL = new THREE.LineBasicMaterial({ name: \"outline\", color: 0x000000, transparent: true, opacity: 0.2 });\n\n  /**\n   * Creates outlines for given object and children\n   * @param options 'replaceOriginalObject' must be used carefully, it removes original objects and cannot get back for now.\n   *   It can be used in case for really large models that has a bad performace.\n   */\n  public static addOutlines(\n    object: THREE.Object3D,\n    material = this.OUTLINE_MATERIAL.clone(),\n    options = { visibleOnly: true, meshOnly: true, replaceOriginalObject: false }): THREE.LineSegments[] {\n    if (!object) {\n      return [];\n    }\n    // if not a parent object and invisible and not a mesh, then ignore\n    if ((object.children.length === 0) &&\n      ((options.visibleOnly && !object.visible) || (options.meshOnly && !(object instanceof THREE.Mesh)))) {\n      return [];\n    }\n    const obj = object as any;\n    const length = obj.children.length;\n    if (length > 0) {\n      for (let i = length - 1; i >= 0; --i) { // need to iterate backward\n        const o = obj.children[i];\n        const lines = this.addOutlines(o, material, options);\n        lines.forEach(line => line.applyMatrix4(obj.matrixWorld)); // should use matrixWorld rather than matrix\n      }\n    }\n    if (!obj.geometry) {\n      return [];\n    }\n\n    const createOutline = (geometry: THREE.BufferGeometry, matrix: THREE.Matrix4): THREE.LineSegments => {\n      // edges within given thresholdAngle will be ignored\n      const geom = new THREE.EdgesGeometry(geometry, 5); // create EdgesGeometry from original geometry\n      geom.applyMatrix4(matrix);\n      // create outline and add it as a child\n      const line = new THREE.LineSegments(geom, material);\n      // line.position.set(obj.position.x, obj.position.y, obj.position.z) // need to set position in some case!\n      // use userData: { selectable: false } to indicate an object is not selectable\n      line.userData.selectable = false;\n      line.userData.isOutline = true;\n      line.matrixAutoUpdate = matrixAutoUpdate; // for better performance\n      line.updateMatrix(); // need to call it since object.matrixAutoUpdate is false\n      return line;\n    };\n\n    const lines: THREE.LineSegments[] = [];\n    if (obj instanceof THREE.InstancedMesh) {\n      for (let i = 0; i < obj.count; ++i) {\n        const m = new THREE.Matrix4();\n        obj.getMatrixAt(i, m);\n        const line = createOutline(obj.geometry, m);\n        // line.position.set(obj.position.x, obj.position.y, obj.position.z)\n        if (options.replaceOriginalObject && obj.parent) {\n          const parent = obj.parent;\n          parent.children.push(line);\n        } else {\n          obj.children.push(line);\n        }\n        lines.push(line);\n      }\n    } else {\n      // create outline and add it as a child\n      const line = createOutline(obj.geometry, obj.matrix);\n      // line.position.set(obj.position.x, obj.position.y, obj.position.z)\n      if (options.replaceOriginalObject && obj.parent) {\n        // In this case, we'll remove the object. Which means, user cann't get it back!\n        // parent.remove(obj)\n        obj.removeFromParent(); // removeFromParent is added from r129\n        obj.geometry.dispose(); // TODO: consider to dispose unused materials too\n        const parent = obj.parent;\n        parent.children.push(line);\n      } else {\n        obj.children.push(line);\n      }\n      lines.push(line);\n    }\n    return lines;\n  }\n\n  /**\n   * Recursively removes outlines for given object and children\n   */\n  public static removeOutlines(object: THREE.Object3D) {\n    if (!object || !Array.isArray(object.children)) {\n      return;\n    }\n    for (let i = object.children.length - 1; i >= 0; --i) { // iterate from back to front\n      const child = object.children[i];\n      if (child.children.length > 0) {\n        this.removeOutlines(child);\n      }\n      if (child.userData.isOutline) {\n        object.remove(child);\n      }\n    }\n  }\n\n  /**\n   * Recursively checks if an object or children has outline already\n   */\n  public static hasOutline(object: THREE.Object3D): boolean {\n    let result = false;\n    for (let i = 0; i < object.children.length; ++i) {\n      const obj = object.children[i];\n      if (obj.userData.isOutline) {\n        result = true;\n        break;\n      }\n      if (obj.children.length > 0) {\n        result = this.hasOutline(obj);\n        if (result) {\n          break;\n        }\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Sets outline visiblility for given object and children\n   */\n  public static setOutlinesVisibility(object: THREE.Object3D, visible: boolean) {\n    object.traverse(obj => {\n      if (obj.userData.isOutline) {\n        obj.visible = visible;\n      }\n    });\n  }\n}\n","import * as THREE from \"three\";\n\n/**\n * Prefiltered, Mipmapped Radiance Environment Map (PMREM) util class.\n */\nexport class PmremUtils {\n  /**\n   * Creates default environment texture\n   */\n  public static async createEnvTextureFromDataArray(\n    pmremGenerator: THREE.PMREMGenerator | undefined,\n    data: Uint16Array = this.HDR_CITY_STREET_64x32,\n    width = 64,\n    height = 32\n  ): Promise<THREE.Texture> {\n    if (pmremGenerator) {\n      const texture = new THREE.DataTexture(data, width, height);\n      texture.flipY = true;\n      texture.magFilter = THREE.LinearFilter;\n      texture.minFilter = THREE.LinearFilter;\n      texture.type = THREE.HalfFloatType;\n      texture.version = 1;\n\n      const envMap = pmremGenerator.fromEquirectangular(texture).texture;\n      pmremGenerator.dispose();\n      return Promise.resolve(envMap);\n    }\n    return Promise.reject(new Error(\"Invalid pmremGenerator!\"));\n  }\n\n  // eslint-disable-next-line\n  private static HDR_CITY_STREET_64x32 = Uint16Array.from([11910,12340,1279715360,11926,12348,12806,15360,11958,12364,12814,15360,11974,12380,1283015360,11958,12364,12822,15360,11926,12348,12797,15360,11878,12324,1277315360,11830,12308,12749,15360,11798,12292,12733,15360,11782,12279,1272515360,11765,12263,12709,15360,11749,12247,12701,15360,11733,12231,1270115360,11701,12215,12693,15360,11685,12199,12685,15360,11685,12199,1268515360,11701,12215,12693,15360,11717,12231,12701,15360,11733,12247,1270915360,11749,12263,12717,15360,11749,12279,12717,15360,11765,12279,1272515360,11765,12279,12725,15360,11765,12292,12725,15360,11798,12300,1273315360,11830,12316,12749,15360,11846,12324,12757,15360,11894,12340,1278115360,11926,12356,12797,15360,11942,12356,12797,15360,11926,12348,1278915360,11926,12348,12789,15360,11942,12356,12797,15360,11942,12356,1279715360,11942,12348,12806,15360,11942,12356,12806,15360,11942,12356,1281415360,11958,12372,12830,15360,11974,12372,12830,15360,11974,12372,1283815360,11990,12388,12854,15360,12055,12420,12886,15360,12119,12452,1291815360,12167,12476,12950,15360,12231,12500,12982,15360,12263,12516,1299815360,12231,12500,12974,15360,12199,12484,12958,15360,12199,12484,1295815360,12199,12492,12966,15360,12247,12508,12982,15360,12247,12508,1299015360,12231,12500,12982,15360,12199,12484,12966,15360,12167,12468,1294215360,12119,12444,12918,15360,12087,12436,12902,15360,12055,12420,1288615360,12055,12412,12878,15360,12039,12412,12878,15360,12022,12396,1286215360,12006,12388,12846,15360,11958,12364,12830,15360,11910,12340,1280615360,12119,12508,13103,15360,12087,12484,13071,15360,12055,12468,1304615360,12006,12436,13006,15360,11926,12396,12958,15360,11878,12364,1292615360,11846,12348,12894,15360,11782,12308,12854,15360,11749,12292,1283015360,11717,12263,12814,15360,11685,12247,12806,15360,11669,12215,1278915360,11685,12231,12789,15360,11701,12247,12797,15360,11701,12247,1280615360,11717,12263,12814,15360,11749,12292,12822,15360,11782,12308,1283815360,11798,12316,12846,15360,11814,12332,12862,15360,11846,12340,1287015360,11862,12348,12878,15360,11846,12340,12870,15360,11846,12340,1286215360,11878,12356,12886,15360,11910,12372,12910,15360,11942,12396,1293415360,11958,12412,12958,15360,12039,12452,12998,15360,12071,12468,1302215360,12039,12452,12998,15360,12039,12452,12998,15360,12006,12444,1300615360,11974,12436,12998,15360,11942,12412,12982,15360,11926,12396,1297415360,11926,12404,12974,15360,11958,12420,12998,15360,12006,12452,1303815360,12055,12476,13071,15360,12039,12476,13079,15360,12087,12508,1312715360,12247,12597,13231,15360,12388,12693,13332,15360,12420,12741,1336415360,12436,12757,13372,15360,12468,12773,13380,15360,12500,12806,1338815360,12516,12822,13404,15360,12629,12934,13452,15360,12741,13046,1350815360,12806,13095,13532,15360,12757,13046,13516,15360,12645,12950,1346015360,12565,12870,13428,15360,12532,12838,13412,15360,12549,12854,1341215360,12516,12838,13396,15360,12452,12757,13356,15360,12420,12725,1334015360,12404,12709,13332,15360,12372,12677,13316,15360,12279,12589,1320715360,12135,12516,13119,15360,12388,12709,13348,15360,12247,12581,1322315360,12055,12476,13087,15360,11910,12388,12982,15360,11733,12308,1288615360,11669,12247,12846,15360,11621,12199,12814,15360,11541,12103,1276515360,11492,12055,12733,15360,11508,12055,12733,15360,11476,12022,1271715360,11525,12055,12725,15360,11589,12135,12757,15360,11669,12199,1276515360,11765,12292,12814,15360,11862,12348,12886,15360,11910,12372,1291015360,12006,12420,12966,15360,12071,12452,12998,15360,12119,12476,1302215360,12167,12492,13046,15360,12183,12500,13063,15360,12199,12524,1307915360,12308,12589,13151,15360,12300,12581,13151,15360,12167,12516,1308715360,12087,12468,13030,15360,12022,12444,13014,15360,11990,12420,1299015360,11974,12420,12990,15360,11974,12420,12990,15360,11990,12436,1301415360,11990,12444,13030,15360,12103,12500,13103,15360,12087,12508,1311115360,12039,12484,13103,15360,12039,12476,13103,15360,11942,12436,1305415360,11974,12452,13087,15360,12039,12492,13135,15360,12103,12532,1319915360,12183,12581,13263,15360,12308,12661,13340,15360,12484,12822,1343615360,12613,12918,13484,15360,12725,13046,13540,15360,13046,13332,1367715360,13143,13380,13717,15360,13223,13420,13741,15360,13396,13540,1386215360,13436,13589,13902,15360,13484,13629,13942,15360,13468,13621,1393415360,13412,13564,13878,15360,13372,13524,13846,15360,13287,13452,1378115360,13223,13428,13749,15360,13340,13492,13805,15360,13239,13428,1374915360,13095,13364,13685,15360,12918,13223,13597,15360,12822,13111,1355615360,12613,12934,13468,15360,12532,12854,13428,15360,12565,12870,1344415360,12468,12789,13396,15360,12372,12693,13340,15360,12087,12492,1311115360,11846,12364,12958,15360,11717,12300,12878,15360,11557,12135,1278115360,11476,12055,12741,15360,11460,12022,12725,15360,11476,12022,1272515360,11476,12022,12709,15360,11476,11958,12605,15360,11364,11733,1233215360,11111,11412,11661,15360,11223,11476,11773,15360,11388,11669,1209515360,11765,12119,12492,15360,12388,12613,13079,15360,12661,12902,1335615360,12998,13255,13564,15360,13372,13508,13797,15360,13412,13548,1384615360,13287,13436,13725,15360,13271,13428,13709,15360,13287,13428,1371715360,13014,13287,13597,15360,12709,12998,13460,15360,12452,12741,1333215360,12364,12653,13271,15360,12404,12693,13316,15360,12420,12709,1331615360,12420,12709,13332,15360,12263,12589,13231,15360,12332,12661,1331215360,12300,12629,13295,15360,12263,12605,13287,15360,12231,12597,1327915360,12247,12613,13303,15360,12231,12597,13295,15360,12231,12605,1331215360,12199,12597,13324,15360,12231,12613,13340,15360,12516,12870,1346815360,12725,13063,13564,15360,12741,13079,13573,15360,12854,13175,1361315360,12902,13223,13629,15360,13046,13348,13693,15360,13356,13516,1384615360,13605,13765,14078,15360,13717,13870,14191,15360,13765,13918,1425515360,13765,13910,14247,15360,13701,13854,14191,15360,13573,13733,1407015360,13508,13677,14006,15360,13380,13548,13886,15360,13111,13380,1374115360,13063,13348,13709,15360,12886,13207,13629,15360,12725,13046,1354815360,12645,12966,13508,15360,12677,12982,13508,15360,12629,12950,1349215360,12452,12789,13412,15360,12324,12661,13332,15360,12356,12677,1334015360,12388,12693,13348,15360,12279,12597,13247,15360,11894,12396,1299815360,11637,12231,12846,15360,11573,12135,12789,15360,11589,12151,1279715360,11621,12167,12797,15360,11637,12119,12677,15360,11079,11404,1169315360,10517,10701,10653,15360,10252,10348,10007,15360,9902,9999,9428,153609846,9886,9047,15360,10135,10260,9685,15360,10412,10533,10412,15360,1126811436,11549,15360,12364,12605,13087,15360,12444,12709,13255,15360,1254912822,13348,15360,12613,12886,13396,15360,12597,12886,13412,15360,1258112870,13404,15360,12661,12950,13460,15360,12725,13014,13492,15360,1307913332,13645,15360,12757,13046,13500,15360,12677,12982,13476,15360,1285413143,13556,15360,12693,12982,13492,15360,12581,12886,13452,15360,1270913030,13508,15360,12372,12709,13364,15360,12324,12661,13348,15360,1229212645,13340,15360,12292,12645,13348,15360,12468,12806,13436,15360,1253212854,13460,15360,12500,12854,13468,15360,12500,12854,13484,15360,1272513063,13589,15360,12982,13324,13701,15360,13111,13388,13741,15360,1301413340,13709,15360,13014,13332,13717,15360,13287,13476,13862,15360,1343613621,13974,15360,13532,13717,14095,15360,13725,13902,14295,15360,1394214103,14420,15360,13974,14135,14436,15360,13862,14022,14388,15360,1372513894,14295,15360,13789,13958,14336,15360,13830,13990,14348,15360,1337213548,13942,15360,13014,13332,13733,15360,12886,13239,13661,15360,1285413207,13637,15360,12757,13095,13589,15360,12757,13079,13573,15360,1264512982,13516,15360,12629,12966,13532,15360,12549,12870,13468,15360,1235612693,13372,15360,12151,12549,13231,15360,12215,12573,13247,15360,1219912565,13231,15360,12071,12492,13135,15360,12055,12468,13087,15360,1187812372,12958,15360,11685,12199,12781,15360,10774,11159,11412,15360,9533,96218870,15360,9308,9340,8071,15360,9276,9300,7878,15360,9324,9332,8420,153609191,9216,7991,15360,8950,8983,7766,15360,9493,9525,8677,15360,10252,1033210007,15360,10661,10846,10894,15360,10701,10926,10998,15360,10950,1127611428,15360,11364,11637,12063,15360,11958,12388,12926,15360,12183,1254013175,15360,12340,12645,13295,15360,12420,12693,13316,15360,12757,1303013460,15360,13046,13324,13645,15360,13095,13348,13677,15360,13303,1346013781,15360,13207,13404,13741,15360,13127,13372,13717,15360,13372,1352413862,15360,12693,13030,13540,15360,12725,13046,13548,15360,12468,1282213436,15360,12263,12629,13348,15360,12436,12773,13428,15360,12693,1299813524,15360,12725,13046,13564,15360,12645,12982,13556,15360,12613,1296613556,15360,12886,13255,13685,15360,13436,13629,14022,15360,13637,1381314231,15360,13621,13789,14215,15360,13878,14038,14412,15360,14022,1418314468,15360,13926,14119,14452,15360,14054,14231,14508,15360,14135,1431114540,15360,14348,14436,14669,15360,14460,14540,14749,15360,14404,1448414709,15360,14420,14500,14709,15360,14653,14717,14894,15360,14119,1427914508,15360,13484,13669,14078,15360,13063,13380,13773,15360,12677,1307913613,15360,12484,12886,13516,15360,12436,12822,13476,15360,12468,1283813476,15360,12039,12532,13316,15360,12231,12613,13340,15360,12468,1278913436,15360,12388,12725,13396,15360,12135,12557,13287,15360,12151,1255713271,15360,12039,12484,13175,15360,11878,12396,13038,15360,11814,1234812950,15360,11492,11894,12460,15360,9950,10103,9621,15360,8830,8838,722015360,8565,8533,7015,15360,8541,8501,6919,15360,8332,8300,6822,15360,84128372,7220,15360,8710,8701,7686,15360,9372,9404,8549,15360,9533,9621,907915360,9268,9292,8196,15360,9452,9460,8167,15360,9533,9581,8533,15360,97429870,9316,15360,11460,11814,12348,15360,11942,12388,12902,15360,11749,1216712573,15360,11300,11492,11621,15360,11974,12332,12669,15360,12436,1274113364,15360,12597,12886,13460,15360,12966,13271,13653,15360,12998,1330313669,15360,13476,13629,13974,15360,13733,13886,14239,15360,13364,1352413894,15360,13063,13356,13725,15360,12982,13287,13669,15360,12484,1280613444,15360,12565,12902,13500,15360,12950,13287,13693,15360,12934,1327113677,15360,12693,13046,13589,15360,12661,13030,13605,15360,12870,1327113717,15360,13348,13548,13966,15360,13621,13813,14271,15360,13797,1397414412,15360,13942,14119,14484,15360,14263,14388,14629,15360,14420,1450814733,15360,14460,14548,14773,15360,14982,15046,15231,15360,15564,1558015669,15360,15974,15982,16078,15360,15805,15821,15926,15360,15460,1547615572,15360,15436,15460,15556,15360,14781,14862,15127,15360,13621,1381314348,15360,12789,13207,13757,15360,12452,12886,13581,15360,12263,1270913476,15360,12039,12597,13396,15360,11942,12516,13340,15360,11846,1246813271,15360,11733,12380,13127,15360,11926,12460,13191,15360,12055,1252413263,15360,11878,12428,13159,15360,11605,12231,12886,15360,11412,1199012709,15360,11508,12103,12789,15360,11637,12231,12854,15360,10661,1107911380,15360,9541,9685,9252,15360,8573,8605,7493,15360,8404,8388,7348,153608830,8822,8212,15360,9308,9324,9095,15360,9324,9364,9220,15360,9047,91198653,15360,9023,9055,8404,15360,9055,9063,8167,15360,8870,8846,7541,153608862,8806,7380,15360,8950,8910,7252,15360,9268,9284,7557,15360,10316,1046810380,15360,11239,11476,11677,15360,10653,10942,11047,15360,9661,9814,932415360,10693,10958,11047,15360,11396,11653,11990,15360,11878,12292,1259715360,12468,12789,13396,15360,12773,13095,13589,15360,13364,13516,1389415360,13894,14054,14380,15360,13717,13870,14247,15360,13420,13589,1395815360,13255,13452,13830,15360,12806,13143,13637,15360,13159,13412,1383015360,13629,13813,14215,15360,13303,13500,13910,15360,13079,13396,1380515360,13191,13452,13878,15360,13412,13621,14062,15360,14103,14279,1454015360,14773,14854,15086,15360,14717,14805,15046,15360,14295,14420,1468515360,14380,14476,14733,15360,14572,14661,14902,15360,15596,15612,1570115360,16351,16335,16384,15360,16484,16476,16492,15360,16516,16500,1651615360,16388,16375,16404,15360,16054,16054,16118,15360,15918,15926,1600615360,15556,15572,15669,15360,14653,14725,14982,15360,13637,13838,1431915360,13412,13613,14054,15360,12870,13287,13789,15360,12404,12838,1352415360,12199,12677,13428,15360,12324,12741,13452,15360,11942,12516,1332415360,11765,12380,13111,15360,11428,11942,12589,15360,10886,11388,1190215360,10372,10717,11006,15360,9846,10240,10191,15360,10252,10549,1076615360,10613,11079,11484,15360,10581,10998,11388,15360,9613,9846,9629,153608525,8557,7541,15360,8605,8613,7814,15360,9292,9324,9079,15360,9388,93969220,15360,10709,10846,11031,15360,9894,9966,9854,15360,9252,9236,877415360,8822,8790,8183,15360,8292,8260,6533,15360,8111,8007,6324,15360,82288183,6405,15360,8501,8501,6565,15360,8814,8878,7172,15360,9260,9364,824415360,8902,9095,8252,15360,9444,9581,9047,15360,9509,9637,8790,15360,94779613,8806,15360,10725,11063,11079,15360,11508,11910,12356,15360,12484,1278913380,15360,12838,13159,13629,15360,13428,13589,13974,15360,14135,1427914484,15360,13942,14087,14396,15360,13677,13846,14247,15360,13436,1361314006,15360,13597,13781,14183,15360,14183,14340,14540,15360,14022,1421514484,15360,13637,13838,14271,15360,14038,14231,14508,15360,14380,1447614701,15360,14757,14854,15078,15360,15030,15111,15343,15360,15420,1545215556,15360,15476,15500,15588,15360,15351,15388,15492,15360,15572,1559615677,15360,15653,15669,15717,15360,15821,15821,15853,15360,15845,1584515869,15360,15998,15990,16022,15360,15926,15926,15974,15360,15653,1566915733,15360,15661,15677,15749,15360,15612,15629,15717,15360,15271,1533515452,15360,14484,14572,14821,15360,14215,14372,14588,15360,13468,1367714167,15360,12773,13175,13653,15360,12725,13143,13637,15360,12452,1288613532,15360,12263,12709,13444,15360,11894,12436,13103,15360,10252,1053310661,15360,8613,8693,7445,15360,8742,8782,7047,15360,8420,8412,6565,153607926,7910,6405,15360,8806,8854,7300,15360,9127,9228,8007,15360,8685,87507300,15360,8348,8356,6758,15360,8380,8340,7300,15360,8991,8918,8388,153609838,9790,9549,15360,10055,10127,10047,15360,9501,9493,9268,15360,9332,92928902,15360,9079,9007,8509,15360,8300,8260,7252,15360,8693,8701,8196,153608228,8212,7111,15360,8469,8501,7380,15360,8420,8501,6919,15360,8549,86456983,15360,8581,8661,6951,15360,9268,9332,7718,15360,9063,9207,7445,153609284,9380,7718,15360,9412,9557,8693,15360,10276,10517,10103,15360,1183012279,12589,15360,12725,13079,13589,15360,13127,13396,13773,15360,1408714231,14460,15360,13974,14119,14412,15360,13677,13854,14247,15360,1411914279,14500,15360,13990,14167,14460,15360,14364,14452,14653,15360,1456414653,14837,15360,14404,14492,14701,15360,14870,14942,15135,15360,1538815420,15500,15360,15207,15287,15420,15360,14797,14894,15127,15360,1527115335,15452,15360,15926,15942,15990,15360,16207,16207,16231,15360,1611816110,16126,15360,15741,15733,15741,15360,16239,16207,16175,15360,1644416460,16484,15360,16046,16022,16006,15360,15942,15950,15966,15360,1577315789,15829,15360,15789,15797,15845,15360,15693,15709,15757,15360,1554015564,15653,15360,15303,15364,15468,15360,14733,14813,15014,15360,1386214054,14420,15360,12838,13255,13725,15360,12789,13207,13693,15360,1246812918,13564,15360,12404,12838,13500,15360,11428,11862,12412,15360,9143,92768388,15360,8541,8533,6726,15360,8444,8428,6629,15360,8212,8183,6597,153608388,8380,7015,15360,8726,8710,6758,15360,8332,8316,6437,15360,8453,84286565,15360,8597,8605,7814,15360,8701,8661,8151,15360,9452,9396,9015,1536010581,10557,10380,15360,10950,10974,10846,15360,10380,10356,10252,1536010749,10741,10685,15360,9870,9854,9693,15360,9023,9039,8669,15360,8790,88548509,15360,8196,8167,7332,15360,7975,8015,7079,15360,8589,8750,7445,153609095,9260,7111,15360,8983,9135,7188,15360,8902,8991,7252,15360,8862,90077015,15360,8967,9111,7300,15360,8742,8878,7493,15360,9557,9999,9549,1536011292,11613,11862,15360,12135,12468,12982,15360,12215,12460,12878,1536013356,13468,13685,15360,13821,13934,14199,15360,13548,13701,14022,1536014103,14263,14468,15360,14279,14388,14572,15360,14364,14452,14645,1536014709,14789,14950,15360,15143,15199,15327,15360,15388,15412,15468,1536015476,15500,15548,15360,15420,15444,15492,15360,15436,15460,15516,1536015612,15637,15685,15360,16086,16086,16110,15360,16396,16388,16396,1536016094,16094,16110,15360,15869,15861,15861,15360,16135,16110,16070,1536016428,16420,16404,15360,15588,15556,15524,15360,15484,15500,15508,1536015335,15364,15396,15360,15677,15685,15717,15360,15604,15621,15661,1536015420,15444,15500,15360,15303,15372,15452,15360,14717,14805,14998,1536014412,14508,14701,15360,13548,13765,14199,15360,13271,13508,13942,1536012661,13159,13709,15360,12468,12854,13436,15360,10260,10484,10509,153608613,8669,6951,15360,8151,8143,6469,15360,8653,8629,7814,15360,8469,84447541,15360,8718,8693,7814,15360,8372,8332,6597,15360,8356,8308,7111,153609047,8983,8396,15360,8822,8798,8308,15360,9372,9348,8967,15360,10364,1036410183,15360,10268,10260,9894,15360,10541,10533,10468,15360,10380,1036410276,15360,10621,10613,10549,15360,9910,9942,9758,15360,8364,8380,762115360,8581,8637,8135,15360,8252,8300,7573,15360,8119,8175,7300,15360,83728453,7493,15360,8420,8501,6983,15360,8742,8822,7573,15360,8782,8854,815115360,8581,8661,7079,15360,9220,9268,8340,15360,9549,9645,8854,15360,1171711950,12127,15360,12468,12741,13207,15360,12709,12966,13388,15360,1230012508,12886,15360,12492,12709,13063,15360,13239,13372,13548,15360,1247612597,12814,15360,13581,13685,13878,15360,14476,14548,14685,15360,1455614629,14773,15360,14765,14829,14966,15360,15159,15207,15303,15360,1537215396,15444,15360,15516,15532,15572,15360,15653,15661,15693,15360,1582915837,15853,15360,16022,16014,16022,15360,16311,16295,16279,15360,1634316319,16303,15360,16412,16388,16359,15360,15813,15797,15773,15360,1306313151,13183,15360,11484,11701,11798,15360,12300,12412,12468,15360,1461314637,14653,15360,11974,12215,12316,15360,14135,14215,14303,15360,1560415629,15677,15360,15524,15548,15596,15360,15351,15380,15428,15360,1479714894,15054,15360,13990,14231,14500,15360,13492,13709,14070,15360,1288613316,13701,15360,12613,13207,13749,15360,11525,11974,12428,15360,9284,94128629,15360,8597,8653,6951,15360,7806,7790,6292,15360,7589,7541,6437,153607485,7437,6597,15360,7453,7404,6180,15360,7774,7686,6565,15360,8300,82607332,15360,9918,9942,9862,15360,10348,10372,10231,15360,9725,9709,922815360,10613,10621,10509,15360,10199,10175,9838,15360,10380,10388,1034015360,11207,11255,11284,15360,10661,10717,10725,15360,10103,10135,995015360,8444,8436,7669,15360,8469,8501,7445,15360,8950,9111,8854,15360,94859798,10071,15360,8364,8501,8039,15360,7959,7951,6806,15360,8597,8605,803915360,8501,8533,7557,15360,8758,8830,7509,15360,10758,10830,10693,1536011508,11605,11621,15360,13524,13669,13886,15360,13830,14022,14327,1536013926,14103,14364,15360,13460,13621,13886,15360,12854,13191,13420,1536013597,13733,13926,15360,13846,13990,14223,15360,13773,13942,14199,1536013910,14087,14356,15360,13813,14022,14319,15360,14247,14396,14540,1536014693,14765,14878,15360,15223,15279,15343,15360,15508,15524,15540,1536015540,15548,15564,15360,15327,15335,15319,15360,15303,15311,15303,1536015918,15910,15886,15360,16247,16207,16151,15360,16175,16143,16086,1536014436,14452,14436,15360,12263,12380,12404,15360,11476,11701,11773,1536012380,12492,12532,15360,14797,14797,14757,15360,11372,11589,11677,1536012597,12934,13356,15360,13990,14364,14725,15360,14183,14444,14773,1536014231,14444,14717,15360,14412,14532,14709,15360,14054,14199,14380,1536012372,12500,12605,15360,12199,12565,13006,15360,12581,13175,13653,1536010055,10380,10324,15360,8557,8573,6726,15360,8167,8196,6533,15360,7517,74856119,15360,7244,7172,5798,15360,7071,6959,5718,15360,7669,7581,6260,153608661,8605,7975,15360,10942,11079,11151,15360,12573,12741,13014,15360,1190212030,12191,15360,10308,10332,10135,15360,11255,11300,11284,15360,1127611348,11396,15360,10055,10215,10292,15360,12183,12332,12468,15360,9918,99669798,15360,8734,8742,8196,15360,8967,8950,8469,15360,10260,10276,1003915360,9734,9758,9605,15360,9388,9404,9308,15360,7943,7878,7095,15360,77267637,6645,15360,8047,7983,7204,15360,9284,9236,8693,15360,9621,9565,914315360,11255,11268,11047,15360,13175,13332,13420,15360,13773,13934,1417515360,13854,14022,14271,15360,13870,14038,14279,15360,13388,13516,1367715360,12279,12629,12966,15360,13348,13452,13564,15360,13821,13918,1405415360,13701,13846,14022,15360,13460,13605,13781,15360,13492,13637,1382115360,13709,13821,13950,15360,14372,14428,14476,15360,14516,14572,1461315360,14741,14789,14813,15360,14725,14749,14749,15360,13452,13484,1346815360,13476,13500,13492,15360,14990,15022,15022,15360,14556,14572,1456415360,15094,15111,15094,15360,13231,13287,13215,15360,11255,11380,1117515360,10677,10886,10492,15360,11846,12006,11934,15360,14327,14340,1427915360,10766,11039,10862,15360,12918,13255,13452,15360,14231,14548,1488615360,13878,14380,14765,15360,13444,13862,14412,15360,12151,12404,1262115360,12637,12902,13215,15360,11549,11749,11870,15360,12279,12653,1311915360,13223,13404,13516,15360,9228,9260,8276,15360,8087,7991,6308,153607918,7814,6919,15360,7469,7364,6148,15360,7485,7380,6212,15360,8228,79917204,15360,9276,8967,8212,15360,9806,9573,8742,15360,10135,10087,9621,1536011452,11452,11452,15360,10629,10637,10509,15360,10693,10733,10637,1536011095,11111,10982,15360,11292,11348,11372,15360,10199,10244,10167,1536010814,10926,10846,15360,8669,8774,7493,15360,7870,7910,6244,15360,8204,81836919,15360,9806,9758,9159,15360,9460,9436,8629,15360,9159,9087,8260,153607637,7509,6790,15360,7758,7629,6838,15360,7967,7918,6774,15360,10854,1074910501,15360,11508,11412,11316,15360,12372,12300,12151,15360,12030,1211912063,15360,12781,12910,12982,15360,13476,13581,13661,15360,13484,1358913677,15360,12404,12428,12380,15360,11605,11765,11798,15360,11492,1153311452,15360,11838,11886,11798,15360,12263,12372,12380,15360,12151,1223112175,15360,11492,11508,11412,15360,11119,11111,10838,15360,12508,1258112573,15360,12621,12693,12677,15360,12573,12629,12589,15360,12292,1232412231,15360,12476,12565,12573,15360,11998,12159,12215,15360,12950,1307113159,15360,12263,12372,12428,15360,12380,12428,12444,15360,11300,1130811143,15360,10199,10244,9734,15360,9709,9701,9252,15360,10492,10581,1040415360,11476,11516,11388,15360,9477,9517,8790,15360,11717,11854,11838,1536014247,14420,14524,15360,14054,14311,14436,15360,13597,13805,13982,1536011364,11533,11597,15360,12263,12428,12549,15360,11436,11605,11653,1536013079,13324,13444,15360,12516,12613,12605,15360,10039,10015,9605,15360,86938621,7878,15360,7951,7862,6902,15360,8196,8204,7015,15360,8677,8589,763715360,9284,9031,8340,15360,9814,9605,8902,15360,10685,10428,9910,1536010492,10260,9685,15360,9404,9252,7943,15360,8830,8766,7220,15360,9220,90477943,15360,9693,9669,9015,15360,11412,11468,11372,15360,11135,11159,1102315360,10087,10055,9428,15360,9910,10007,9621,15360,9236,9300,8934,153609597,9557,8902,15360,10669,10549,9782,15360,9926,9870,9127,15360,9894,99189047,15360,8685,8742,7910,15360,9958,10167,10284,15360,10215,10332,1039615360,11396,11428,11452,15360,11223,11255,11300,15360,11814,11862,1195815360,10685,10846,10870,15360,10340,10380,10007,15360,11175,11207,1089415360,12103,12207,12215,15360,11143,11103,10902,15360,9910,9966,9613,1536010015,10079,9493,15360,10806,10846,10517,15360,10862,10934,10637,1536010838,10942,10661,15360,10958,11087,10878,15360,10709,10838,10701,1536010669,10741,10589,15360,10581,10669,10525,15360,10252,10348,9974,1536011396,11500,11525,15360,11207,11255,11264,15360,10878,10910,10934,1536011031,11063,11159,15360,11292,11324,11396,15360,11223,11255,11300,1536010693,10685,10645,15360,10428,10420,10324,15360,10300,10252,9991,1536010838,10846,10798,15360,10428,10428,10364,15360,9669,9605,9380,15360,1016710244,10087,15360,11709,11854,11910,15360,11223,11284,11268,15360,1023110244,9878,15360,10199,10244,9862,15360,10183,10260,9942,15360,10525,1065310541,15360,12500,12597,12621,15360,11814,11741,11597,15360,11533,1146011175,15360,11103,11006,10557,15360,10444,10396,9846,15360,10007,10023,922815360,9653,9790,8469,15360,9316,9372,8039,15360,9557,9830,8071,15360,96219918,8071,15360,9677,10015,8167,15360,9991,10284,8420,15360,10215,104368581,15360,10260,10484,8645,15360,10292,10476,8902,15360,10324,10468,925215360,9910,9894,8886,15360,10525,10573,9701,15360,9782,10039,8581,153609565,9814,8167,15360,9950,10039,8934,15360,10749,10758,10199,15360,1066910685,10244,15360,10838,10838,10460,15360,11215,10910,10087,15360,1149211364,10806,15360,11095,11159,11055,15360,11364,11388,11356,15360,1102311039,10990,15360,11653,11653,11613,15360,11798,11725,11557,15360,1197411862,11637,15360,12039,11942,11765,15360,12119,12047,11934,15360,1215112071,11950,15360,12087,12006,11886,15360,12047,11966,11838,15360,1199011926,11790,15360,11974,11910,11798,15360,11998,11934,11814,15360,1211112039,11886,15360,12231,12143,11998,15360,12292,12199,12039,15360,1203911974,11846,15360,11822,11782,11653,15360,11862,11838,11765,15360,1179811765,11701,15360,11782,11733,11669,15360,11798,11749,11685,15360,1183811790,11725,15360,11870,11822,11749,15360,11741,11701,11621,15360,1156511541,11452,15360,11533,11500,11412,15360,11621,11581,11484,15360,1160511557,11460,15360,11516,11468,11372,15360,11565,11533,11444,15360,1167711637,11541,15360,11725,11661,11557,15360,11725,11661,11557,15360,1173311669,11573,15360,11838,11773,11677,15360,11998,11926,11814,15360,1201411926,11798,15360,11460,11404,11332,15360,11637,11557,11428,15360,1201411894,11693,15360,12167,12022,11765,15360,12119,11982,11709,15360,1192611806,11516,15360,11685,11589,11300,15360,11476,11404,10886,15360,1123911151,10468,15360,10766,10733,9894,15360,10565,10565,9589,15360,10436,104449332,15360,10308,10308,9031,15360,10308,10316,8999,15360,10199,10244,877415360,9725,9645,8549,15360,10244,10276,8967,15360,10878,10838,10183,1536011055,10966,10348,15360,11119,11006,10404,15360,11264,11135,10565,1536011404,11316,10822,15360,11492,11388,10982,15360,11798,11613,11223,1536012047,11830,11412,15360,12039,11894,11597,15360,12127,11990,11693,1536012127,11990,11725,15360,12191,12055,11806,15360,12191,12055,11830,1536011870,11773,11613,15360,11573,11516,11428,15360,11533,11484,11412,1536011541,11492,11420,15360,11565,11516,11452,15360,11589,11541,11476,1536011605,11557,11500,15360,11637,11589,11533,15360,11669,11621,11557,1536011701,11645,11573,15360,11733,11669,11589,15360,11798,11717,11605,1536011838,11749,11621,15360,11878,11782,11661,15360,11894,11798,11661,1536011926,11806,11653,15360,11958,11822,11661,15360,11982,11846,11677,1536012006,11870,11685,15360,12095,11950,11765,15360,12047,11910,11741,1536011886,11765,11605,15360,11838,11733,11589,15360,11814,11717,11589,1536011814,11709,11573,15360,11790,11693,11565,15360,11741,11677,11589,1536011733,11677,11613,15360,11733,11685,11629,15360,11717,11669,11621,1536011685,11645,11589,15360,11629,11589,11533,15360,11573,11525,11468,1536011492,11444,11380,15360,11316,11255,11111,15360,11348,11292,11143,1536011516,11436,11316,15360,11854,11749,11589,15360,12127,11990,11765,1536012199,12055,11782,15360,12340,12231,11910,15360,12372,12292,11958,1536012380,12300,11974,15360,12348,12247,11910,15360,12324,12215,11878,1536012247,12103,11773,15360,12095,11958,11637,15360,12055,11926,11613,1536011974,11854,11541,15360,11870,11765,11468,15360,11966,11854,11541,1536012300,12151,11846,15360,12396,12316,12006,15360,12388,12308,11990,1536012388,12308,12006,15360,12396,12316,12022,15360,12396,12308,12022,1536012396,12308,12022,15360,12364,12279,11974,15360,12340,12247,11942,1536012340,12231,11926,15360,12215,12071,11806,15360,12095,11966,11749,1536011741,11645,11500,15360,11420,11356,11255,15360,11364,11308,11207,1536011356,11300,11175,15360,11348,11292,11191,15360,11372,11324,11255,1536011412,11364,11308,15360,11420,11372,11316,15360,11428,11380,11324,1536011444,11388,11332,15360,11484,11428,11364,15360,11508,11460,11396,1536011557,11500,11436,15360,11589,11533,11460,15360,11613,11557,11484,1536011621,11557,11492,15360,11613,11557,11500,15360,11621,11557,11500,1536011629,11573,11508,15360,11629,11573,11508,15360,11605,11557,11484,1536011589,11533,11468,15360,11557,11508,11436,15360,11549,11500,11428,1536011557,11500,11436,15360,11549,11492,11436,15360,11533,11484,11428,1536011525,11476,11428,15360,11516,11476,11428,15360,11525,11484,11444,1536011516,11476,11428,15360,11468,11428,11380,15360,11428,11388,11332,1536011356,11308,11239,15360,11308,11255,11127,15360,11167,11071,10926,1536011223,11119,10966,15360,11276,11175,10998,15360,11404,11332,11191,1536011773,11693,11557,15360,11926,11798,11613,15360,12207,12039,11773,1536012348,12231,11894,15360,12308,12151,11846,15360,12332,12215,11894,1536012364,12279,11958,15360,12380,12292,11974,15360,12396,12316,12022,1536012404,12316,12039,15360,12412,12332,12087,15360,12412,12332,12103,1536012436,12356,12135,15360,12372,12292,12039,15360,12420,12332,12087,1536012396,12316,12055,15360,12356,12263,11990,15360,12340,12231,11942,1536012271,12127,11854,15360,12215,12071,11814,15360,12292,12135,11878,1536012288,12135,11870,15360,12111,11982,11765,15360,11990,11886,11717,1536011637,11557,11428,15360,11364,11300,11143,15360,11316,11239,11079,1536011300,11207,11047,15360,11268,11159,11015,15360,11268,11159,11015,1536011268,11159,11031,15360,11300,11223,11095,15360,11340,11292,11191,1536011348,11300,11223,15360,11372,11324,11255,15360,11380,11332,11255,1536011372,11316,11239,15360,11396,11340,11268,15360,11468,11404,11300,1536011460,11404,11324,15360,11484,11428,11356,15360,11492,11436,11372,1536011500,11444,11388,15360,11508,11460,11404,15360,11500,11452,11396,1536011492,11436,11380,15360,11468,11412,11356,15360,11444,11388,11324,1536011444,11388,11324,15360,11428,11380,11316,15360,11412,11356,11300,1536011404,11348,11300,15360,11404,11356,11308,15360,11396,11356,11308,1536011388,11348,11308,15360,11372,11340,11292,15360,11348,11308,11255,1536011284,11223,11111,15360,11231,11143,11023,15360,11199,11111,10974,1536011047,10958,10814,15360,11127,11023,10870,15360,11119,11006,10846,1536011175,11055,10886,15360,11292,11191,10998,15360,11525,11404,11284,1536011822,11637,11476,15360,11878,11733,11549,15360,11918,11790,11573,1536012063,11918,11653,15360,12223,12063,11765,15360,12300,12151,11846,1536012255,12103,11814,15360,12271,12127,11846,15360,12271,12127,11862,1536012271,12127,11886,15360,12308,12183,11942,15360,12175,12039,11814,1536012063,11934,11709,15360,12159,12014,11765,15360,12215,12063,11798,1536012143,11998,11757,15360,12071,11934,11693,15360,11998,11870,11661,1536011974,11870,11685,15360,11998,11910,11757,15360,11846,11765,11629,1536011468,11396,11284,15360,11308,11223,11031,15360,11215,11103,10934,1536011207,11095,10942,15360,11215,11103,10950,15360,11191,11087,10942,1536011175,11079,10942,15360,11167,11063,10934,15360,11143,11031,10902,1536011247,11143,11015,15360,11284,11191,11079,15360,11300,11223,11095,1536011316,11268,11127,15360,11340,11284,11143,15360,11340,11284,11159,1536011356,11300,11191,15360,11372,11316,11239,15360,11380,11324,11255,1536011372,11316,11255,15360,11380,11324,11276,15360,11380,11324,11268,1536011372,11316,11255,15360,11364,11316,11255,15360,11364,11308,11239,1536011348,11292,11207,15360,11340,11284,11191,15360,11348,11292,11191,1536011348,11292,11207,15360,11340,11292,11207,15360,11340,11292,11207,1536011324,11276,11207,15360,11308,11255,11175,15360,11264,11175,11079,1536011119,11039,10934,15360,11103,11015,10902,15360,11095,11006,10878,1536011031,10942,10806,15360,10990,10902,10766,15360,11047,10942,10814,1536011031,10926,10790,15360,11055,10942,10806,15360,11119,10998,10846,1536011151,11015,10830,15360,11268,11095,10886,15360,11484,11396,11268,1536011790,11701,11549,15360,11886,11790,11637,15360,11838,11741,11581,1536011838,11725,11541,15360,11902,11782,11581,15360,11966,11838,11629,1536011974,11846,11629,15360,11958,11838,11629,15360,11950,11838,11637,1536011814,11701,11525,15360,11581,11492,11332,15360,11645,11541,11380,1536011806,11701,11533,15360,11902,11806,11637,15360,11950,11862,11717,1536012014,11934,11790,15360,11942,11862,11725,15360,11565,11492,11388,1536011292,11191,11015,15360,11231,11111,10950,15360,11159,11047,10894,1536011119,11006,10854,15360,11127,11023,10878,15360,11159,11055,10902,1536011135,11031,10894,15360,11111,11006,10878,15360,11095,10990,10870,1536011095,10998,10886,15360,11071,10966,10846,15360,11111,11006,10902,1536011191,11095,10974,15360,11268,11159,11031,15360,11284,11191,11063,1536011292,11207,11063,15360,11300,11223,11079,15360,11332,11268,11143,1536011316,11255,11127,15360,11316,11255,11143,15360,11308,11239,11127,1536011316,11255,11159,15360,11300,11223,11127,15360,11292,11207,11095,1536011300,11223,11111,15360,11300,11223,11095,15360,11300,11223,11095,1536011308,11239,11111,15360,11300,11223,11111,15360,11292,11207,11111,1536011264,11167,11071,15360,11215,11127,11047,15360,11135,11055,10966,1536011015,10934,10846,15360,10918,10838,10733,15360,10982,10894,10782,1536010974,10886,10766,15360,10982,10894,10766,15360,10958,10862,10749,1536010982,10886,10774,15360,10958,10862,10758,15360,10958,10862,10749,1536011015,10910,10790,15360,11023,10910,10774,15360,11079,10958,10806,1536011103,10974,10798,15360,11191,11047,10846,15360,11468,11388,11276,1536011846,11765,11637,15360,12006,11918,11782,15360,11998,11910,11782,1536011902,11822,11693,15360,11838,11749,11637,15360,11782,11709,11605,1536011806,11741,11645,15360,11782,11717,11629,15360,11773,11717,11621,1536011870,11806,11701,15360,11942,11862,11757,15360,12183,12103,11974,1536011974,11894,11765,15360,11476,11404,11308,15360,11268,11143,10966,1536011183,11063,10902,15360,11111,10998,10854,15360,11055,10942,10806,1536011023,10910,10766,15360,11047,10934,10782,15360,11039,10926,10782,1536011079,10966,10830,15360,11031,10918,10782,15360,11031,10926,10806,1536010990,10894,10782,15360,10974,10886,10790,15360,10966,10870,10774,1536011006,10902,10806,15360,11039,10942,10838,15360,11127,11023,10910,1536011175,11079,10958,15360,11191,11087,10958,15360,11207,11095,10958,1536011268,11143,11015,15360,11276,11175,11047,15360,11284,11191,11079,1536011292,11191,11079,15360,11276,11175,11079,15360,11239,11135,11031,1536011268,11159,11047,15360,11215,11111,11006,15360,11239,11127,11015,1536011255,11143,11031,15360,11223,11119,11015,15360,11199,11103,10998,1536011175,11087,10982,15360,11143,11047,10958,15360,11031,10942,10854,1536010958,10878,10790,15360,10910,10830,10741,15360,10942,10862,10758,1536010926,10838,10733,15360,10854,10758,10637,15360,10918,10830,10709,1536010910,10822,10717,15360,10942,10846,10749,15360,10942,10854,10741,1536010942,10854,10749,15360,10966,10870,10758,15360,10966,10870,10758,1536010958,10854,10733,15360,10998,10886,10741,15360,10942,10830,10677,1536011039,10918,10749,15360,11095,10974,10806,15360,11308,11223,11031,1536011468,11396,11292,15360,11605,11533,11428,15360,11701,11621,11525,1536011693,11629,11541,15360,11685,11621,11549,15360,11685,11629,11549,1536011629,11565,11484,15360,11589,11533,11444,15360,11364,11308,11191,1536011191,11087,10958,15360,11135,11031,10902,15360,11135,11031,10894,1536011055,10950,10830,15360,11015,10910,10782,15360,10958,10854,10733,1536010942,10838,10717,15360,10974,10870,10733,15360,10982,10878,10749,1536010990,10886,10758,15360,11015,10910,10798,15360,10966,10862,10758,1536010950,10854,10758,15360,10910,10822,10733,15360,10894,10798,10709,1536010902,10814,10725,15360,10934,10846,10758,15360,10910,10822,10733,1536010950,10854,10749,15360,10974,10878,10766,15360,11047,10942,10830,1536011095,10990,10878,15360,11167,11055,10942,15360,11199,11103,10990,1536011191,11087,10982,15360,11151,11047,10950,15360,11135,11031,10934,1536011095,10998,10902,15360,11143,11047,10950,15360,11079,10990,10894,1536011079,10990,10902,15360,11103,11006,10910,15360,11079,10982,10886,1536011023,10926,10822,15360,10982,10894,10798,15360,10958,10870,10782,1536010910,10814,10725,15360,10926,10838,10741,15360,10934,10838,10733,1536010950,10854,10749,15360,10886,10798,10709,15360,10910,10814,10709,1536010926,10830,10725,15360,10910,10814,10701,15360,10862,10774,10677,1536010950,10854,10733,15360,10926,10830,10717,15360,10926,10838,10725,1536010926,10830,10725,15360,10894,10798,10685,15360,10926,10830,10701,1536010958,10854,10717,15360,10934,10830,10685,15360,10950,10846,10709,1536010974,10862,10717,15360,10942,10830,10685,15360,10958,10846,10701,1536011006,10894,10749,15360,10950,10846,10725,15360,10958,10862,10741,1536010894,10806,10701,15360,10854,10774,10669,15360,10886,10806,10701,1536010862,10790,10693,15360,10878,10806,10717,15360,10982,10902,10798,1536010990,10902,10798,15360,10950,10862,10758,15360,10942,10846,10733,1536010870,10774,10669,15360,10894,10798,10693,15360,10918,10830,10725,1536010894,10806,10701,15360,10926,10830,10733,15360,10902,10830,10725,1536010870,10790,10693,15360,10886,10814,10725,15360,10814,10741,10661,1536010838,10766,10677,15360,10822,10741,10661,15360,10822,10741,10669,1536010862,10790,10709,15360,10846,10758,10669,15360,10894,10798,10693,1536010974,10878,10766,15360,10966,10870,10766,15360,11023,10926,10814,1536011079,10974,10862,15360,11006,10910,10814,15360,10950,10862,10766,1536010982,10894,10798,15360,10958,10862,10774,15360,10958,10870,10782,1536010910,10830,10741,15360,10950,10862,10766,15360,10982,10886,10790,1536010918,10822,10725,15360,10886,10798,10701,15360,10854,10766,10669,1536010894,10806,10709,15360,10926,10830,10725,15360,10926,10830,10725,1536010958,10862,10749,15360,10958,10862,10749,15360,10894,10806,10717,1536010902,10814,10717,15360,10878,10790,10677,15360,10942,10838,10717,1536010918,10814,10701,15360,10886,10790,10661,15360,10942,10838,10717,1536010950,10854,10725,15360,10950,10854,10725,15360,10910,10814,10693,1536010910,10814,10685,15360,10942,10838,10709,15360,10894,10790,10661,1536010910,10806,10669,15360,10822,10725,10597,15360,10749,10661,10541,1536010830,10733,10613,15360,10838,10741,10629,15360,10806,10709,10597,1536010854,10766,10653,15360,10862,10774,10669,15360,10798,10725,10629,1536010822,10749,10653,15360,10854,10782,10693,15360,10806,10741,10661,1536010862,10790,10701,15360,10870,10790,10685,15360,10870,10790,10693,1536010878,10790,10677,15360,10862,10782,10677,15360,10870,10790,10693,1536010870,10782,10685,15360,10894,10814,10709,15360,10886,10814,10709,1536010846,10782,10685,15360,10741,10669,10573,15360,10766,10693,10589,1536010709,10637,10541,15360,10741,10669,10589,15360,10741,10677,10589,1536010709,10637,10557,15360,10774,10701,10613,15360,10862,10774,10677,1536011006,10918,10806,15360,11006,10902,10782,15360,10974,10870,10749,1536010958,10854,10733,15360,10934,10838,10725,15360,10934,10838,10733,1536010934,10838,10725,15360,10886,10790,10685,15360,10854,10766,10661,1536010886,10798,10701,15360,10838,10749,10645,15360,10878,10782,10661,1536010822,10725,10613,15360,10822,10717,10605,15360,10846,10749,10629,1536010854,10749,10637,15360,10950,10854,10733,15360,10958,10854,10741,1536010910,10806,10693,15360,10926,10822,10693,15360,10934,10838,10725,1536010910,10822,10709,15360,10910,10822,10709,15360,10886,10782,10661,1536010910,10814,10677,15360,10910,10806,10677,15360,10926,10822,10685,1536010958,10854,10717,15360,10974,10870,10725,15360,10926,10830,10693,1536010926,10830,10693,15360,10918,10822,10693,15360,10934,10838,10701,1536010918,10814,10685,15360,10878,10782,10653,15360,10870,10774,10645,1536010838,10749,10629,15360,10806,10717,10605,15360,10822,10733,10621,1536010822,10733,10621,15360,10846,10758,10653,15360,10846,10766,10653,1536010822,10741,10629,15360,10806,10733,10629,15360,10806,10725,10621,1536010790,10709,10605,15360,10766,10693,10589,15360,10814,10741,10629,1536010846,10766,10653,15360,10838,10758,10653,15360,10878,10790,10677,1536010894,10798,10685,15360,10830,10741,10629,15360,10830,10758,10653,1536010798,10725,10629,15360,10806,10733,10629,15360,10717,10637,10525,1536010661,10581,10476,15360,10701,10621,10517,15360,10733,10661,10565,1536010782,10685,10557,15360,10862,10758,10613,15360,10974,10862,10725,1536010958,10846,10709,15360,11006,10902,10766,15360,11006,10902,10774,1536011039,10934,10814,15360,11006,10902,10790,15360,11006,10910,10790,1536010950,10854,10741,15360,10934,10830,10709,15360,10918,10814,10701,1536010854,10758,10653,15360,10918,10814,10701,15360,10870,10766,10645,1536010830,10733,10621,15360,10934,10830,10709,15360,10990,10886,10758,1536010950,10838,10717,15360,10910,10814,10701,15360,10926,10822,10693,1536010934,10830,10709,15360,10878,10774,10653,15360,10934,10830,10701,1536010926,10822,10693,15360,10878,10782,10661,15360,10878,10782,10661,1536010862,10766,10621,15360,10886,10782,10645,15360,10886,10782,10653,1536010926,10822,10701,15360,10902,10806,10685,15360,10926,10822,10701,1536010918,10814,10685,15360,10878,10782,10645,15360,10910,10806,10669,1536010854,10758,10621,15360,10886,10790,10645,15360,10854,10758,10629,1536010830,10741,10613,15360,10918,10814,10685,15360,10862,10766,10645,1536010830,10741,10613,15360,10806,10717,10597,15360,10741,10661,10557,1536010774,10693,10581,15360,10749,10669,10557,15360,10774,10693,10581,1536010766,10685,10573,15360,10790,10709,10597,15360,10782,10701,10589,1536010790,10709,10597,15360,10838,10749,10621,15360,10870,10774,10645,1536010894,10790,10661,15360,10878,10782,10653,15360,10846,10741,10613,1536010790,10693,10557,15360,10814,10717,10597,15360,10790,10701,10581,1536010741,10645,10525,15360,10717,10629,10509,15360,10774,10685,10573,1536010725,10637,10525,15360,10854,10749,10621,15360,10950,10846,10701,1536010966,10854,10709,15360,10934,10814,10677,15360,10926,10822,10701,1536010982,10878,10766,15360,10998,10894,10782,15360,10990,10878,10766,1536010998,10894,10782,15360,10998,10886,10774,15360,10998,10886,10758,1536011006,10894,10774,15360,10942,10838,10733,15360,10958,10854,10741,1536010958,10854,10749,15360,11006,10902,10790,15360,11015,10902,10798,1536010982,10870,10758,15360,10998,10894,10782,15360,10974,10870,10758,1536011006,10902,10790,15360,10998,10894,10774,15360,10974,10870,10758,1536010950,10854,10741,15360,10878,10790,10693,15360,10902,10814,10701,1536010918,10822,10709,15360,10838,10733,10613,15360,10878,10782,10661,1536010934,10838,10717,15360,10902,10806,10693,15360,10918,10822,10709,1536010926,10830,10709,15360,10838,10733,10605,15360,10910,10806,10661,1536010942,10838,10693,15360,10886,10782,10645,15360,10886,10782,10637,1536010854,10749,10621,15360,10926,10830,10709,15360,10966,10862,10741,1536010846,10749,10629,15360,10830,10733,10605,15360,10854,10758,10637,1536010822,10725,10605,15360,10886,10790,10661,15360,10902,10806,10669,1536010918,10814,10677,15360,10830,10733,10605,15360,10806,10717,10589,1536010870,10774,10645,15360,10934,10838,10709,15360,10958,10862,10733,1536010886,10790,10661,15360,10894,10798,10661,15360,10958,10854,10709,1536010934,10830,10709,15360,10814,10717,10581,15360,10862,10758,10613,1536010854,10741,10589,15360,10814,10717,10573,15360,10886,10782,10645,1536010814,10725,10597,15360,10862,10766,10637,15360,10910,10806,10669,1536010942,10838,10709,15360,10966,10862,10733,15360,10974,10870,10741,1536010974,10870,10749,15360,10958,10862,10749,15360,11031,10934,10822,1536010998,10894,10782,15360,10974,10870,10766,15360,11023,10918,10814,1536011039,10926,10822,15360,10958,10846,10741,15360,10918,10814,10693,1536010966,10870,10741,15360,10982,10886,10766,15360,10982,10878,10766,1536010942,10846,10733,15360,10958,10862,10758,15360,10950,10854,10758,1536010934,10830,10717,15360,10966,10862,10733,15360,10942,10846,10725,1536010934,10846,10733,15360,10934,10846,10733,15360,10878,10798,10693,1536010886,10798,10693,15360,10910,10814,10709,15360,10942,10846,10733,1536010838,10733,10597,15360,10878,10774,10645,15360,10918,10822,10701,1536010878,10782,10653,15360,10894,10790,10661,15360,10934,10838,10725,1536010958,10854,10725,15360,10966,10862,10733,15360,10910,10806,10685,1536010982,10878,10758,15360,10942,10854,10749,15360,10934,10838,10733,1536010918,10814,10701,15360,10894,10798,10669,15360,10894,10798,10669,1536010814,10725,10605,15360,10902,10798,10669,15360,10814,10725,10605,1536010894,10798,10685,15360,10958,10862,10749,15360,10910,10814,10701,1536010910,10806,10685,15360,10918,10814,10693,15360,10926,10822,10709,1536010894,10790,10661,15360,10902,10806,10677,15360,10902,10806,10685,1536010934,10838,10717,15360,10934,10838,10701,15360,10934,10838,10717,1536010950,10854,10725,15360,10894,10798,10661,15360,10862,10749,10597,1536010894,10798,10677,15360,10878,10782,10661,15360,10926,10838,10717,1536010926,10838,10717,15360,10918,10822,10709,15360,10934,10838,10733,1536010926,10838,10733,15360,10958,10870,10766,15360,10942,10854,10749,1536010958,10870,10774,15360,10974,10878,10774,15360,10958,10854,10741,1536010950,10846,10741,15360,10950,10854,10758,15360,10934,10838,10733,1536010942,10846,10725,15360,10966,10862,10741,15360,10926,10838,10733,1536010958,10862,10749,15360,10910,10822,10709,15360,10942,10854,10758,1536010926,10838,10733,15360,10910,10822,10717,15360,10934,10838,10733,1536010934,10846,10733,15360,10902,10814,10709,15360,10926,10830,10717,1536010918,10822,10709,15360,10838,10749,10637,15360,10878,10790,10677,1536010942,10846,10733,15360,10926,10822,10701,15360,10958,10862,10749,1536010886,10790,10685,15360,10918,10814,10693,15360,10910,10814,10693,1536010902,10806,10701,15360,10878,10774,10637,15360,10798,10693,10565,1536010822,10725,10597,15360,10934,10838,10709,15360,10958,10854,10725,1536010886,10790,10669,15360,10910,10806,10677,15360,10886,10782,10645,1536010830,10725,10597,15360,10822,10717,10581,15360,10862,10758,10637,1536010878,10782,10669,15360,10926,10822,10709,15360,10974,10878,10774,1536010966,10870,10758,15360,10918,10822,10709,15360,10846,10749,10645,1536010894,10798,10693,15360,10918,10822,10709,15360,10974,10878,10774,1536010918,10822,10717,15360,10982,10886,10774,15360,10974,10878,10758,1536010950,10854,10741,15360,10958,10854,10725,15360,10982,10886,10766,1536010918,10822,10701,15360,10878,10782,10669,15360,10886,10790,10669,1536010934,10838,10717,15360,10950,10854,10741,15360,10934,10838,10733,1536010982,10886,10782,15360,10886,10798,10701,15360,10870,10782,10685,1536010894,10814,10717,15360,10910,10822,10725,15360,10934,10838,10733,1536010950,10846,10741,15360,10934,10838,10725,15360,10934,10846,10749,1536010902,10814,10717,15360,10878,10790,10677,15360,10878,10782,10669,1536010854,10766,10645,15360,10838,10749,10629,15360,10902,10814,10701,1536010910,10814,10693,15360,10902,10798,10669,15360,10910,10806,10677,1536010886,10782,10653,15360,10854,10749,10629,15360,10870,10774,10653,1536010974,10870,10758,15360,10990,10878,10758,15360,10918,10822,10709,1536010926,10838,10725,15360,10958,10854,10733,15360,10894,10790,10653,1536010822,10725,10605,15360,10878,10782,10661,15360,10974,10870,10749,1536010902,10806,10677,15360,10934,10838,10725,15360,10870,10774,10653,1536010798,10701,10581,15360,10854,10749,10621,15360,10894,10798,10669,1536010934,10822,10685,15360,10942,10830,10701,15360,10910,10806,10669,1536010870,10758,10629,15360,10886,10774,10645,15360,10950,10838,10701,1536010966,10870,10749,15360,10886,10790,10685,15360,10870,10782,10677,1536010934,10838,10733,15360,10934,10838,10725,15360,10822,10725,10621,1536010878,10790,10677,15360,10894,10798,10693,15360,10822,10733,10629,1536010894,10798,10685,15360,10998,10902,10790,15360,11015,10918,10806,1536010950,10854,10741,15360,10950,10846,10741,15360,10934,10838,10733,1536010942,10846,10749,15360,10910,10822,10725,15360,10846,10758,10653,1536010878,10790,10685,15360,10894,10798,10701,15360,10862,10774,10669,1536010814,10725,10621,15360,10846,10758,10645,15360,10870,10774,10661,1536010870,10774,10677,15360,10878,10790,10693,15360,10878,10782,10677,1536010830,10741,10637,15360,10870,10782,10677,15360,10966,10870,10766,1536011015,10918,10814,15360,10910,10814,10701,15360,10942,10846,10725,1536010950,10846,10725,15360,10942,10838,10725,15360,10934,10830,10701,1536010910,10798,10677,15360,10886,10782,10653,15360,10838,10733,10597,1536010902,10806,10669,15360,10830,10733,10613,15360,10838,10741,10621,1536010838,10741,10621,15360,10894,10798,10669,15360,10934,10830,10685,1536010886,10790,10669,15360,10902,10806,10685,15360,10854,10749,10637,15360]);\n}\n","import * as THREE from \"three\";\nimport { SimplifyModifier } from \"three/examples/jsm/modifiers/SimplifyModifier.js\";\n\n/**\n * SimplifyUtils class is used to simplify objects' geomery for a given object\n */\nexport class SimplifyUtils {\n  /**\n   * Gets simplified object.\n   */\n  public static getSimplyfiedObject(object: THREE.Object3D, simplifyRate: number): THREE.Object3D {\n    if (!(object instanceof THREE.Mesh || object instanceof THREE.Line) || !object.geometry) {\n      return object;\n    }\n\n    const modifier = new SimplifyModifier();\n    const numberOfVerticesToRemove = this.getNumberOfVerticesToRemove(object.geometry, simplifyRate);\n    if (numberOfVerticesToRemove > 0) {\n      const clonedObj = object.clone(true);\n      clonedObj.geometry = modifier.modify(clonedObj.geometry.clone(), numberOfVerticesToRemove); // don't need to dispose the cloned geometry?\n      return clonedObj;\n    }\n    return object;\n  }\n\n  /**\n   * Gets number of vertices to remove\n   */\n  private static getNumberOfVerticesToRemove(geometry: THREE.BufferGeometry, simplifyRate: number): number {\n    let count = 0;\n    if (geometry instanceof THREE.BufferGeometry) {\n      if (geometry.index) {\n        count = geometry.attributes.position.count;\n      }\n    }\n    // if (count < 100) return 0 // don't simplify small objects\n    const result = Math.floor(count * simplifyRate);\n    if (count < 20) {\n      return 0;\n    }\n    return result;\n  }\n}\n","import * as THREE from \"three\";\nimport { SceneUtils } from \"./SceneUtils\";\n\n/**\n * Creates a sky box with light blue sky.\n * See code here:\n * https://github.com/mrdoob/three.js/blob/master/examples/webgl_materials_lightmap.html\n */\nexport class SkyboxUtils {\n  static NAME = \"SKYBOX\";\n  static MIN_SKY_RADIUS = 4000;\n  static MAX_SKY_RADIUS = 20000;\n  static vertexShader = `\n    varying vec3 vWorldPosition;\n    void main() {\n      vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n      vWorldPosition = worldPosition.xyz;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n    }`;\n\n  static fragmentShader = `\n    uniform vec3 topColor;\n    uniform vec3 skylineColor;\n    uniform vec3 bottomColor;\n    uniform float offset;\n    uniform float exponent;\n    uniform vec3 skyCenter;\n    varying vec3 vWorldPosition;\n    void main() {\n      vec3 position = vec3(vWorldPosition.x - skyCenter.x, vWorldPosition.y - skyCenter.y, vWorldPosition.z - skyCenter.z);\n      float h = normalize( position + offset ).y;\n      vec3 color;\n      if (h > 0.0) {\n        color = mix( skylineColor, topColor, max( pow( max( h, 0.0 ), exponent ), 0.0 ) );\n      } else {\n        color = mix( skylineColor, bottomColor, max( pow( max( -h, 0.0 ), exponent ), 0.0 ) );\n      }\n      gl_FragColor = vec4(color , 1.0 );\n    }`;\n\n  /**\n   * Creates sky\n   * @param radius\n   * @param widthSegments\n   * @param heightSegments\n   */\n  public static createSkyOfGradientRamp(radius: number = 4000, widthSegments: number = 32, heightSegments: number = 15, skyCenter = new THREE.Vector3()): THREE.Mesh {\n    const uniforms = {\n      topColor: { value: new THREE.Color(0x86B6F5) }, // 0xaabbff\n      skylineColor: { value: new THREE.Color(0xffffff) },\n      bottomColor: { value: new THREE.Color(0x999999) }, // 0x6A6A6A\n      offset: { value: 400 },\n      exponent: { value: 0.9 },\n      skyCenter: { value: skyCenter || new THREE.Vector3() }\n    };\n    // note that the camera's far distance should bigger than the radius,\n    // otherwise, you cannot see the sky\n    const skyGeo = new THREE.SphereGeometry(radius, widthSegments, heightSegments);\n    const skyMat = new THREE.ShaderMaterial({\n      uniforms: uniforms,\n      vertexShader: this.vertexShader,\n      fragmentShader: this.fragmentShader,\n      side: THREE.BackSide\n    });\n\n    const sky = new THREE.Mesh(skyGeo, skyMat);\n    sky.matrixAutoUpdate = false; // for better performance\n    sky.name = this.NAME;\n    sky.userData.selectable = false;\n    return sky;\n  }\n\n  /**\n   * Creates sky according to objects in the scene. Need to do this because\n   * objects' size and position may be large or out of sky box.\n   */\n  public static createSkyOfGradientRampByObjectsInScene(scene: THREE.Scene, objectUuids: string[]): THREE.Mesh {\n    if (!scene) {\n      return new THREE.Mesh();\n    }\n    const bbox = SceneUtils.getObjectsBoundingBox(scene, objectUuids);\n    return SkyboxUtils.createSkyOfGradientRampByBoundingBox(bbox);\n  }\n\n  /**\n   * Create sky according to a bounding box\n   */\n  public static createSkyOfGradientRampByBoundingBox(bbox: THREE.Box3) {\n    const distance = (bbox.max.x - bbox.min.x) + (bbox.max.y - bbox.min.y) + (bbox.max.z - bbox.min.z);\n    let radius = distance * 2; // make sky 10 times larger than objects' size\n\n    // make sky radium in a reasonable range, it looks bad if too small, and won't be visible if too far.\n    if (radius < SkyboxUtils.MIN_SKY_RADIUS) {\n      radius = SkyboxUtils.MIN_SKY_RADIUS;\n    } else if (radius > SkyboxUtils.MAX_SKY_RADIUS) {\n      radius = SkyboxUtils.MAX_SKY_RADIUS;\n    }\n    const center = new THREE.Vector3();\n    bbox.getCenter(center);\n\n    const sky = SkyboxUtils.createSkyOfGradientRamp(radius, undefined, undefined, center);\n    // make sky's center, at the center of object (and set y to 0)\n    sky.position.set(center.x, 0, center.z);\n    return sky;\n  }\n\n  /**\n   * Creates skybox by 6 pictures. The texture should be assigned to scene.background.\n   * Currently, there is only a 'cloudy' texture.\n   */\n  public static async createSkyFromTextures(subFolder: \"cloudy\" = \"cloudy\"): Promise<THREE.CubeTexture> {\n    const loader = new THREE.CubeTextureLoader();\n    loader.setPath(`images/skybox/${subFolder}/`);\n    // six pictures in order of: x, -x, y, -y, z, -z, aka, right, left, top, bottom, front, back\n    const pictures = [\"right.jpg\", \"left.jpg\", \"top.jpg\", \"bottom.jpg\", \"front.jpg\", \"back.jpg\"];\n    return new Promise<THREE.CubeTexture>((resolve, reject) => {\n      loader.load(pictures, (t: THREE.CubeTexture) => resolve(t));\n    });\n  }\n}\n","function __getPointBaseLength() {\n  const testDiv:HTMLElement = document.createElement(\"div\"); // get ppi\n  testDiv.setAttribute(\"style\", \"height: 1in; visibility: hidden; position: absolute; margin: 0; padding: 0;\");\n  document.body.appendChild(testDiv);\n  const baseLen = testDiv.clientHeight;\n  const inchToMeter = 0.0254;\n  return inchToMeter / baseLen;\n}\n\nexport const unitConversionByMeter: { [key: string]: number } = {\n  file: 1, // hard code to be meters now. TODO: fix it later\n  m: 1,\n  mm: 0.001,\n  cm: 0.01,\n  ft: 0.3048,\n  in: 0.0254,\n  pt: __getPointBaseLength()\n};\n\nexport const unitLabel: { [key: string]: string } = {\n  file: \"m\",\n  m: \"m\",\n  mm: \"mm\",\n  cm: \"cm\",\n  ft: \"ft\",\n  in: \"in\",\n  pt: \"pt\"\n};\n\nconst _getSuffix = (power: number) => {\n  if (power === 2) {\n    return \"²\";\n  }\n  if (power === 3) {\n    return \"³\";\n  }\n  return \"\";\n};\n\nexport const getUnitStr = (unit: string, power: number = 1): string => {\n  return unitLabel[unit] + _getSuffix(power);\n};\n\n/**\n * Gets unit\n * value\n * sourceUnit\n * targetUnit\n */\ninterface valueWithUnit {\n  value: number,\n  unit: string\n}\nexport const getLengthValueByUnit = (value: number, sourceUnit: string, targetUnit: string, power: number = 1): valueWithUnit => {\n  if (targetUnit === null || targetUnit === undefined) {\n    targetUnit = sourceUnit;\n  }\n  if (targetUnit === sourceUnit) {\n    return {\n      value,\n      unit: getUnitStr(targetUnit)\n    };\n  } else {\n    const targetValue = value * Math.pow(unitConversionByMeter[sourceUnit] / unitConversionByMeter[targetUnit], power);\n    return {\n      value: targetValue,\n      unit: getUnitStr(targetUnit) + _getSuffix(power)\n    };\n  }\n};\n","import { Texture, TextureLoader } from 'three'\r\n\r\nexport interface TextureConfigInterface {\r\n  src: string\r\n}\r\n\r\nexport interface TexturesInterface {\r\n  loader: TextureLoader\r\n  count: number\r\n  textures: Texture[],\r\n  loadProgress: number\r\n  loadTextures(images: TextureConfigInterface[], cb: {() : void}): void\r\n  dispose(): void\r\n}\r\n\r\nexport default function useTextures(): TexturesInterface {\r\n  const obj: TexturesInterface = {\r\n    loader: new TextureLoader(),\r\n    count: 0,\r\n    textures: [],\r\n    loadProgress: 0,\r\n    loadTextures,\r\n    dispose,\r\n  }\r\n  return obj\r\n\r\n  function loadTextures(images: TextureConfigInterface[], cb: {() : void}) {\r\n    obj.count = images.length\r\n    obj.textures.splice(0)\r\n    obj.loadProgress = 0\r\n    Promise.all(images.map(loadTexture)).then(cb)\r\n  }\r\n\r\n  function loadTexture(img: TextureConfigInterface, index: number) {\r\n    return new Promise(resolve => {\r\n      obj.loader.load(\r\n        img.src,\r\n        texture => {\r\n          obj.loadProgress += 1 / obj.count\r\n          obj.textures[index] = texture\r\n          resolve(texture)\r\n        }\r\n      )\r\n    })\r\n  }\r\n\r\n  function dispose() {\r\n    obj.textures.forEach(t => t.dispose())\r\n  }\r\n}\r\n"],"names":["toRef","watch","ref","THREE","i","Views","Vector3","Raycaster","Plane","Vector2","intersect","InstancedMesh","event","object","Mesh","renderer","WebGLRenderer","OrbitControls","Material","Matrix4","Color","MeshStandardMaterial","MeshPhongMaterial","MeshBasicMaterial","LineBasicMaterial","MeshLambertMaterial","DoubleSide","camera","t","TWEEN","defineComponent","watchEffect","inject","OrthographicCamera","PerspectiveCamera","_a","Scene","provide","Texture","getCurrentInstance","Group","WebGLCubeRenderTarget","RGBAFormat","LinearMipmapLinearFilter","CubeCamera","onUnmounted","FontLoader","TextGeometry","TMesh","BufferGeometry","BufferAttribute","props","createGeometry","BoxGeometry","CircleGeometry","ConeGeometry","CylinderGeometry","DodecahedronGeometry","ExtrudeGeometry","IcosahedronGeometry","LatheGeometry","OctahedronGeometry","PlaneGeometry","PolyhedronGeometry","RingGeometry","SphereGeometry","ShapeGeometry","TetrahedronGeometry","TorusGeometry","TorusKnotGeometry","Curve","CatmullRomCurve3","TubeGeometry","SpotLight","DirectionalLight","AmbientLight","HemisphereLight","PointLight","RectAreaLightUniformsLib","RectAreaLight","RectAreaLightHelper","MeshPhysicalMaterial","TPointsMaterial","TShadowMaterial","MeshToonMaterial","TextureLoader","MeshMatcapMaterial","ShaderMaterial","ShaderChunk","UniformsUtils","ShaderLib","CubeReflectionMapping","CubeTextureLoader","VideoTexture","SpriteMaterial","Sprite","Points","GLTFLoader","DRACOLoader","FBXLoader","EffectComposer","RenderPass","BokehPass","FilmPass","ShaderPass","FXAAShader","HalftonePass","SMAAPass","SSAOPass","UnrealBloomPass","_createApp","OBJExporter","DRACOExporter","lines","SimplifyModifier"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIgB,SAAA,gBAAA,CACd,GACA,EAAA,OAAA,EACA,MACM,EAAA;AACN,EAAA,IAAI,mBAAmB,MAAQ,EAAA;AAC7B,IAAO,MAAA,CAAA,OAAA,CAAQ,OAAO,CAAE,CAAA,OAAA,CAAQ,CAAC,CAAC,GAAA,EAAK,KAAK,CAAM,KAAA;AAChD,MAAI,IAAA,MAAA;AAAQ,QAAO,MAAA,CAAA,GAAA,EAAK,KAAK,KAAK,CAAA,CAAA;AAAA;AAC7B,QAAA,GAAA,CAAI,GAAO,CAAA,GAAA,KAAA,CAAA;AAAA,KACjB,CAAA,CAAA;AAAA,GACH;AACF,CAAA;AAEO,SAAS,eACd,GACA,EAAA,IAAA,EACA,GACA,EAAA,KAAA,GAAQ,MACR,MACiB,EAAA;AACjB,EAAI,IAAA,KAAA;AAAO,IAAiB,gBAAA,CAAA,GAAA,EAAK,GAAI,CAAA,IAAA,CAAA,EAAO,MAAM,CAAA,CAAA;AAClD,EAAM,MAAA,CAAA,GAAIA,SAAM,CAAA,GAAA,EAAK,IAAI,CAAA,CAAA;AACzB,EAAO,OAAAC,SAAA,CAAM,CAAG,EAAA,CAAC,KAAU,KAAA;AAAE,IAAiB,gBAAA,CAAA,GAAA,EAAK,OAAO,MAAM,CAAA,CAAA;AAAA,GAAG,CAAA,CAAA;AACrE,CAAA;AAEO,SAAS,eACd,CAAA,GAAA,EACA,GACA,EAAA,KAAA,GAAQ,MACR,MACiB,EAAA;AACjB,EAAI,IAAA,KAAA;AAAO,IAAiB,gBAAA,CAAA,GAAA,EAAK,KAAK,MAAM,CAAA,CAAA;AAC5C,EAAM,MAAA,CAAA,GAAIC,QAAI,GAAG,CAAA,CAAA;AACjB,EAAO,OAAAD,SAAA,CAAM,CAAG,EAAA,CAAC,KAAU,KAAA;AAAE,IAAiB,gBAAA,CAAA,GAAA,EAAK,OAAO,MAAM,CAAA,CAAA;AAAA,GAAK,EAAA,EAAE,IAAM,EAAA,IAAA,EAAM,CAAA,CAAA;AACrF,CAAA;AAEgB,SAAA,WAAA,CAAY,GAA4B,IAAqC,EAAA;AAC3F,EAAA,IAAI,gBAAgB,MAAQ,EAAA;AAC1B,IAAO,MAAA,CAAA,OAAA,CAAQ,IAAI,CAAE,CAAA,OAAA,CAAQ,CAAC,CAAC,GAAA,EAAK,KAAK,CAAM,KAAA;AAC7C,MAAA,CAAA,CAAE,GAAO,CAAA,GAAA,KAAA,CAAA;AAAA,KACV,CAAA,CAAA;AAAA,GACH;AACF,CAAA;AAEgB,SAAA,SAAA,CAAU,GAAU,EAAA,KAAA,EAAiB,GAAgB,EAAA;AACnE,EAAA,KAAA,CAAM,QAAQ,CAAQ,IAAA,KAAA;AACpB,IAAS,QAAA,CAAA,GAAA,EAAK,IAAM,EAAA,GAAA,EAAK,IAAI,CAAA,CAAA;AAAA,GAC9B,CAAA,CAAA;AACH,CAAA;AAEO,SAAS,QAAS,CAAA,GAAA,EAAU,OAAiB,EAAA,GAAA,EAAU,OAAwB,EAAA;AACpF,EAAA,MAAM,WAAW,OAAW,IAAA,OAAA,CAAA;AAC5B,EAAMC,MAAAA,IAAAA,GAAMF,SAAM,CAAA,GAAA,EAAK,OAAO,CAAA,CAAA;AAC9B,EAAIE,IAAAA,IAAAA,CAAI,iBAAiB,MAAQ,EAAA;AAC/B,IAAY,WAAA,CAAA,GAAA,CAAI,QAAWA,CAAAA,EAAAA,IAAAA,CAAI,KAAK,CAAA,CAAA;AACpC,IAAMA,SAAAA,CAAAA,IAAAA,EAAK,CAAC,KAAU,KAAA;AAAE,MAAY,WAAA,CAAA,GAAA,CAAI,WAAW,KAAK,CAAA,CAAA;AAAA,KAAK,EAAA,EAAE,IAAM,EAAA,IAAA,EAAM,CAAA,CAAA;AAAA,GACtE,MAAA;AACL,IAAA,IAAIA,KAAI,KAAU,KAAA,KAAA,CAAA;AAAW,MAAA,GAAA,CAAI,YAAY,GAAI,CAAA,OAAA,CAAA,CAAA;AACjD,IAAMA,SAAAA,CAAAA,IAAAA,EAAK,CAAC,KAAU,KAAA;AAAE,MAAA,GAAA,CAAI,QAAY,CAAA,GAAA,KAAA,CAAA;AAAA,KAAO,CAAA,CAAA;AAAA,GACjD;AACF,CAAA;AAEO,SAAS,WAAY,CAAA,KAAA,EAAgC,OAAoB,GAAA,EAA6B,EAAA;AAC3G,EAAA,MAAM,SAAkC,EAAC,CAAA;AACzC,EAAO,MAAA,CAAA,OAAA,CAAQ,KAAK,CAAE,CAAA,OAAA,CAAQ,CAAC,CAAC,GAAA,EAAK,KAAK,CAAM,KAAA;AAC9C,IAAA,IAAI,CAAC,OAAW,IAAA,CAAC,OAAQ,CAAA,QAAA,CAAS,GAAG,CAAG,EAAA;AACtC,MAAA,MAAA,CAAO,GAAO,CAAA,GAAA,KAAA,CAAA;AAAA,KAChB;AAAA,GACD,CAAA,CAAA;AACD,EAAO,OAAA,MAAA,CAAA;AACT,CAAA;AAEgB,SAAA,IAAA,CAAK,MAAgB,EAAA,MAAA,EAAgB,MAAwB,EAAA;AAC3E,EAAS,MAAA,GAAA,MAAA,GAAS,IAAI,CAAI,GAAA,MAAA,CAAA;AAC1B,EAAS,MAAA,GAAA,MAAA,GAAS,IAAI,CAAI,GAAA,MAAA,CAAA;AAC1B,EAAO,OAAA,MAAA,GAAA,CAAU,SAAS,MAAU,IAAA,MAAA,CAAA;AACtC,CAAA;AAEgB,SAAA,KAAA,CAAM,GAAa,EAAA,GAAA,EAAa,GAAqB,EAAA;AACnE,EAAA,OAAO,GAAM,GAAA,GAAA,GAAM,GAAO,GAAA,GAAA,GAAM,MAAM,GAAM,GAAA,GAAA,CAAA;AAC9C,CAAA;AAGA,MAAM,WAAc,GAAA,wFAAA,CAAA;AACpB,MAAM,cAAiB,GAAA,6BAAA,CAAA;AAEhB,SAAS,YAAa,CAAA,IAAA,GAAO,cAAgB,EAAA,MAAA,GAAS,IAAc,EAAA;AACzE,EAAA,MAAM,QAAW,GAAA,CAAA,EAAG,IAAO,CAAA,EAAA,qBAAA,CAAsB,MAAM,CAAA,CAAA,IAAA,CAAA,CAAA;AACvD,EAAO,OAAA,CAAA,EAAG,eAAe,MAAU,CAAA,CAAA,EAAA,QAAA,CAAA,CAAA,CAAA;AACrC,CAAA;AAEA,SAAS,sBAAsB,MAAgB,EAAA;AAC7C,EAAQ,QAAA,MAAA;AAAA,IACD,KAAA,EAAA;AACH,MAAO,OAAA,OAAA,CAAA;AAAA,IACJ,KAAA,GAAA;AACH,MAAO,OAAA,QAAA,CAAA;AAAA,IACJ,KAAA,GAAA;AACH,MAAO,OAAA,QAAA,CAAA;AAAA,IACJ,KAAA,GAAA;AACH,MAAO,OAAA,QAAA,CAAA;AAAA,IAAA;AAEP,MAAO,OAAA,EAAA,CAAA;AAAA,GAAA;AAEb;;ACvGA,MAAqB,YAArB,MAA8B;AAAA,EAerB,YAAY,KAAoB,EAAA,QAAA,EAAkB,WAAsC,KAAW,CAAA,EAAA,KAAA,GAAgB,UAAS,aAAe,EAAA;AATlJ,IAAA,IAAA,CAAQ,aAAwB,GAAA,CAAA,CAAA;AAChC,IAAA,IAAA,CAAQ,WAAuB,GAAA,KAAA,CAAA;AAS7B,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AACb,IAAA,IAAA,CAAK,QAAW,GAAA,QAAA,CAAA;AAChB,IAAA,IAAI,CAAC,QAAU,EAAA;AACb,MAAQ,OAAA,CAAA,GAAA,CAAI,2BAA2B,QAAU,CAAA,CAAA,CAAA,CAAA;AAAA,KACnD;AACA,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AACb,IAAA,IAAI,SAAS,CAAG,EAAA;AACd,MAAQ,OAAA,CAAA,GAAA,CAAI,wBAAwB,KAAO,CAAA,CAAA,CAAA,CAAA;AAAA,KAC7C;AACA,IAAA,IAAI,QAAU,EAAA;AACZ,MAAA,IAAA,CAAK,QAAW,GAAA,QAAA,CAAA;AAAA,KACX,MAAA;AACL,MAAK,IAAA,CAAA,QAAA,GAAW,IAAIC,gBAAA,CAAM,OAAQ,EAAA,CAAA;AAClC,MAAK,IAAA,CAAA,eAAA,CAAgB,KAAK,QAAQ,CAAA,CAAA;AAAA,KACpC;AAAA,GACF;AAAA,EAKO,OAAU,GAAA;AACf,IAAI,IAAA,CAAC,KAAK,QAAY,IAAA,CAAC,KAAK,QAAY,IAAA,CAAC,KAAK,KAAO,EAAA;AACnD,MAAA,OAAA,CAAQ,IAAI,CAA2B,wBAAA,EAAA,IAAA,CAAK,0BAA0B,IAAK,CAAA,QAAA,CAAA,iBAAA,EAA4B,KAAK,KAAO,CAAA,CAAA,CAAA,CAAA;AACnH,MAAA,OAAA;AAAA,KACF;AACA,IAAA,MAAM,MAAS,GAAA,IAAA,CAAK,KAAM,CAAA,aAAA,CAAc,KAAK,QAAQ,CAAA,CAAA;AACrD,IAAA,IAAI,CAAC,MAAA,IAAU,CAAC,MAAA,CAAO,QAAU,EAAA;AAC/B,MAAA,OAAA,CAAQ,IAAI,+BAA+B,CAAA,CAAA;AAC3C,MAAA,OAAA;AAAA,KACF;AACA,IAAA,OAAA,CAAQ,GAAI,CAAA,CAAA,gBAAA,EAAmB,MAAO,CAAA,IAAA,CAAA,KAAA,EAAY,IAAK,CAAA,QAAA,CAAS,CAAM,CAAA,EAAA,EAAA,IAAA,CAAK,QAAS,CAAA,CAAA,CAAA,EAAA,EAAM,IAAK,CAAA,QAAA,CAAS,CAAG,CAAA,CAAA,CAAA,CAAA;AAC3G,IAAO,MAAA,CAAA,QAAA,CAAS,QAAQ,CAAY,QAAA,KAAA;AAClC,MAAI,IAAA,QAAA,YAAoBA,iBAAM,aAAe,EAAA;AAC3C,QAAM,MAAA,MAAA,GAAS,IAAIA,gBAAA,CAAM,OAAQ,EAAA,CAAA;AACjC,QAAM,MAAA,GAAA,GAAM,IAAIA,gBAAA,CAAM,OAAQ,EAAA,CAAA;AAC9B,QAAM,MAAA,UAAA,GAAa,IAAIA,gBAAA,CAAM,UAAW,EAAA,CAAA;AACxC,QAAM,MAAA,KAAA,GAAQ,IAAIA,gBAAA,CAAM,OAAQ,EAAA,CAAA;AAChC,QAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,QAAS,CAAA,KAAA,EAAO,EAAE,CAAG,EAAA;AAEvC,UAAS,QAAA,CAAA,WAAA,CAAY,GAAG,MAAM,CAAA,CAAA;AAC9B,UAAO,MAAA,CAAA,SAAA,CAAU,GAAK,EAAA,UAAA,EAAY,KAAK,CAAA,CAAA;AAEvC,UAAI,IAAA,CAAC,KAAK,WAAa,EAAA;AACrB,YAAA,MAAM,WAAW,GAAI,CAAA,KAAA,EAAQ,CAAA,GAAA,CAAI,KAAK,QAAQ,CAAA,CAAA;AAC9C,YAAI,GAAA,CAAA,eAAA,CAAgB,QAAU,EAAA,IAAA,CAAK,KAAK,CAAA,CAAA;AAAA,WACnC,MAAA;AACL,YAAA,MAAM,aAAa,GAAI,CAAA,CAAA,GAAI,IAAK,CAAA,QAAA,CAAS,KAAK,IAAK,CAAA,KAAA,CAAA;AACnD,YAAI,GAAA,CAAA,IAAA,CAAK,GAAI,CAAA,CAAA,GAAI,SAAS,CAAA,CAAA;AAAA,WAC5B;AAEA,UAAA,MAAA,CAAO,YAAY,GAAG,CAAA,CAAA;AACtB,UAAS,QAAA,CAAA,WAAA,CAAY,GAAG,MAAM,CAAA,CAAA;AAAA,SAChC;AACA,QAAA,QAAA,CAAS,sBAAyB,GAAA,IAAA,CAAA;AAClC,QAAA,QAAA,CAAS,eAAe,WAAc,GAAA,IAAA,CAAA;AAAA,OACjC,MAAA;AACL,QAAM,MAAA,GAAA,GAAM,QAAS,CAAA,QAAA,CAAS,KAAM,EAAA,CAAA;AACpC,QAAI,IAAA,CAAC,KAAK,WAAa,EAAA;AACrB,UAAA,MAAM,QAAW,GAAA,GAAA,CAAI,GAAI,CAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AACtC,UAAA,QAAA,CAAS,QAAS,CAAA,eAAA,CAAgB,QAAU,EAAA,IAAA,CAAK,KAAK,CAAA,CAAA;AAAA,SAGjD,MAAA;AACL,UAAA,MAAM,aAAa,GAAI,CAAA,CAAA,GAAI,IAAK,CAAA,QAAA,CAAS,KAAK,IAAK,CAAA,KAAA,CAAA;AACnD,UAAA,QAAA,CAAS,QAAS,CAAA,IAAA,CAAK,GAAI,CAAA,CAAA,GAAI,SAAS,CAAA,CAAA;AAAA,SAC1C;AAAA,OACF;AACA,MAAA,QAAA,CAAS,YAAa,EAAA,CAAA;AAAA,KACvB,CAAA,CAAA;AACD,IAAK,IAAA,CAAA,aAAA,EAAA,CAAA;AAAA,GACP;AAAA,EAKO,SAAY,GAAA;AACjB,IAAA,MAAM,MAAS,GAAA,IAAA,CAAK,KAAM,CAAA,aAAA,CAAc,KAAK,QAAQ,CAAA,CAAA;AACrD,IAAA,IAAI,CAAC,MAAA,IAAU,CAAC,MAAA,CAAO,QAAU,EAAA;AAC/B,MAAA,OAAA,CAAQ,IAAI,+BAA+B,CAAA,CAAA;AAC3C,MAAA,OAAA;AAAA,KACF;AACA,IAAA,OAAA,CAAQ,GAAI,CAAA,CAAA,kBAAA,EAAqB,MAAO,CAAA,IAAA,CAAA,KAAA,EAAY,IAAK,CAAA,QAAA,CAAS,CAAM,CAAA,EAAA,EAAA,IAAA,CAAK,QAAS,CAAA,CAAA,CAAA,EAAA,EAAM,IAAK,CAAA,QAAA,CAAS,CAAG,CAAA,CAAA,CAAA,CAAA;AAC7G,IAAA,KAAA,IAAS,IAAI,IAAK,CAAA,aAAA,EAAe,CAAI,GAAA,CAAA,EAAG,EAAE,CAAG,EAAA;AAC3C,MAAO,MAAA,CAAA,QAAA,CAAS,QAAQ,CAAY,QAAA,KAAA;AAClC,QAAI,IAAA,QAAA,YAAoBA,iBAAM,aAAe,EAAA;AAC3C,UAAM,MAAA,MAAA,GAAS,IAAIA,gBAAA,CAAM,OAAQ,EAAA,CAAA;AACjC,UAAM,MAAA,GAAA,GAAM,IAAIA,gBAAA,CAAM,OAAQ,EAAA,CAAA;AAC9B,UAAM,MAAA,UAAA,GAAa,IAAIA,gBAAA,CAAM,UAAW,EAAA,CAAA;AACxC,UAAM,MAAA,KAAA,GAAQ,IAAIA,gBAAA,CAAM,OAAQ,EAAA,CAAA;AAChC,UAAA,MAAM,MAAS,GAAA,IAAA,CAAK,KAAS,IAAA,CAAA,GAAI,IAAK,CAAA,KAAA,CAAA,CAAA;AACtC,UAAA,KAAA,IAASC,KAAI,CAAGA,EAAAA,EAAAA,GAAI,QAAS,CAAA,KAAA,EAAO,EAAEA,EAAG,EAAA;AAEvC,YAAS,QAAA,CAAA,WAAA,CAAYA,IAAG,MAAM,CAAA,CAAA;AAC9B,YAAO,MAAA,CAAA,SAAA,CAAU,GAAK,EAAA,UAAA,EAAY,KAAK,CAAA,CAAA;AAEvC,YAAI,IAAA,CAAC,KAAK,WAAa,EAAA;AACrB,cAAA,MAAM,OAAO,GAAI,CAAA,KAAA,EAAQ,CAAA,GAAA,CAAI,KAAK,QAAQ,CAAA,CAAA;AAC1C,cAAA,IAAA,CAAK,CAAK,IAAA,MAAA,CAAA;AACV,cAAA,IAAA,CAAK,CAAK,IAAA,MAAA,CAAA;AACV,cAAA,IAAA,CAAK,CAAK,IAAA,MAAA,CAAA;AACV,cAAA,GAAA,CAAI,IAAI,IAAI,CAAA,CAAA;AAAA,aACP,MAAA;AACL,cAAA,MAAM,KAAS,GAAA,CAAA,GAAA,CAAI,CAAI,GAAA,IAAA,CAAK,SAAS,CAAK,IAAA,MAAA,CAAA;AAC1C,cAAI,GAAA,CAAA,IAAA,CAAK,GAAI,CAAA,CAAA,GAAI,KAAK,CAAA,CAAA;AAAA,aACxB;AAEA,YAAA,MAAA,CAAO,YAAY,GAAG,CAAA,CAAA;AACtB,YAAS,QAAA,CAAA,WAAA,CAAYA,IAAG,MAAM,CAAA,CAAA;AAAA,WAChC;AACA,UAAA,QAAA,CAAS,sBAAyB,GAAA,IAAA,CAAA;AAClC,UAAA,QAAA,CAAS,eAAe,WAAc,GAAA,IAAA,CAAA;AAAA,SACjC,MAAA;AACL,UAAM,MAAA,GAAA,GAAM,QAAS,CAAA,QAAA,CAAS,KAAM,EAAA,CAAA;AACpC,UAAA,MAAM,MAAS,GAAA,IAAA,CAAK,KAAS,IAAA,CAAA,GAAI,IAAK,CAAA,KAAA,CAAA,CAAA;AACtC,UAAI,IAAA,CAAC,KAAK,WAAa,EAAA;AACrB,YAAA,MAAM,IAAO,GAAA,GAAA,CAAI,GAAI,CAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AAClC,YAAA,IAAA,CAAK,CAAK,IAAA,MAAA,CAAA;AACV,YAAA,IAAA,CAAK,CAAK,IAAA,MAAA,CAAA;AACV,YAAA,IAAA,CAAK,CAAK,IAAA,MAAA,CAAA;AACV,YAAS,QAAA,CAAA,QAAA,CAAS,IAAI,IAAI,CAAA,CAAA;AAAA,WACrB,MAAA;AACL,YAAA,MAAM,KAAS,GAAA,CAAA,GAAA,CAAI,CAAI,GAAA,IAAA,CAAK,SAAS,CAAK,IAAA,MAAA,CAAA;AAC1C,YAAA,QAAA,CAAS,QAAS,CAAA,IAAA,CAAK,GAAI,CAAA,CAAA,GAAI,KAAK,CAAA,CAAA;AAAA,WACtC;AAAA,SACF;AACA,QAAA,QAAA,CAAS,YAAa,EAAA,CAAA;AAAA,OACvB,CAAA,CAAA;AAAA,KACH;AAAA,GACF;AAAA,EAEO,iBAAiB,aAAwB,EAAA;AAC9C,IAAA,IAAA,CAAK,WAAc,GAAA,aAAA,CAAA;AAAA,GACrB;AAAA,EAEQ,gBAAgB,MAAuB,EAAA;AAC7C,IAAM,MAAA,IAAA,GAAO,IAAID,gBAAA,CAAM,IAAK,EAAA,CAAA;AAC5B,IAAI,IAAA,CAAC,KAAK,QAAU,EAAA;AAClB,MAAQ,OAAA,CAAA,GAAA,CAAI,CAA2B,wBAAA,EAAA,IAAA,CAAK,QAAU,CAAA,CAAA,CAAA,CAAA;AACtD,MAAA,OAAA;AAAA,KACF;AACA,IAAA,MAAM,MAAS,GAAA,IAAA,CAAK,KAAM,CAAA,aAAA,CAAc,KAAK,QAAQ,CAAA,CAAA;AACrD,IAAA,IAAI,CAAC,MAAA,IAAU,CAAC,MAAA,CAAO,QAAU,EAAA;AAC/B,MAAA,OAAA,CAAQ,IAAI,+BAA+B,CAAA,CAAA;AAC3C,MAAA,OAAA;AAAA,KACF;AACA,IAAA,MAAA,CAAO,SAAS,CAAO,GAAA,KAAA;AACrB,MAAA,IAAA,CAAK,eAAe,GAAG,CAAA,CAAA;AAAA,KACxB,CAAA,CAAA;AACD,IAAA,IAAA,CAAK,UAAU,MAAM,CAAA,CAAA;AAAA,GACvB;AACF,CAAA,CAAA;AAtKA,IAAqB,QAArB,GAAA,SAAA,CAAA;AAAqB,QAAA,CACZ,aAAgB,GAAA,CAAA;;ACAlB,MAAM,UAAW,CAAA;AAAA,EAKtB,OAAO,4BAA4B,KAAgC,EAAA;AACjE,IAAM,MAAA,IAAA,GAAO,IAAIA,gBAAA,CAAM,IAAK,EAAA,CAAA;AAC5B,IAAM,KAAA,CAAA,eAAA,CAAgB,CAAC,MAAW,KAAA;AAChC,MAAA,IAAI,kBAAkBA,gBAAM,CAAA,IAAA,IAAQ,MAAO,CAAA,QAAA,CAAS,eAAe,KAAO,EAAA;AACxE,QAAA,IAAA,CAAK,eAAe,MAAM,CAAA,CAAA;AAAA,OAC5B;AAAA,KACD,CAAA,CAAA;AACD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAEA,OAAc,qBAAsB,CAAA,KAAA,EAAoB,WAAmC,EAAA;AACzF,IAAM,MAAA,IAAA,GAAO,IAAIA,gBAAA,CAAM,IAAK,EAAA,CAAA;AAC5B,IAAA,WAAA,CAAY,QAAQ,CAAQ,IAAA,KAAA;AAC1B,MAAA,MAAM,MAAS,GAAA,KAAA,CAAM,mBAAoB,CAAA,MAAA,EAAQ,IAAI,CAAA,CAAA;AACrD,MAAA,IAAI,MAAQ,EAAA;AACV,QAAM,MAAA,GAAA,GAAM,UAAW,CAAA,cAAA,CAAe,MAAM,CAAA,CAAA;AAC5C,QAAI,IAAA,CAAC,GAAI,CAAA,OAAA,EAAW,EAAA;AAClB,UAAA,IAAA,CAAK,MAAM,GAAG,CAAA,CAAA;AAAA,SAChB;AAAA,OACF;AAAA,KACD,CAAA,CAAA;AACD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EASA,OAAc,cAAA,CAAe,MAAwB,EAAA,QAAA,GAAW,IAAkB,EAAA;AAChF,IAAM,MAAA,IAAA,GAAO,IAAIA,gBAAA,CAAM,IAAK,EAAA,CAAA;AAC5B,IAAI,IAAA,MAAA,YAAkBA,iBAAM,aAAe,EAAA;AACzC,MAAO,OAAA,UAAA,CAAW,4BAA4B,MAAM,CAAA,CAAA;AAAA,KACtD;AACA,IAAI,IAAA,MAAA,CAAO,QAAS,CAAA,MAAA,KAAW,CAAG,EAAA;AAChC,MAAA,IAAA,CAAK,eAAe,MAAM,CAAA,CAAA;AAC1B,MAAO,OAAA,IAAA,CAAA;AAAA,KACT;AAEA,IAAM,MAAA,KAAA,GAAQ,OAAO,QAAS,CAAA,MAAA,CAAA;AAC9B,IAAA,IAAI,OAAU,GAAA,CAAA,CAAA;AACd,IAAA,IAAI,KAAQ,GAAA,EAAA;AAAI,MAAU,OAAA,GAAA,CAAA,CAAA;AAC1B,IAAA,IAAI,KAAQ,GAAA,GAAA;AAAK,MAAU,OAAA,GAAA,CAAA,CAAA;AAC3B,IAAA,IAAI,KAAQ,GAAA,GAAA;AAAK,MAAU,OAAA,GAAA,EAAA,CAAA;AAC3B,IAAA,IAAI,KAAQ,GAAA,GAAA;AAAM,MAAU,OAAA,GAAA,GAAA,CAAA;AAC5B,IAAA,MAAA,CAAO,kBAAkB,KAAK,CAAA,CAAA;AAE9B,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,KAAA,EAAO,EAAE,CAAG,EAAA;AAC9B,MAAM,MAAA,KAAA,GAAQ,OAAO,QAAS,CAAA,CAAA,CAAA,CAAA;AAE9B,MAAA,IAAI,CAAC,QAAA,IAAY,CAAI,GAAA,OAAA,KAAY,CAAG,EAAA;AAClC,QAAA,KAAA,CAAM,YAAa,EAAA,CAAA;AACnB,QAAI,IAAA,KAAA,YAAiBA,iBAAM,aAAe,EAAA;AACxC,UAAM,MAAA,GAAA,GAAM,UAAW,CAAA,2BAAA,CAA4B,KAAK,CAAA,CAAA;AAExD,UAAA,IAAA,CAAK,MAAM,GAAG,CAAA,CAAA;AAAA,SACT,MAAA;AACL,UAAA,IAAA,CAAK,eAAe,KAAK,CAAA,CAAA;AAAA,SAC3B;AAAA,OACF;AAAA,KACF;AACA,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAKA,OAAc,4BAA4B,IAAuC,EAAA;AAC/E,IAAM,MAAA,IAAA,GAAO,IAAIA,gBAAA,CAAM,IAAK,EAAA,CAAA;AAC5B,IAAM,MAAA,MAAA,GAAS,IAAIA,gBAAA,CAAM,OAAQ,EAAA,CAAA;AACjC,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,IAAK,CAAA,KAAA,EAAO,EAAE,CAAG,EAAA;AACnC,MAAK,IAAA,CAAA,WAAA,CAAY,GAAG,MAAM,CAAA,CAAA;AAC1B,MAAM,MAAA,IAAA,GAAO,IAAK,CAAA,QAAA,CAAS,KAAM,EAAA,CAAA;AACjC,MAAA,IAAI,KAAK,WAAa,EAAA;AACpB,QAAA,MAAM,GAAM,GAAA,IAAA,CAAK,WAAY,CAAA,YAAA,CAAa,MAAM,CAAA,CAAA;AAChD,QAAA,IAAI,CAAC,GAAI,CAAA,OAAA,EAAa,IAAA,CAAC,MAAM,GAAI,CAAA,GAAA,CAAI,CAAC,CAAA,IAAK,CAAC,KAAM,CAAA,GAAA,CAAI,IAAI,CAAC,CAAA,IAAK,CAAC,KAAM,CAAA,GAAA,CAAI,GAAI,CAAA,CAAC,KAAK,CAAC,KAAA,CAAM,IAAI,GAAI,CAAA,CAAC,KAAK,CAAC,KAAA,CAAM,GAAI,CAAA,GAAA,CAAI,CAAC,CAAK,IAAA,CAAC,MAAM,GAAI,CAAA,GAAA,CAAI,CAAC,CAAG,EAAA;AAChJ,UAAA,IAAA,CAAK,MAAM,GAAG,CAAA,CAAA;AAAA,SAChB;AAAA,OACF;AAAA,KACF;AACA,IAAK,IAAA,CAAA,YAAA,CAAa,KAAK,WAAW,CAAA,CAAA;AAClC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAEA,OAAe,aAAc,CAAA,MAAA,EAAwB,KAAoB,EAAA,YAAA,EAA6C,gBAAgB,KAAO,EAAA;AAC3I,IAAI,IAAA,YAAA,CAAa,OAAO,EAAK,CAAA,EAAA;AAE3B,MAAa,YAAA,CAAA,MAAA,CAAO,IAAI,SAAU,EAAA,CAAA;AAAA,KACpC;AACA,IAAM,MAAA,QAAA,GAAW,IAAIA,gBAAA,CAAM,OAAQ,EAAA,CAAA;AACnC,IAAW,UAAA,CAAA,iBAAA,CAAkB,QAAQ,QAAQ,CAAA,CAAA;AAC7C,IAAA,MAAM,WAAW,IAAI,QAAA,CAAS,KAAO,EAAA,MAAA,CAAO,IAAI,QAAQ,CAAA,CAAA;AACxD,IAAA,QAAA,CAAS,iBAAiB,aAAa,CAAA,CAAA;AACvC,IAAA,QAAA,CAAS,OAAQ,EAAA,CAAA;AACjB,IAAA,YAAA,CAAa,OAAO,EAAM,CAAA,GAAA,QAAA,CAAA;AAAA,GAC5B;AAAA,EAEA,OAAO,cAAe,CAAA,KAAA,EAAoB,YAA6C,EAAA,WAAA,EAAuB,gBAAgB,KAAO,EAAA;AAEnI,IAAA,KAAA,CAAM,SAAS,CAAU,MAAA,KAAA;AACvB,MAAA,IAAI,YAAY,IAAK,CAAA,CAAA,EAAA,KAAM,EAAO,KAAA,MAAA,CAAO,IAAI,CAAG,EAAA;AAE9C,QAAA,IAAI,MAAO,CAAA,QAAA,IAAY,MAAO,CAAA,QAAA,CAAS,WAAW,CAAG,EAAA;AAEnD,UAAA,UAAA,CAAW,cAAc,MAAO,CAAA,QAAA,CAAS,CAAI,CAAA,EAAA,KAAA,EAAO,cAAc,aAAa,CAAA,CAAA;AAAA,SAC1E,MAAA;AACL,UAAA,UAAA,CAAW,aAAc,CAAA,MAAA,EAAQ,KAAO,EAAA,YAAA,EAAc,aAAa,CAAA,CAAA;AAAA,SACrE;AAAA,OACF;AAAA,KACD,CAAA,CAAA;AACD,IAAO,OAAA,YAAA,CAAA;AAAA,GACT;AAAA,EAEA,OAAO,gBAAiB,CAAA,KAAA,EAAoB,YAA6C,EAAA;AACvF,IAAA,KAAA,CAAM,SAAS,CAAU,MAAA,KAAA;AACvB,MAAM,MAAA,QAAA,GAAW,aAAa,MAAO,CAAA,EAAA,CAAA,CAAA;AACrC,MAAA,IAAI,QAAU,EAAA;AACZ,QAAA,QAAA,CAAS,SAAU,EAAA,CAAA;AACnB,QAAA,OAAO,aAAa,MAAO,CAAA,EAAA,CAAA,CAAA;AAAA,OAC7B;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AAAA,EAEA,OAAc,iBAAkB,CAAA,MAAA,EAAwB,MAAuB,EAAA;AAC7E,IAAM,MAAA,IAAA,GAAO,UAAW,CAAA,cAAA,CAAe,MAAM,CAAA,CAAA;AAC7C,IAAA,IAAA,CAAK,UAAU,MAAM,CAAA,CAAA;AACrB,IAAO,MAAA,CAAA,CAAA,GAAI,KAAK,GAAI,CAAA,CAAA,CAAA;AAAA,GACtB;AACF;;AC1IY,IAAA,KAAA,qBAAAE,MAAL,KAAA;AACL,EAAAA,OAAA,KAAM,CAAA,GAAA,KAAA,CAAA;AACN,EAAAA,OAAA,QAAS,CAAA,GAAA,QAAA,CAAA;AACT,EAAAA,OAAA,OAAQ,CAAA,GAAA,OAAA,CAAA;AACR,EAAAA,OAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AACP,EAAAA,OAAA,MAAO,CAAA,GAAA,MAAA,CAAA;AACP,EAAAA,OAAA,OAAQ,CAAA,GAAA,OAAA,CAAA;AANE,EAAAA,OAAAA,MAAAA,CAAAA;AAAA,CAAA,EAAA,KAAA,IAAA,EAAA,EAAA;AAYL,MAAM,iBAAN,MAAoB;AAAA,EAQzB,OAAO,uBAAA,CAAwB,KAAoB,EAAA,IAAA,EAAsB,KAAoB,IAAqB,EAAA;AAChH,IAAM,MAAA,IAAA,GAAO,UAAW,CAAA,2BAAA,CAA4B,KAAK,CAAA,CAAA;AACzD,IAAA,cAAA,CAAc,8BAA+B,CAAA,IAAA,EAAM,IAAM,EAAA,GAAA,EAAK,IAAI,CAAA,CAAA;AAAA,GACpE;AAAA,EAUA,OAAc,8BAA+B,CAAA,KAAA,EAAoB,WAAuB,EAAA,IAAA,EAAsB,KAAoB,IAAqB,EAAA;AACrJ,IAAA,MAAM,IAAO,GAAA,UAAA,CAAW,qBAAsB,CAAA,KAAA,EAAO,WAAW,CAAA,CAAA;AAChE,IAAA,cAAA,CAAc,8BAA+B,CAAA,IAAA,EAAM,IAAM,EAAA,GAAA,EAAK,IAAI,CAAA,CAAA;AAAA,GACpE;AAAA,EAKA,OAAc,0BAAA,CAA2B,OAA2B,EAAA,MAAA,EAAsB,KAAoB,IAAqB,EAAA;AACjI,IAAM,MAAA,IAAA,GAAO,IAAIF,gBAAA,CAAM,IAAK,EAAA,CAAA;AAC5B,IAAA,OAAA,CAAQ,QAAQ,CAAU,MAAA,KAAA;AACxB,MAAM,MAAA,GAAA,GAAM,UAAW,CAAA,cAAA,CAAe,MAAM,CAAA,CAAA;AAC5C,MAAA,IAAA,CAAK,MAAM,GAAG,CAAA,CAAA;AAAA,KACf,CAAA,CAAA;AACD,IAAA,cAAA,CAAc,gCAAiC,CAAA,IAAA,EAAM,MAAQ,EAAA,GAAA,EAAK,IAAI,CAAA,CAAA;AAAA,GACxE;AAAA,EAKA,OAAc,gCAAA,CAAiC,IAAkB,EAAA,MAAA,EAAsB,KAAoB,IAAqB,EAAA;AAC9H,IAAI,IAAA,IAAA,CAAK,SAAW,EAAA;AAClB,MAAA,OAAA;AAAA,KACF;AAIA,IAAA,MAAM,eAAkB,GAAA,GAAA,CAAA;AACxB,IAAA,IAAI,WAAY,IAAK,CAAA,GAAA,CAAI,CAAI,GAAA,IAAA,CAAK,IAAI,CAAM,IAAA,IAAA,CAAK,GAAI,CAAA,CAAA,GAAI,KAAK,GAAI,CAAA,CAAA,CAAA,IAAM,KAAK,GAAI,CAAA,CAAA,GAAI,KAAK,GAAI,CAAA,CAAA,CAAA,CAAA;AAC9F,IAAY,QAAA,IAAA,eAAA,CAAA;AAEZ,IAAA,MAAM,iBAAiB,IAAIA,gBAAA,CAAM,OAAQ,CAAA,QAAA,EAAU,UAAU,QAAQ,CAAA,CAAA;AACrE,IAAA,MAAM,MAAM,IAAK,CAAA,GAAA,CAAI,CAAI,GAAA,IAAA,CAAK,IAAI,CAAK,IAAA,CAAA,CAAA;AACvC,IAAA,MAAM,MAAM,IAAK,CAAA,GAAA,CAAI,CAAI,GAAA,IAAA,CAAK,IAAI,CAAK,IAAA,CAAA,CAAA;AACvC,IAAA,MAAM,MAAM,IAAK,CAAA,GAAA,CAAI,CAAI,GAAA,IAAA,CAAK,IAAI,CAAK,IAAA,CAAA,CAAA;AACvC,IAAK,IAAA,CAAA,GAAA,CAAI,EAAI,EAAA,EAAA,EAAI,EAAE,CAAA,CAAA;AAEnB,IAAM,MAAA,UAAA,GAAa,IAAIA,gBAAA,CAAM,OAAQ,EAAA,CAAA;AACrC,IAAA,MAAA,CAAO,iBAAiB,UAAU,CAAA,CAAA;AAClC,IAAA,MAAM,GAAM,GAAA,UAAA,CAAW,GAAI,CAAA,IAAI,EAAE,SAAU,EAAA,CAAA;AAE3C,IAAA,MAAM,MAAM,GAAI,CAAA,QAAA,CAAS,cAAc,CAAA,CAAE,IAAI,IAAI,CAAA,CAAA;AACjD,IAAA,GAAA,CAAI,IAAI,GAAI,CAAA,CAAA,EAAG,GAAI,CAAA,CAAA,EAAG,IAAI,CAAC,CAAA,CAAA;AAAA,GAC7B;AAAA,EAKA,OAAc,8BAAA,CAA+B,IAAkB,EAAA,IAAA,EAAsB,KAAoB,IAAqB,EAAA;AAC5H,IAAI,IAAA,IAAA,CAAK,SAAW,EAAA;AAClB,MAAA,OAAA;AAAA,KACF;AAEA,IAAA,MAAM,WAAY,IAAK,CAAA,GAAA,CAAI,CAAI,GAAA,IAAA,CAAK,IAAI,CAAM,IAAA,IAAA,CAAK,GAAI,CAAA,CAAA,GAAI,KAAK,GAAI,CAAA,CAAA,CAAA,IAAM,KAAK,GAAI,CAAA,CAAA,GAAI,KAAK,GAAI,CAAA,CAAA,CAAA,CAAA;AAEhG,IAAM,MAAA,KAAA,GAAA,CAAS,MAAO,GAAM,GAAA,IAAA,CAAK,IAAI,IAAK,CAAA,CAAA,EAAG,QAAW,GAAA,GAAG,CAAM,IAAA,QAAA,CAAA;AACjE,IAAA,IAAI,CAAI,GAAA,CAAA,CAAA;AACR,IAAI,IAAA,CAAA,GAAI,KAAK,GAAI,CAAA,CAAA,IAAK,KAAK,GAAI,CAAA,CAAA,GAAI,KAAK,GAAI,CAAA,CAAA,CAAA,CAAA;AAC5C,IAAA,IAAI,CAAI,GAAA,CAAA,CAAA;AACR,IAAA,MAAM,MAAM,IAAK,CAAA,GAAA,CAAI,CAAI,GAAA,IAAA,CAAK,IAAI,CAAK,IAAA,CAAA,CAAA;AACvC,IAAA,MAAM,MAAM,IAAK,CAAA,GAAA,CAAI,CAAI,GAAA,IAAA,CAAK,IAAI,CAAK,IAAA,CAAA,CAAA;AACvC,IAAA,MAAM,MAAM,IAAK,CAAA,GAAA,CAAI,CAAI,GAAA,IAAA,CAAK,IAAI,CAAK,IAAA,CAAA,CAAA;AACvC,IAAA,IAAI,SAAS,KAAW,YAAA;AACtB,MAAI,CAAA,GAAA,IAAA,CAAK,IAAI,CAAI,GAAA,KAAA,CAAA;AAAA,KACnB,MAAA,IAAW,SAAS,QAAc,eAAA;AAChC,MAAI,CAAA,GAAA,IAAA,CAAK,IAAI,CAAI,GAAA,KAAA,CAAA;AAAA,KACnB,MAAA,IAAW,SAAS,OAAa,cAAA;AAC/B,MAAI,CAAA,GAAA,IAAA,CAAK,IAAI,CAAI,GAAA,KAAA,CAAA;AACjB,MAAI,CAAA,GAAA,EAAA,CAAA;AAAA,KACN,MAAA,IAAW,SAAS,MAAY,aAAA;AAC9B,MAAI,CAAA,GAAA,IAAA,CAAK,IAAI,CAAI,GAAA,KAAA,CAAA;AACjB,MAAI,CAAA,GAAA,EAAA,CAAA;AAAA,KACN,MAAA,IAAW,SAAS,MAAY,aAAA;AAC9B,MAAI,CAAA,GAAA,IAAA,CAAK,IAAI,CAAI,GAAA,KAAA,CAAA;AACjB,MAAI,CAAA,GAAA,EAAA,CAAA;AAAA,KACN,MAAA,IAAW,SAAS,OAAa,cAAA;AAC/B,MAAI,CAAA,GAAA,IAAA,CAAK,IAAI,CAAI,GAAA,KAAA,CAAA;AACjB,MAAI,CAAA,GAAA,EAAA,CAAA;AAAA,KACN;AACA,IAAA,GAAA,CAAI,CAAI,GAAA,CAAA,CAAA;AACR,IAAA,GAAA,CAAI,CAAI,GAAA,CAAA,CAAA;AACR,IAAA,GAAA,CAAI,CAAI,GAAA,CAAA,CAAA;AACR,IAAA,IAAA,CAAK,CAAI,GAAA,EAAA,CAAA;AACT,IAAA,IAAA,CAAK,CAAI,GAAA,EAAA,CAAA;AACT,IAAA,IAAA,CAAK,CAAI,GAAA,EAAA,CAAA;AAAA,GACX;AAAA,EAKA,aAAoB,MAAM,EAAY,EAAA;AACpC,IAAO,OAAA,IAAI,OAAQ,CAAA,CAAC,OAAY,KAAA;AAC9B,MAAA,UAAA,CAAW,MAAM;AACf,QAAA,OAAA,CAAQ,EAAE,CAAA,CAAA;AAAA,SACT,EAAE,CAAA,CAAA;AAAA,KACN,CAAA,CAAA;AAAA,GACH;AAAA,EASA,aAAoB,OAAA,CAAQ,GAAqB,EAAA,EAAA,GAAa,GAAK,EAAA;AACjE,IAAA,MAAM,QAAQ,cAAc,CAAA,oBAAA,CAAA;AAC5B,IAAI,IAAA,KAAA,CAAM,IAAI,IAAO,CAAA,EAAA;AACnB,MAAA,OAAA;AAAA,KACF;AACA,IAAA,KAAA,CAAM,IAAI,IAAQ,CAAA,GAAA,IAAA,CAAA;AAElB,IAAI,GAAA,CAAA,OAAA,GAAU,CAAC,GAAI,CAAA,OAAA,CAAA;AACnB,IAAM,MAAA,IAAA,CAAK,MAAM,EAAE,CAAA,CAAA;AACnB,IAAI,GAAA,CAAA,OAAA,GAAU,CAAC,GAAI,CAAA,OAAA,CAAA;AACnB,IAAM,MAAA,IAAA,CAAK,MAAM,EAAE,CAAA,CAAA;AACnB,IAAI,GAAA,CAAA,OAAA,GAAU,CAAC,GAAI,CAAA,OAAA,CAAA;AACnB,IAAM,MAAA,IAAA,CAAK,MAAM,EAAE,CAAA,CAAA;AACnB,IAAI,GAAA,CAAA,OAAA,GAAU,CAAC,GAAI,CAAA,OAAA,CAAA;AACnB,IAAM,MAAA,IAAA,CAAK,MAAM,EAAE,CAAA,CAAA;AACnB,IAAI,GAAA,CAAA,OAAA,GAAU,CAAC,GAAI,CAAA,OAAA,CAAA;AACnB,IAAM,MAAA,IAAA,CAAK,MAAM,EAAE,CAAA,CAAA;AACnB,IAAI,GAAA,CAAA,OAAA,GAAU,CAAC,GAAI,CAAA,OAAA,CAAA;AAEnB,IAAA,OAAO,MAAM,GAAI,CAAA,IAAA,CAAA,CAAA;AAAA,GACnB;AACF,CAAA,CAAA;AAnJO,IAAM,aAAN,GAAA,eAAA;AAAM,aAAA,CAyHI,uBAAoD,EAAC;;AC3HtE,SAAwB,aAAa,OAAuD,EAAA;AAC1F,EAAM,MAAA;AAAA,IACJ,MAAA;AAAA,IACA,aAAgB,GAAA,IAAIG,aAAQ,CAAA,CAAA,EAAG,GAAG,CAAC,CAAA;AAAA,GACjC,GAAA,OAAA,CAAA;AAEJ,EAAM,MAAA,SAAA,GAAY,IAAIC,eAAU,EAAA,CAAA;AAChC,EAAM,MAAA,QAAA,GAAW,cAAc,KAAM,EAAA,CAAA;AACrC,EAAM,MAAA,KAAA,GAAQ,IAAIC,WAAM,CAAA,IAAIF,cAAQ,CAAG,EAAA,CAAA,EAAG,CAAC,CAAA,EAAG,CAAC,CAAA,CAAA;AAE/C,EAAM,MAAA,cAAA,GAAiB,CAAC,MAAoB,KAAA;AAC1C,IAAU,SAAA,CAAA,aAAA,CAAc,QAAQ,MAAM,CAAA,CAAA;AACtC,IAAO,MAAA,CAAA,iBAAA,CAAkB,MAAM,MAAM,CAAA,CAAA;AACrC,IAAU,SAAA,CAAA,GAAA,CAAI,cAAe,CAAA,KAAA,EAAO,QAAQ,CAAA,CAAA;AAAA,GAC9C,CAAA;AAEA,EAAA,MAAM,SAAY,GAAA,CAAC,MAAiB,EAAA,OAAA,EAAqB,YAAY,KAAU,KAAA;AAC7E,IAAU,SAAA,CAAA,aAAA,CAAc,QAAQ,MAAM,CAAA,CAAA;AACtC,IAAO,OAAA,SAAA,CAAU,gBAAiB,CAAA,OAAA,EAAS,SAAS,CAAA,CAAA;AAAA,GACtD,CAAA;AAEA,EAAO,OAAA;AAAA,IACL,QAAA;AAAA,IACA,cAAA;AAAA,IACA,SAAA;AAAA,GACF,CAAA;AACF;;AC2BA,SAAwB,WAAW,OAAmD,EAAA;AACpF,EAAM,MAAA;AAAA,IACJ,MAAA;AAAA,IACA,UAAA;AAAA,IACA,gBAAA;AAAA,IACA,cAAiB,GAAA,KAAA,CAAA;AAAA,IACjB,kBAAqB,GAAA,KAAA;AAAA,IACrB,KAAQ,GAAA,IAAA;AAAA,IACR,UAAa,GAAA,KAAA;AAAA,IACb,UAAU,MAAM;AAAA,KAAC;AAAA,IACjB,SAAS,MAAM;AAAA,KAAC;AAAA,IAChB,UAAU,MAAM;AAAA,KAAC;AAAA,IACjB,UAAU,MAAM;AAAA,KAAC;AAAA,IACjB,mBAAmB,MAAM;AAAA,KAAC;AAAA,IAC1B,kBAAkB,MAAM;AAAA,KAAC;AAAA,IACzB,kBAAkB,MAAM;AAAA,KAAC;AAAA,IACzB,mBAAmB,MAAM;AAAA,KAAC;AAAA,IAC1B,mBAAmB,MAAM;AAAA,KAAC;AAAA,IAC1B,cAAA;AAAA,IACA,mBAAA;AAAA,GACE,GAAA,OAAA,CAAA;AAEJ,EAAA,MAAM,QAAW,GAAA,IAAIG,aAAQ,CAAA,CAAA,EAAG,CAAC,CAAA,CAAA;AACjC,EAAA,MAAM,SAAY,GAAA,IAAIA,aAAQ,CAAA,CAAA,EAAG,CAAC,CAAA,CAAA;AAElC,EAAA,MAAM,SAAY,GAAA,YAAA,CAAa,EAAE,MAAA,EAAQ,CAAA,CAAA;AACzC,EAAA,MAAM,aAAa,SAAU,CAAA,QAAA,CAAA;AAE7B,EAAA,MAAM,GAAwB,GAAA;AAAA,IAC5B,QAAA;AAAA,IACA,SAAA;AAAA,IACA,UAAA;AAAA,IACA,gBAAA;AAAA,IACA,cAAA;AAAA,IACA,SAAW,EAAA,KAAA;AAAA,IACX,kBAAoB,EAAA,KAAA;AAAA,IACpB,YAAA;AAAA,IACA,eAAA;AAAA,IACA,SAAA;AAAA,GACF,CAAA;AAEA,EAAO,OAAA,GAAA,CAAA;AAEP,EAAA,SAAS,KAAQ,GAAA;AACf,IAAS,QAAA,CAAA,GAAA,CAAI,GAAG,CAAC,CAAA,CAAA;AACjB,IAAU,SAAA,CAAA,GAAA,CAAI,GAAG,CAAC,CAAA,CAAA;AAClB,IAAW,UAAA,CAAA,GAAA,CAAI,CAAG,EAAA,CAAA,EAAG,CAAC,CAAA,CAAA;AAAA,GACxB;AAEA,EAAA,SAAS,eAAe,KAAgC,EAAA;AACtD,IAAA,IAAI,CAAG,EAAA,CAAA,CAAA;AAEP,IAAA,IAAI,KAAM,CAAA,OAAA,IAAW,KAAM,CAAA,OAAA,CAAQ,SAAS,CAAG,EAAA;AAC7C,MAAiB,CAAA,GAAA,KAAA,CAAO,QAAQ,CAAG,CAAA,CAAA,OAAA,CAAA;AACnC,MAAiB,CAAA,GAAA,KAAA,CAAO,QAAQ,CAAG,CAAA,CAAA,OAAA,CAAA;AAAA,KAC9B,MAAA;AACL,MAAA,CAAA,GAAiB,KAAO,CAAA,OAAA,CAAA;AACxB,MAAA,CAAA,GAAiB,KAAO,CAAA,OAAA,CAAA;AAAA,KAC1B;AAEA,IAAM,MAAA,IAAA,GAAO,WAAW,qBAAsB,EAAA,CAAA;AAC9C,IAAS,QAAA,CAAA,CAAA,GAAI,IAAI,IAAK,CAAA,IAAA,CAAA;AACtB,IAAS,QAAA,CAAA,CAAA,GAAI,IAAI,IAAK,CAAA,GAAA,CAAA;AACtB,IAAA,SAAA,CAAU,CAAK,GAAA,QAAA,CAAS,CAAI,GAAA,IAAA,CAAK,QAAS,CAAI,GAAA,CAAA,CAAA;AAC9C,IAAA,SAAA,CAAU,IAAI,EAAE,QAAA,CAAS,CAAI,GAAA,IAAA,CAAK,UAAU,CAAI,GAAA,CAAA,CAAA;AAChD,IAAA,SAAA,CAAU,eAAe,SAAS,CAAA,CAAA;AAAA,GACpC;AAEA,EAAA,SAAS,SAAY,GAAA;AACnB,IAAA,MAAM,oBAAoB,mBAAoB,EAAA,CAAA;AAC9C,IAAA,IAAI,kBAAkB,MAAQ,EAAA;AAC5B,MAAA,MAAM,UAAa,GAAA,SAAA,CAAU,SAAU,CAAA,SAAA,EAAW,mBAAmB,kBAAkB,CAAA,CAAA;AACvF,MAAM,MAAA,UAAA,GAAyB,CAAC,GAAG,iBAAiB,CAAA,CAAA;AACpD,MAAA,MAAM,UAA2B,EAAC,CAAA;AAElC,MAAW,UAAA,CAAA,OAAA,CAAQ,CAAAC,UAAa,KAAA;AA7ItC,QAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AA8IQ,QAAM,MAAA,EAAE,QAAWA,GAAAA,UAAAA,CAAAA;AACnB,QAAM,MAAA,SAAA,GAAY,aAAa,MAAM,CAAA,CAAA;AAGrC,QAAA,IAAI,kBAAkBC,mBAAe,EAAA;AACnC,UAAI,IAAA,OAAA,CAAQ,OAAQ,CAAA,MAAM,CAAM,KAAA,CAAA,CAAA;AAAI,YAAA,OAAA;AACpC,UAAA,OAAA,CAAQ,KAAK,MAAM,CAAA,CAAA;AAAA,SACrB;AAEA,QAAI,IAAA,CAAC,MAAO,CAAA,QAAA,CAAS,IAAM,EAAA;AACzB,UAAA,MAAA,CAAO,SAAS,IAAO,GAAA,IAAA,CAAA;AACvB,UAAM,MAAA,SAAA,GAA4C,EAAE,IAAM,EAAA,aAAA,EAAe,MAAM,IAAM,EAAA,SAAA,EAAW,WAAAD,UAAU,EAAA,CAAA;AAC1G,UAAA,MAAM,UAA6C,GAAA,EAAE,GAAG,SAAA,EAAW,MAAM,cAAe,EAAA,CAAA;AACxF,UAAA,eAAA,CAAgB,SAAS,CAAA,CAAA;AACzB,UAAA,gBAAA,CAAiB,UAAU,CAAA,CAAA;AAC3B,UAAA,CAAA,EAAA,GAAA,SAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,SAAA,CAAW,kBAAX,IAA2B,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,SAAA,EAAA,SAAA,CAAA,CAAA;AAC3B,UAAA,CAAA,EAAA,GAAA,SAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,SAAA,CAAW,mBAAX,IAA4B,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,SAAA,EAAA,UAAA,CAAA,CAAA;AAAA,SAC9B;AAEA,QAAA,MAAM,YAA4C,EAAE,IAAA,EAAM,aAAe,EAAA,SAAA,EAAW,WAAAA,UAAU,EAAA,CAAA;AAC9F,QAAA,eAAA,CAAgB,SAAS,CAAA,CAAA;AACzB,QAAA,CAAA,EAAA,GAAA,SAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,SAAA,CAAW,kBAAX,IAA2B,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,SAAA,EAAA,SAAA,CAAA,CAAA;AAE3B,QAAA,UAAA,CAAW,MAAO,CAAA,UAAA,CAAW,OAAmB,CAAA,MAAO,GAAG,CAAC,CAAA,CAAA;AAAA,OAC5D,CAAA,CAAA;AAED,MAAA,UAAA,CAAW,QAAQ,CAAU,MAAA,KAAA;AAxKnC,QAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AAyKQ,QAAM,MAAA,SAAA,GAAY,aAAa,MAAM,CAAA,CAAA;AACrC,QAAI,IAAA,MAAA,CAAO,SAAS,IAAM,EAAA;AACxB,UAAA,MAAA,CAAO,SAAS,IAAO,GAAA,KAAA,CAAA;AACvB,UAAA,MAAM,YAA4C,EAAE,IAAA,EAAM,aAAe,EAAA,IAAA,EAAM,OAAO,SAAU,EAAA,CAAA;AAChG,UAAA,MAAM,UAA6C,GAAA,EAAE,GAAG,SAAA,EAAW,MAAM,cAAe,EAAA,CAAA;AACxF,UAAA,eAAA,CAAgB,SAAS,CAAA,CAAA;AACzB,UAAA,gBAAA,CAAiB,UAAU,CAAA,CAAA;AAC3B,UAAA,CAAA,EAAA,GAAA,SAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,SAAA,CAAW,kBAAX,IAA2B,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,SAAA,EAAA,SAAA,CAAA,CAAA;AAC3B,UAAA,CAAA,EAAA,GAAA,SAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,SAAA,CAAW,mBAAX,IAA4B,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,SAAA,EAAA,UAAA,CAAA,CAAA;AAAA,SAC9B;AAAA,OACD,CAAA,CAAA;AAAA,KACH;AAAA,GACF;AAEA,EAAA,SAAS,aAAa,KAAgC,EAAA;AACpD,IAAA,cAAA,CAAe,KAAK,CAAA,CAAA;AACpB,IAAA,OAAA,CAAQ,EAAE,IAAM,EAAA,cAAA,EAAgB,QAAU,EAAA,SAAA,EAAW,YAAY,CAAA,CAAA;AAAA,GACnE;AAEA,EAAA,SAAS,YAAY,KAAgC,EAAA;AACnD,IAAA,cAAA,CAAe,KAAK,CAAA,CAAA;AACpB,IAAA,MAAA,CAAO,EAAE,IAAM,EAAA,aAAA,EAAe,QAAU,EAAA,SAAA,EAAW,YAAY,CAAA,CAAA;AAC/D,IAAU,SAAA,EAAA,CAAA;AAAA,GACZ;AA2BA,EAAA,SAAS,aAAa,KAAgC,EAAA;AA3NxD,IAAA,IAAA,EAAA,CAAA;AA4NI,IAAA,cAAA,CAAe,KAAK,CAAA,CAAA;AACpB,IAAA,MAAM,oBAAoB,mBAAoB,EAAA,CAAA;AAC9C,IAAA,OAAA,CAAQ,IAAI,iBAAiB,CAAA,CAAA;AAC7B,IAAA,IAAI,kBAAkB,MAAQ,EAAA;AAC5B,MAAA,MAAM,UAAa,GAAA,SAAA,CAAU,SAAU,CAAA,SAAA,EAAW,mBAAmB,kBAAkB,CAAA,CAAA;AACvF,MAAMA,MAAAA,UAAAA,GAAY,kBAAkB,UAAU,CAAA,CAAA;AAE9C,MAAM,MAAA,EAAE,QAAWA,GAAAA,UAAAA,CAAAA;AACnB,MAAM,MAAA,SAAA,GAAY,aAAa,MAAM,CAAA,CAAA;AAErC,MAAA,IAAI,kBAAkBC,mBAAe,EAAA;AACnC,QAAA,OAAA;AAAA,OACF;AAEA,MAAA,MAAMC,SAAwC,EAAE,IAAA,EAAM,OAAS,EAAA,SAAA,EAAW,WAAAF,UAAU,EAAA,CAAA;AACpF,MAAA,gBAAA,CAAiBE,MAAK,CAAA,CAAA;AACtB,MAAA,CAAA,EAAA,GAAA,SAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,SAAA,CAAW,YAAX,IAAqBA,GAAAA,KAAAA,CAAAA,GAAAA,EAAAA,CAAAA,IAAAA,CAAAA,SAAAA,EAAAA,MAAAA,CAAAA,CAAAA;AAAA,KACvB;AACA,IAAA,OAAA,CAAQ,EAAE,IAAM,EAAA,OAAA,EAAS,QAAU,EAAA,SAAA,EAAW,YAAY,CAAA,CAAA;AAAA,GAC5D;AAEA,EAAA,SAAS,UAAU,KAAqB,EAAA;AACtC,IAAI,IAAA,CAAC,IAAI,kBAAoB,EAAA;AAE3B,MAAW,UAAA,CAAA,WAAA,CAAY,KAAK,CAAA,EAAG,GAAG,CAAA,CAAA;AAAA,KACpC;AACA,IAAA,IAAI,IAAI,kBAAoB,EAAA;AAC1B,MAAA,UAAA,CAAW,MAAM;AAAE,QAAA,GAAA,CAAI,kBAAqB,GAAA,KAAA,CAAA;AAAA,SAAS,GAAG,CAAA,CAAA;AAAA,KAC1D;AAAA,GACF;AAMA,EAAA,SAAS,YAAY,KAAmB,EAAA;AACtC,IAAA,OAAO,MAAM;AACX,MAAI,IAAA,CAAC,IAAI,kBAAoB,EAAA;AAE3B,QAAA,YAAA,CAAa,KAAK,CAAA,CAAA;AAAA,OAEpB;AAAA,KACF,CAAA;AAAA,GACF;AAEA,EAAA,SAAS,gBAAgB,KAAgC,EAAA;AACvD,IAAA,GAAA,CAAI,kBAAqB,GAAA,IAAA,CAAA;AACzB,IAAA,YAAA,CAAa,KAAK,CAAA,CAAA;AAClB,IAAA,mBAAA,IAAuB,mBAAoB,EAAA,CAAA;AAAA,GAC7C;AAEA,EAAA,SAAS,YAAe,GAAA;AACtB,IAAI,IAAA,UAAA;AAAY,MAAM,KAAA,EAAA,CAAA;AACtB,IAAQ,OAAA,CAAA,EAAE,IAAM,EAAA,cAAA,EAAgB,CAAA,CAAA;AAAA,GAClC;AAEA,EAAA,SAAS,kBAAkB,aAA6C,EAAA;AACtE,IAAA,MAAM,cAAiB,GAAA,aAAA,CAAc,IAAK,CAAA,CAAAF,UAAa,KAAA;AACrD,MAAA,MAAMG,UAASH,UAAU,CAAA,MAAA,CAAA;AAGzB,MAAA,OAAOG,QAAO,OAAYA,KAAAA,OAAAA,CAAO,QAAS,CAAA,UAAA,KAAe,SAASA,OAAkB,YAAAC,UAAA,CAAA,CAAA;AAAA,KACrF,CAAA,CAAA;AACD,IAAI,IAAA,MAAA,GAAU,cAAkB,IAAA,cAAA,CAAe,MAAW,IAAA,KAAA,CAAA,CAAA;AAC1D,IAAI,IAAA,UAAA,CAAA;AACJ,IAAA,IAAI,MAAQ,EAAA;AACV,MAAI,IAAA,MAAA,CAAO,QAAS,CAAA,UAAA,KAAe,KAAO,EAAA;AAGxC,QAAA,OAAA,CAAQ,GAAI,CAAA,CAAA,sBAAA,EAAyB,MAAO,CAAA,IAAA,CAAA,QAAA,EAAe,OAAO,IAAuB,CAAA,iBAAA,CAAA,CAAA,CAAA;AACzF,QAAS,MAAA,GAAA,KAAA,CAAA,CAAA;AAAA,OACX,MAAA,IAAW,kBAAkBH,mBAAe,EAAA;AAC1C,QAAA,UAAA,GAAc,cAAgC,CAAA,UAAA,CAAA;AAC9C,QAAI,IAAA,GAAA,CAAI,cAAkB,IAAA,GAAA,CAAI,cAAe,CAAA,IAAA,KAAS,MAAO,CAAA,IAAA,IAAQ,GAAI,CAAA,cAAA,CAAe,QAAS,CAAA,UAAA,KAAe,UAAY,EAAA;AAE1H,UAAS,MAAA,GAAA,KAAA,CAAA,CAAA;AAAA,SACX;AAAA,iBAES,GAAI,CAAA,cAAA,IAAkB,IAAI,cAAe,CAAA,IAAA,KAAS,OAAO,IAAM,EAAA;AAExE,QAAS,MAAA,GAAA,KAAA,CAAA,CAAA;AAAA,OACX;AAAA,KAUF;AACA,IAAA,IAAI,cAAgB,EAAA;AAClB,MAAA,MAAA,GACI,cAAe,CAAA;AAAA,QACf,MAAA;AAAA,QAAgB,uBAAyB,EAAA,UAAA;AAAA,QACzC,SAAW,EAAA,KAAA,CAAA;AAAA,OACZ,IACC,cAAe,EAAA,CAAA;AAAA,KACrB;AAEA,IAAQ,OAAA,cAAA,CAAA;AAAA,GACV;AAKA,EAAA,SAAS,cAAiB,GAAA;AACxB,IAAA,cAAA,IAAkB,cAAe,CAAA,EAAE,SAAW,EAAA,KAAA,CAAA,EAAW,CAAA,CAAA;AAAA,GAC3D;AAEA,EAAA,SAAS,aAAa,MAAkB,EAAA;AACtC,IAAA,IAAI,OAAO,QAAS,CAAA,SAAA;AAAW,MAAA,OAAO,OAAO,QAAS,CAAA,SAAA,CAAA;AAEtD,IAAA,IAAI,SAAS,MAAO,CAAA,MAAA,CAAA;AACpB,IAAA,OAAO,MAAQ,EAAA;AACb,MAAI,IAAA,MAAA,CAAO,SAAS,SAAW,EAAA;AAC7B,QAAA,OAAO,OAAO,QAAS,CAAA,SAAA,CAAA;AAAA,OACzB;AACA,MAAA,MAAA,GAAS,MAAO,CAAA,MAAA,CAAA;AAAA,KAClB;AAEA,IAAO,OAAA,KAAA,CAAA,CAAA;AAAA,GACT;AAEA,EAAA,SAAS,mBAAsB,GAAA;AAC7B,IAAI,IAAA,OAAO,qBAAqB,UAAY,EAAA;AAC1C,MAAA,OAAO,gBAAiB,EAAA,CAAA;AAAA,KAC1B;AAAO,MAAO,OAAA,gBAAA,CAAA;AAAA,GAChB;AAEA,EAAA,SAAS,YAAe,GAAA;AACtB,IAAW,UAAA,CAAA,gBAAA,CAAiB,cAAc,YAAY,CAAA,CAAA;AACtD,IAAW,UAAA,CAAA,gBAAA,CAAiB,aAAa,WAAW,CAAA,CAAA;AACpD,IAAW,UAAA,CAAA,gBAAA,CAAiB,cAAc,YAAY,CAAA,CAAA;AAEtD,IAAW,UAAA,CAAA,gBAAA,CAAiB,aAAa,SAAS,CAAA,CAAA;AAClD,IAAW,UAAA,CAAA,gBAAA,CAAiB,YAAY,eAAe,CAAA,CAAA;AACvD,IAAA,IAAI,KAAO,EAAA;AACT,MAAW,UAAA,CAAA,gBAAA,CAAiB,cAAc,YAAY,CAAA,CAAA;AACtD,MAAW,UAAA,CAAA,gBAAA,CAAiB,aAAa,WAAW,CAAA,CAAA;AACpD,MAAW,UAAA,CAAA,gBAAA,CAAiB,YAAY,YAAY,CAAA,CAAA;AAAA,KACtD;AACA,IAAA,GAAA,CAAI,SAAY,GAAA,IAAA,CAAA;AAAA,GAClB;AAEA,EAAA,SAAS,eAAkB,GAAA;AACzB,IAAW,UAAA,CAAA,mBAAA,CAAoB,cAAc,YAAY,CAAA,CAAA;AACzD,IAAW,UAAA,CAAA,mBAAA,CAAoB,aAAa,WAAW,CAAA,CAAA;AACvD,IAAW,UAAA,CAAA,mBAAA,CAAoB,cAAc,YAAY,CAAA,CAAA;AAEzD,IAAW,UAAA,CAAA,mBAAA,CAAoB,aAAa,SAAS,CAAA,CAAA;AACrD,IAAW,UAAA,CAAA,mBAAA,CAAoB,YAAY,eAAe,CAAA,CAAA;AAE1D,IAAW,UAAA,CAAA,mBAAA,CAAoB,cAAc,YAAY,CAAA,CAAA;AACzD,IAAW,UAAA,CAAA,mBAAA,CAAoB,aAAa,WAAW,CAAA,CAAA;AACvD,IAAW,UAAA,CAAA,mBAAA,CAAoB,YAAY,YAAY,CAAA,CAAA;AACvD,IAAA,GAAA,CAAI,SAAY,GAAA,KAAA,CAAA;AAAA,GAClB;AACF;;ACvUA,SAAwB,SAAS,MAA8C,EAAA;AAE7E,EAAA,MAAM,MAA+B,GAAA;AAAA,IACnC,SAAW,EAAA,IAAA;AAAA,IACX,KAAO,EAAA,KAAA;AAAA,IACP,SAAW,EAAA,IAAA;AAAA,IACX,SAAW,EAAA,KAAA;AAAA,IACX,OAAS,EAAA,KAAA;AAAA,IACT,MAAQ,EAAA,KAAA;AAAA,IACR,KAAO,EAAA,GAAA;AAAA,IACP,MAAQ,EAAA,GAAA;AAAA,GACV,CAAA;AAEA,EAAA,IAAI,MAAQ,EAAA;AACV,IAAO,MAAA,CAAA,OAAA,CAAQ,MAAM,CAAE,CAAA,OAAA,CAAQ,CAAC,CAAC,GAAA,EAAK,KAAK,CAAM,KAAA;AAC/C,MAAA,MAAA,CAAO,GAAO,CAAA,GAAA,KAAA,CAAA;AAAA,KACf,CAAA,CAAA;AAAA,GACH;AAGA,EAAA,MAAM,IAAsB,GAAA;AAAA,IAC1B,KAAO,EAAA,CAAA;AAAA,IAAG,MAAQ,EAAA,CAAA;AAAA,IAClB,MAAQ,EAAA,CAAA;AAAA,IAAG,OAAS,EAAA,CAAA;AAAA,IACpB,KAAO,EAAA,CAAA;AAAA,GACT,CAAA;AAEA,EAAA,MAAM,wBAAsC,EAAC,CAAA;AAE7C,EAAA,MAAM,mBAA+B,EAAC,CAAA;AAEtC,EAAA,MAAM,WAAW,cAAe,EAAA,CAAA;AAGhC,EAAA,MAAM,GAAsB,GAAA;AAAA,IAC1B,MAAA;AAAA,IACA,QAAA;AAAA,IACA,IAAA;AAAA,IACA,IAAA;AAAA,IACA,OAAA;AAAA,IACA,MAAA;AAAA,IACA,OAAA;AAAA,IACA,OAAA;AAAA,IACA,kBAAA;AAAA,IAAoB,qBAAA;AAAA,GACtB,CAAA;AAEA,EAAO,OAAA,GAAA,CAAA;AAKP,EAAA,SAAS,cAAgC,GAAA;AACvC,IAAA,MAAMI,YAAW,IAAIC,mBAAA,CAAc,EAAE,MAAA,EAAQ,OAAO,MAAQ,EAAA,SAAA,EAAW,MAAO,CAAA,SAAA,EAAW,OAAO,MAAO,CAAA,KAAA,EAAO,GAAG,MAAA,CAAO,QAAQ,CAAA,CAAA;AAChI,IAAAD,SAAAA,CAAS,YAAY,MAAO,CAAA,SAAA,CAAA;AAC5B,IAAOA,OAAAA,SAAAA,CAAAA;AAAA,GACT;AAKA,EAAA,SAAS,IAAO,GAAA;AACd,IAAI,IAAA,CAAC,IAAI,KAAO,EAAA;AACd,MAAA,OAAA,CAAQ,MAAM,eAAe,CAAA,CAAA;AAC7B,MAAO,OAAA,KAAA,CAAA;AAAA,KACT;AAEA,IAAI,IAAA,CAAC,IAAI,MAAQ,EAAA;AACf,MAAA,OAAA,CAAQ,MAAM,gBAAgB,CAAA,CAAA;AAC9B,MAAO,OAAA,KAAA,CAAA;AAAA,KACT;AAEA,IAAA,IAAI,OAAO,MAAQ,EAAA;AACjB,MAAS,QAAA,EAAA,CAAA;AACT,MAAO,MAAA,CAAA,gBAAA,CAAiB,UAAU,QAAQ,CAAA,CAAA;AAAA,KACjC,MAAA,IAAA,MAAA,CAAO,KAAS,IAAA,MAAA,CAAO,MAAQ,EAAA;AACxC,MAAQ,OAAA,CAAA,MAAA,CAAO,KAAO,EAAA,MAAA,CAAO,MAAM,CAAA,CAAA;AAAA,KACrC;AAEA,IAAY,WAAA,EAAA,CAAA;AAEZ,IAAA,IAAI,OAAO,SAAW,EAAA;AACpB,MAAA,MAAM,aAAa,IAAIE,8BAAA,CAAc,IAAI,MAAQ,EAAA,GAAA,CAAI,SAAS,UAAU,CAAA,CAAA;AACxE,MAAI,IAAA,MAAA,CAAO,qBAAqB,MAAQ,EAAA;AACtC,QAAO,MAAA,CAAA,OAAA,CAAQ,OAAO,SAAS,CAAA,CAAE,QAAQ,CAAC,CAAC,GAAK,EAAA,KAAK,CAAM,KAAA;AAEzD,UAAA,UAAA,CAAW,GAAO,CAAA,GAAA,KAAA,CAAA;AAAA,SACnB,CAAA,CAAA;AAAA,OACH;AACA,MAAW,UAAA,CAAA,iBAAA,CAAkB,SAAS,IAAI,CAAA,CAAA;AAC1C,MAAA,cAAA,CAAe,MAAM;AAAE,QAAA,UAAA,CAAW,MAAO,EAAA,CAAA;AAAA,OAAG,CAAA,CAAA;AAC5C,MAAA,GAAA,CAAI,UAAa,GAAA,UAAA,CAAA;AAAA,KACnB;AAEA,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAKA,EAAA,SAAS,WAAc,GAAA;AACrB,IAAA,IAAI,WAAsC,GAAA;AAAA,MACxC,QAAQ,GAAI,CAAA,MAAA;AAAA,MACZ,UAAA,EAAY,IAAI,QAAU,CAAA,UAAA;AAAA,MAC1B,gBAAA;AAAA,MACA,cAAgB,EAAA,KAAA,CAAA;AAAA,MAChB,cAAA;AAAA,MACA,mBAAA;AAAA,KACF,CAAA;AAEA,IAAA,IAAI,MAAO,CAAA,OAAA,IAAW,MAAO,CAAA,OAAA,YAAmB,MAAQ,EAAA;AACtD,MAAA,WAAA,GAAc,EAAE,GAAG,WAAa,EAAA,GAAG,OAAO,OAAQ,EAAA,CAAA;AAAA,KACpD;AAEA,IAAA,MAAM,OAAU,GAAA,GAAA,CAAI,OAAU,GAAA,UAAA,CAAW,WAAW,CAAA,CAAA;AACpD,IAAI,IAAA,MAAA,CAAO,OAAW,IAAA,gBAAA,CAAiB,MAAQ,EAAA;AAC7C,MAAA,OAAA,CAAQ,YAAa,EAAA,CAAA;AACrB,MAAI,IAAA,WAAA,CAAY,kBAAkB,OAAS,EAAA;AACzC,QAAA,cAAA,CAAe,QAAQ,SAAS,CAAA,CAAA;AAAA,OAClC;AAAA,KACF;AAAA,GACF;AAKA,EAAA,SAAS,eAAe,EAAgB,EAAA;AACtC,IAAA,qBAAA,CAAsB,KAAK,EAAE,CAAA,CAAA;AAAA,GAC/B;AAKA,EAAA,SAAS,MAAS,GAAA;AAEhB,IAAsB,qBAAA,CAAA,OAAA,CAAQ,CAAK,CAAA,KAAA,CAAA,EAAG,CAAA,CAAA;AACtC,IAAA,GAAA,CAAI,QAAU,CAAA,MAAA,CAAO,GAAI,CAAA,KAAA,EAAQ,IAAI,MAAO,CAAA,CAAA;AAAA,GAC9C;AAKA,EAAA,SAAS,OAAU,GAAA;AAEjB,IAAsB,qBAAA,CAAA,OAAA,CAAQ,CAAK,CAAA,KAAA,CAAA,EAAG,CAAA,CAAA;AACtC,IAAA,GAAA,CAAI,SAAU,MAAO,EAAA,CAAA;AAAA,GACvB;AAKA,EAAA,SAAS,mBAAmB,CAAa,EAAA;AACvC,IAAA,IAAI,gBAAiB,CAAA,OAAA,CAAQ,CAAC,CAAA,KAAM,CAAI,CAAA,EAAA;AACtC,MAAA,gBAAA,CAAiB,KAAK,CAAC,CAAA,CAAA;AAAA,KACzB;AAEA,IAAA,IAAI,GAAI,CAAA,OAAA,IAAW,CAAC,GAAA,CAAI,QAAQ,SAAW,EAAA;AACzC,MAAA,GAAA,CAAI,QAAQ,YAAa,EAAA,CAAA;AAAA,KAC3B;AAAA,GACF;AAKA,EAAA,SAAS,sBAAsB,CAAa,EAAA;AAC1C,IAAM,MAAA,CAAA,GAAI,gBAAiB,CAAA,OAAA,CAAQ,CAAC,CAAA,CAAA;AACpC,IAAA,IAAI,MAAM,CAAI,CAAA,EAAA;AACZ,MAAiB,gBAAA,CAAA,MAAA,CAAO,GAAG,CAAC,CAAA,CAAA;AAAA,KAC9B;AAEA,IAAA,IAAI,IAAI,OAAW,IAAA,CAAC,OAAO,OAAW,IAAA,gBAAA,CAAiB,WAAW,CAAG,EAAA;AACnE,MAAA,GAAA,CAAI,QAAQ,eAAgB,EAAA,CAAA;AAAA,KAC9B;AAAA,GACF;AAKA,EAAA,SAAS,OAAU,GAAA;AAEjB,IAAO,MAAA,CAAA,mBAAA,CAAoB,UAAU,QAAQ,CAAA,CAAA;AAC7C,IAAA,IAAI,GAAI,CAAA,OAAA;AAAS,MAAA,GAAA,CAAI,QAAQ,eAAgB,EAAA,CAAA;AAC7C,IAAA,IAAI,GAAI,CAAA,UAAA;AAAY,MAAA,GAAA,CAAI,WAAW,OAAQ,EAAA,CAAA;AAC3C,IAAA,IAAI,GAAI,CAAA,QAAA;AAAU,MAAA,GAAA,CAAI,SAAS,OAAQ,EAAA,CAAA;AAAA,GACzC;AAKA,EAAA,SAAS,QAAW,GAAA;AA/OtB,IAAA,IAAA,EAAA,CAAA;AAgPI,IAAI,IAAA,MAAA,CAAO,WAAW,QAAU,EAAA;AAC9B,MAAQ,OAAA,CAAA,MAAA,CAAO,UAAY,EAAA,MAAA,CAAO,WAAW,CAAA,CAAA;AAAA,KACxC,MAAA;AACL,MAAM,MAAA,GAAA,GAAM,GAAI,CAAA,QAAA,CAAU,UAAW,CAAA,UAAA,CAAA;AACrC,MAAI,IAAA,GAAA;AAAK,QAAQ,OAAA,CAAA,GAAA,CAAI,WAAa,EAAA,GAAA,CAAI,YAAY,CAAA,CAAA;AAAA,KACpD;AACA,IAAA,CAAA,EAAA,GAAA,MAAA,CAAO,aAAP,IAAkB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,MAAA,EAAA,IAAA,CAAA,CAAA;AAAA,GACpB;AAKA,EAAS,SAAA,OAAA,CAAQ,OAAe,MAAgB,EAAA;AAC9C,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AACb,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA,CAAA;AACd,IAAA,IAAA,CAAK,QAAQ,KAAQ,GAAA,MAAA,CAAA;AAErB,IAAA,GAAA,CAAI,QAAU,CAAA,OAAA,CAAQ,KAAO,EAAA,MAAA,EAAQ,KAAK,CAAA,CAAA;AAO1C,IAAA,MAAM,SAAkB,GAAI,CAAA,MAAA,CAAA;AAC5B,IAAI,IAAA,MAAA,CAAO,SAAS,mBAAqB,EAAA;AACvC,MAAA,MAAM,OAA8B,GAAA,MAAA,CAAA;AACpC,MAAA,OAAA,CAAQ,SAAS,IAAK,CAAA,KAAA,CAAA;AACtB,MAAA,OAAA,CAAQ,sBAAuB,EAAA,CAAA;AAAA,KACjC;AAEA,IAAI,IAAA,MAAA,CAAO,SAAS,oBAAsB,EAAA;AACxC,MAAA,MAAM,OAA+B,GAAA,MAAA,CAAA;AACrC,MAAK,IAAA,CAAA,MAAA,GAAS,OAAQ,CAAA,KAAA,GAAQ,OAAQ,CAAA,IAAA,CAAA;AACtC,MAAK,IAAA,CAAA,OAAA,GAAU,OAAQ,CAAA,GAAA,GAAM,OAAQ,CAAA,MAAA,CAAA;AAAA,KAChC,MAAA;AACL,MAAA,MAAM,QAAQ,aAAc,EAAA,CAAA;AAC5B,MAAA,IAAA,CAAK,SAAS,KAAM,CAAA,CAAA,CAAA,CAAA;AACpB,MAAA,IAAA,CAAK,UAAU,KAAM,CAAA,CAAA,CAAA,CAAA;AAAA,KACvB;AAAA,GACF;AAKA,EAAA,SAAS,aAAgB,GAAA;AACvB,IAAA,MAAM,SAA6B,GAAI,CAAA,MAAA,CAAA;AACvC,IAAA,MAAM,IAAQ,GAAA,MAAA,CAAO,GAAM,GAAA,IAAA,CAAK,EAAM,GAAA,GAAA,CAAA;AACtC,IAAM,MAAA,CAAA,GAAI,CAAI,GAAA,IAAA,CAAK,GAAI,CAAA,IAAA,GAAO,CAAC,CAAA,GAAI,IAAK,CAAA,GAAA,CAAI,MAAO,CAAA,QAAA,CAAS,CAAC,CAAA,CAAA;AAC7D,IAAM,MAAA,CAAA,GAAI,IAAI,MAAO,CAAA,MAAA,CAAA;AACrB,IAAO,OAAA,CAAC,GAAG,CAAC,CAAA,CAAA;AAAA,GACd;AAwBA,EAAA,SAAS,eAAe,CAAiC,EAAA;AA3T3D,IAAA,IAAA,EAAA,CAAA;AA4TI,IAAA,MAAM,EAAE,MAAA,EAAQ,uBAAyB,EAAA,SAAA,GAAY,QAAc,GAAA,CAAA,CAAA;AACnE,IAAA,OAAA,CAAQ,IAAI,mBAAqB,EAAA,EAAE,MAAQ,EAAA,uBAAA,EAAyB,WAAW,CAAA,CAAA;AAE/E,IAAI,IAAA,CAAA,EAAA,GAAA,GAAA,CAAI,OAAJ,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAa,cAAgB,EAAA;AAC/B,MAAM,MAAA,QAAA,GAAW,GAAI,CAAA,OAAA,CAAQ,cAAe,CAAA,QAAA,CAAA;AAC5C,MAAA,IAAI,SAAS,UAAc,IAAA,IAAA,IAAQ,QAAS,CAAA,cAAA,IAAkB,SAAS,UAAY,EAAA;AACjF,QAAA,GAAA,CAAI,KAAS,IAAA,GAAA,CAAI,KAAM,CAAA,MAAA,CAAO,SAAS,UAAU,CAAA,CAAA;AACjD,QAAM,MAAA,EAAA,GAAK,IAAI,OAAQ,CAAA,cAAA,CAAA;AACvB,QAAA,EAAA,CAAG,WAAY,CAAA,QAAA,CAAS,UAAY,EAAA,QAAA,CAAS,cAAc,CAAA,CAAA;AAC3D,QAAA,EAAA,CAAG,eAAe,WAAc,GAAA,IAAA,CAAA;AAChC,QAAA,EAAA,CAAG,YAAa,EAAA,CAAA;AAChB,QAAA,OAAO,QAAS,CAAA,UAAA,CAAA;AAChB,QAAA,OAAO,QAAS,CAAA,cAAA,CAAA;AAGhB,QAAI,IAAA,MAAA,KAAW,SAAS,UAAY,EAAA;AAClC,UAAS,QAAA,CAAA,UAAA,CAAW,SAAS,OAAQ,EAAA,CAAA;AACrC,UAAA,OAAO,QAAS,CAAA,UAAA,CAAA;AAChB,UAAA,GAAA,CAAI,QAAQ,cAAiB,GAAA,KAAA,CAAA,CAAA;AAI7B,UAAA,OAAA;AAAA,SACF;AACA,QAAS,QAAA,CAAA,UAAA,CAAW,SAAS,OAAQ,EAAA,CAAA;AACrC,QAAA,OAAO,QAAS,CAAA,UAAA,CAAA;AAAA,OAClB,MAAA,IAAW,SAAS,gBAAkB,EAAA;AACpC,QAAI,IAAA,GAAA,CAAI,OAAQ,CAAA,cAAA,CAAe,QAAU,EAAA;AAEvC,UAAM,MAAA,QAAA,GAAW,GAAI,CAAA,OAAA,CAAQ,cAAe,CAAA,QAAA,CAAA;AAC5C,UAAI,IAAA,KAAA,CAAM,OAAQ,CAAA,QAAQ,CAAG,EAAA;AAC3B,YAAA,QAAA,CAAS,OAAQ,CAAA,CAAA,CAAA,KAAK,CAAE,CAAA,OAAA,EAAS,CAAA,CAAA;AAAA,WACnC,MAAA,IAAW,oBAAoBC,cAAU,EAAA;AACvC,YAAA,QAAA,CAAS,OAAQ,EAAA,CAAA;AAAA,WACnB;AAAA,SACF;AACA,QAAI,GAAA,CAAA,OAAA,CAAQ,cAAe,CAAA,QAAA,GAAW,QAAS,CAAA,gBAAA,CAAA;AAC/C,QAAA,OAAO,QAAS,CAAA,gBAAA,CAAA;AAAA,OAClB;AACA,MAAA,GAAA,CAAI,QAAQ,cAAiB,GAAA,KAAA,CAAA,CAAA;AAAA,KAI/B;AACA,IAAA,IAAI,CAAC,GAAA,CAAI,KAAS,IAAA,CAAC,MAAQ,EAAA;AACzB,MAAA,OAAA;AAAA,KACF;AACA,IAAA,IAAI,MAAkB,YAAAP,mBAAA,IAAiB,uBAA2B,IAAA,IAAA,IAAQ,IAAI,OAAS,EAAA;AACrF,MAAA,MAAM,EAAK,GAAA,MAAA,CAAA;AACX,MAAM,MAAA,cAAA,GAAiB,IAAIQ,aAAQ,EAAA,CAAA;AACnC,MAAM,MAAA,UAAA,GAAa,IAAIA,aAAQ,EAAA,CAAA;AAC/B,MAAA,UAAA,CAAW,IAAI,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAG,CAAC,CAAA,CAAA;AAC7D,MAAG,EAAA,CAAA,WAAA,CAAY,yBAAyB,cAAc,CAAA,CAAA;AACtD,MAAA,GAAA,CAAI,QAAQ,cAAiB,GAAA,MAAA,CAAA;AAS7B,MAAA,MAAM,cAAiB,GAAA,wBAAA,CAAyB,MAAQ,EAAA,EAAE,WAAW,CAAA,CAAA;AACrE,MAAA,IAAI,cAAgB,EAAA;AAElB,QAAA,MAAM,aAAa,IAAIL,UAAA,CAAK,GAAG,QAAS,CAAA,KAAA,IAAS,cAAc,CAAA,CAAA;AAC/D,QAAA,UAAA,CAAW,YAAa,CAAA,MAAA,CAAO,WAAY,CAAA,QAAA,CAAS,cAAc,CAAC,CAAA,CAAA;AACnE,QAAA,UAAA,CAAW,sBAAyB,GAAA,IAAA,CAAA;AACpC,QAAA,UAAA,CAAW,IAAO,GAAA,8BAAA,CAAA;AAElB,QAAM,MAAA,MAAA,GAAS,eAAe,KAAM,EAAA,CAAA;AACpC,QAAO,MAAA,CAAA,gBAAA,CAAiB,gBAAgB,UAAU,CAAA,CAAA;AAClD,QAAG,EAAA,CAAA,WAAA,CAAY,yBAAyB,MAAM,CAAA,CAAA;AAC9C,QAAA,EAAA,CAAG,eAAe,WAAc,GAAA,IAAA,CAAA;AAChC,QAAA,EAAA,CAAG,YAAa,EAAA,CAAA;AAChB,QAAI,GAAA,CAAA,OAAA,CAAQ,cAAe,CAAA,QAAA,CAAS,UAAa,GAAA,uBAAA,CAAA;AACjD,QAAI,GAAA,CAAA,OAAA,CAAQ,cAAe,CAAA,QAAA,CAAS,cAAiB,GAAA,cAAA,CAAA;AACrD,QAAI,GAAA,CAAA,OAAA,CAAQ,cAAe,CAAA,QAAA,CAAS,UAAa,GAAA,UAAA,CAAA;AACjD,QAAI,GAAA,CAAA,KAAA,CAAM,IAAI,UAAU,CAAA,CAAA;AAAA,OAC1B;AAAA,KACK,MAAA;AAEL,MAAA,MAAM,cAAiB,GAAA,wBAAA,CAAyB,MAAgB,EAAA,EAAE,WAAW,CAAA,CAAA;AAC7E,MAAA,IAAI,cAAgB,EAAA;AAClB,QAAA,GAAA,CAAI,QAAS,cAAiB,GAAA,MAAA,CAAA;AAC9B,QAAA,GAAA,CAAI,QAAS,cAAe,CAAA,QAAA,CAAS,gBAAmB,GAAA,GAAA,CAAI,QAAS,cAAe,CAAA,QAAA,CAAA;AACpF,QAAI,GAAA,CAAA,OAAA,CAAS,eAAe,QAAW,GAAA,cAAA,CAAA;AAAA,OAIzC;AAAA,KACF;AAAA,GACF;AAEA,EAAA,SAAS,wBAAyB,CAAA,IAAA,EAAY,OAI1C,GAAA,EAAuC,EAAA;AACzC,IAAA,IAAI,CAAC,IAAA,IAAQ,CAAC,IAAA,CAAK,QAAU,EAAA;AAC3B,MAAO,OAAA,KAAA,CAAA,CAAA;AAAA,KACT;AACA,IAAA,MAAM,MAAM,IAAK,CAAA,QAAA,CAAA;AACjB,IAAA,IAAI,MAAM,OAAQ,CAAA,GAAG,CAAK,IAAA,GAAA,CAAI,SAAS,CAAG,EAAA;AACxC,MAAA,MAAM,eAA2B,EAAC,CAAA;AAClC,MAAA,GAAA,CAAI,QAAQ,CAAK,CAAA,KAAA;AACf,QAAA,YAAA,CAAa,IAAK,CAAA,uBAAA,CAAwB,CAAG,EAAA,OAAO,CAAC,CAAA,CAAA;AAAA,OACtD,CAAA,CAAA;AACD,MAAO,OAAA,YAAA,CAAA;AAAA,KACT,MAAA,IAAW,eAAeI,cAAU,EAAA;AAClC,MAAO,OAAA,uBAAA,CAAwB,KAAK,OAAO,CAAA,CAAA;AAAA,KACtC,MAAA;AACL,MAAQ,OAAA,CAAA,IAAA,CAAK,qBAAqB,GAAK,CAAA,CAAA,CAAA,CAAA;AAAA,KACzC;AACA,IAAO,OAAA,KAAA,CAAA,CAAA;AAAA,GACT;AAEA,EAAA,SAAS,uBAAwB,CAAA,QAAA,EAAoB,OAIjD,GAAA,EAAI,EAAA;AACN,IAAM,MAAA,EAAE,SAAY,GAAA,KAAA,CAAA,EAAW,cAAiB,GAAA,IAAIE,YAAM,QAAQ,CAAA,EAAG,OAAU,GAAA,GAAA,EAAQ,GAAA,OAAA,CAAA;AAGvF,IAAM,MAAA,GAAA,GAAM,SAAS,KAAM,EAAA,CAAA;AAC3B,IAAA,IAAI,eAAeC,0BAAsB,EAAA;AACvC,MAAI,GAAA,CAAA,QAAA,CAAS,IAAI,cAAc,CAAA,CAAA;AAC/B,MAAI,GAAA,CAAA,KAAA,CAAM,IAAI,cAAc,CAAA,CAAA;AAAA,KAC9B,MAAA,IAAW,eAAeC,uBAAmB,EAAA;AAC3C,MAAI,GAAA,CAAA,QAAA,CAAS,IAAI,cAAc,CAAA,CAAA;AAC/B,MAAI,GAAA,CAAA,KAAA,CAAM,IAAI,cAAc,CAAA,CAAA;AAAA,KAC9B,MAAA,IAAW,eAAeC,uBAAmB,EAAA;AAC3C,MAAI,GAAA,CAAA,KAAA,CAAM,IAAI,cAAc,CAAA,CAAA;AAAA,KAC9B,MAAA,IAAW,eAAeC,uBAAmB,EAAA;AAC3C,MAAI,GAAA,CAAA,KAAA,CAAM,IAAI,cAAc,CAAA,CAAA;AAAA,KAC9B,MAAA,IAAW,eAAeC,yBAAqB,EAAA;AAC7C,MAAI,GAAA,CAAA,KAAA,CAAM,IAAI,cAAc,CAAA,CAAA;AAAA,KACvB,MAAA;AACL,MAAA,OAAA,CAAQ,KAAM,CAAA,wBAAA,GAAA,CAA4B,OAAO,GAAA,EAAK,UAAU,CAAA,CAAA;AAAA,KAClE;AAEA,IAAA,GAAA,CAAI,OAAU,GAAA,OAAA,CAAA;AACd,IAAA,GAAA,CAAI,WAAc,GAAA,IAAA,CAAA;AAClB,IAAA,IAAI,cAAc,KAAW,CAAA,EAAA;AAE3B,MAAA,GAAA,CAAI,SAAY,GAAA,KAAA,CAAA;AAEhB,MAAA,GAAA,CAAI,IAAO,GAAAC,gBAAA,CAAA;AAAA,KACb;AACA,IAAO,OAAA,GAAA,CAAA;AAAA,GACT;AAKA,EAAA,SAAS,aAAa,OAAqB,EAAA;AACzC,IAAA,IAAI,CAAC,OAAW,IAAA,OAAA,CAAQ,WAAW,CAAK,IAAA,CAAC,IAAI,MAAQ,EAAA;AACnD,MAAA,OAAA;AAAA,KACF;AACA,IAAM,MAAA,GAAA,GAAM,IAAIpB,aAAQ,EAAA,CAAA;AACxB,IAAM,MAAA,IAAA,GAAO,IAAIA,aAAQ,EAAA,CAAA;AACzB,IAAA,aAAA,CAAc,0BAA2B,CAAA,OAAA,EAAS,GAAI,CAAA,MAAA,EAAQ,KAAK,IAAI,CAAA,CAAA;AACvE,IAAA,KAAA,CAAM,KAAK,IAAI,CAAA,CAAA;AAAA,GACjB;AAKA,EAAA,SAAS,YAAY,MAAkB,EAAA;AACrC,IAAa,YAAA,CAAA,CAAC,MAAM,CAAC,CAAA,CAAA;AAAA,GACvB;AAKA,EAAA,SAAS,mBAAsB,GAAA;AA5ejC,IAAA,IAAA,EAAA,CAAA;AA6eI,IAAA,IAAI,EAAC,CAAA,EAAA,GAAA,GAAA,CAAI,OAAJ,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAa,cAAgB,CAAA,EAAA;AAChC,MAAA,OAAA;AAAA,KACF;AACA,IAAI,IAAA,IAAA,GAAO,IAAI,OAAQ,CAAA,cAAA,CAAA;AAEvB,IAAA,IAAI,IAAgB,YAAAK,mBAAA,IAAiB,IAAK,CAAA,QAAA,CAAS,UAAY,EAAA;AAC7D,MAAA,IAAA,GAAO,KAAK,QAAS,CAAA,UAAA,CAAA;AAAA,KACvB;AACA,IAAA,WAAA,CAAY,IAAI,CAAA,CAAA;AAAA,GAClB;AAMA,EAAS,SAAA,KAAA,CAAM,QAAmB,EAAA,MAAA,EAAiB,kBAAiC,EAAA;AAClF,IAAA,MAAM,YAAY,MAA0D;AAC1E,MAAI,IAAA,GAAA,CAAI,MAAQ,CAAA,IAAA,KAAS,mBAAqB,EAAA;AAC5C,QAAA,MAAMgB,UAA6B,GAAI,CAAA,MAAA,CAAA;AACvC,QAAOA,OAAAA,OAAAA,CAAAA;AAAA,OACT;AACA,MAAI,IAAA,GAAA,CAAI,MAAQ,CAAA,IAAA,KAAS,oBAAsB,EAAA;AAC7C,QAAA,MAAMA,UAA8B,GAAI,CAAA,MAAA,CAAA;AACxC,QAAOA,OAAAA,OAAAA,CAAAA;AAAA,OACT;AAAA,KACF,CAAA;AAEA,IAAA,MAAM,SAAS,SAAU,EAAA,CAAA;AACzB,IAAA,MAAM,WAAW,GAAI,CAAA,UAAA,CAAA;AACrB,IAAI,IAAA,CAAC,MAAU,IAAA,CAAC,QAAU,EAAA;AACxB,MAAA,OAAA;AAAA,KACF;AACA,IAAI,IAAA,QAAA,CAAS,MAAO,CAAA,MAAM,CAAG,EAAA;AAC3B,MAAA,OAAA,CAAQ,MAAM,2DAA2D,CAAA,CAAA;AACzE,MAAA,OAAA;AAAA,KACF,MAAA,IAAW,KAAM,CAAA,QAAA,CAAS,CAAC,CAAA,IAAK,MAAM,QAAS,CAAA,CAAC,CAAK,IAAA,KAAA,CAAM,QAAS,CAAA,CAAC,KAAK,KAAM,CAAA,MAAA,CAAO,CAAC,CAAA,IAAK,KAAM,CAAA,MAAA,CAAO,CAAC,CAAK,IAAA,KAAA,CAAM,MAAO,CAAA,CAAC,CAAG,EAAA;AAC/H,MAAA,OAAA,CAAQ,MAAM,wCAAwC,CAAA,CAAA;AACtD,MAAA,OAAA;AAAA,KACF;AAGA,IAAM,MAAA,QAAA,GAAW,QAAS,CAAA,UAAA,CAAW,MAAM,CAAA,CAAA;AAC3C,IAAI,IAAA,QAAA,GAAW,OAAO,IAAM,EAAA;AAE1B,MAAW,QAAA,GAAA,QAAA,CAAS,KAAM,EAAA,CAAE,GAAI,CAAA,MAAM,CAAE,CAAA,SAAA,EAAY,CAAA,cAAA,CAAe,MAAO,CAAA,IAAA,GAAO,GAAG,CAAA,CAAA;AACpF,MAAA,OAAA,CAAQ,KAAK,yDAAyD,CAAA,CAAA;AAAA,KACxE,MAAA,IAAW,QAAW,GAAA,MAAA,CAAO,GAAK,EAAA;AAEhC,MAAW,QAAA,GAAA,QAAA,CAAS,KAAM,EAAA,CAAE,GAAI,CAAA,MAAM,CAAE,CAAA,SAAA,EAAY,CAAA,cAAA,CAAe,MAAO,CAAA,GAAA,GAAM,GAAG,CAAA,CAAA;AACnF,MAAA,OAAA,CAAQ,KAAK,uDAAuD,CAAA,CAAA;AAAA,KACtE;AAEA,IAAM,MAAA,MAAA,GAAS,CAAC,CAAA,EAAaC,EAAgB,KAAA;AAC3C,MAAAA,EAAAA,IAAK,MAAO,CAAA,MAAA,CAAOA,EAAC,CAAA,CAAA;AACpB,MAAK,CAAA,IAAA,MAAA,CAAO,SAAS,GAAI,CAAA,CAAA,CAAE,GAAG,CAAE,CAAA,CAAA,EAAG,EAAE,CAAC,CAAA,CAAA;AACtC,MAAAA,EAAAA,IAAK,SAAS,MAAO,CAAA,GAAA,CAAIA,GAAE,CAAGA,EAAAA,EAAAA,CAAE,CAAGA,EAAAA,EAAAA,CAAE,CAAC,CAAA,CAAA;AACtC,MAAA,QAAA,CAAS,MAAO,EAAA,CAAA;AAAA,KAElB,CAAA;AAKA,IAAM,MAAA,CAAA,GAAI,QAAS,CAAA,MAAA,CAAO,KAAM,EAAA,CAAA;AAChC,IAAA,MAAM,MAAS,GAAA,IAAIC,gBAAM,CAAA,KAAA,CAAM,CAAC,CAAA,CAAA;AAChC,IAAO,MAAA,CAAA,EAAA,CAAG,QAAQ,GAAG,CAAA,CAAA;AACrB,IAAA,MAAA,CAAO,MAAO,CAAAA,gBAAA,CAAM,MAAO,CAAA,UAAA,CAAW,KAAK,CAAA,CAAA;AAC3C,IAAA,MAAA,CAAO,SAAS,MAAM;AACpB,MAAA,MAAA,CAAO,QAAW,CAAC,CAAA,CAAA;AAAA,KACpB,CAAA,CAAA;AACD,IAAA,MAAA,CAAO,WAAW,MAAM;AACtB,MAAM,MAAA,CAAA,GAAI,MAAO,CAAA,QAAA,CAAS,KAAM,EAAA,CAAA;AAChC,MAAA,MAAM,MAAS,GAAA,IAAIA,gBAAM,CAAA,KAAA,CAAM,CAAC,CAAA,CAAA;AAChC,MAAO,MAAA,CAAA,EAAA,CAAG,UAAU,IAAI,CAAA,CAAA;AACxB,MAAA,MAAA,CAAO,MAAO,CAAAA,gBAAA,CAAM,MAAO,CAAA,UAAA,CAAW,KAAK,CAAA,CAAA;AAC3C,MAAA,MAAA,CAAO,SAAS,MAAM;AACpB,QAAA,MAAA,CAAO,GAAG,MAAM,CAAA,CAAA;AAAA,OACjB,CAAA,CAAA;AACD,MAAA,MAAA,CAAO,WAAW,MAAM;AACtB,QAAA,MAAA,CAAO,GAAG,MAAM,CAAA,CAAA;AAChB,QAAA,kBAAA,IAAsB,kBAAmB,EAAA,CAAA;AAAA,OAC1C,CAAA,CAAA;AACD,MAAA,GAAA,CAAI,KAAQ,GAAA,MAAA,CAAA;AACZ,MAAA,MAAA,CAAO,KAAM,EAAA,CAAA;AAAA,KACd,CAAA,CAAA;AACD,IAAA,GAAA,CAAI,KAAQ,GAAA,MAAA,CAAA;AACZ,IAAA,MAAA,CAAO,KAAM,EAAA,CAAA;AAAA,GACf;AACF;;ACrea,MAAA,oBAAA,GAA8D,OAAO,UAAU,EAAA;AAE5F,eAAeC,mBAAgB,CAAA;AAAA,EAC7B,IAAM,EAAA,UAAA;AAAA,EACN,KAAO,EAAA;AAAA,IACL,QAAQ,EAAE,IAAA,EAAM,QAA6C,OAAS,EAAA,OAAO,EAAI,CAAA,EAAA;AAAA,IACjF,SAAW,EAAA,OAAA;AAAA,IACX,KAAO,EAAA,OAAA;AAAA,IACP,SAAW,EAAA,EAAE,IAAM,EAAA,OAAA,EAAS,SAAS,IAAK,EAAA;AAAA,IAC1C,SAAA,EAAW,EAAE,IAAM,EAAA,CAAC,SAAS,MAAM,CAAA,EAAkD,SAAS,KAAM,EAAA;AAAA,IACpG,OAAA,EAAS,EAAE,IAAM,EAAA,CAAC,SAAS,MAAM,CAAA,EAAuD,SAAS,KAAM,EAAA;AAAA,IACvG,MAAA,EAAQ,EAAE,IAAM,EAAA,CAAC,SAAS,MAAM,CAAA,EAAiC,SAAS,KAAM,EAAA;AAAA,IAChF,MAAQ,EAAA,OAAA;AAAA,IACR,KAAO,EAAA,MAAA;AAAA,IACP,MAAQ,EAAA,MAAA;AAAA,IACR,UAAY,EAAA,MAAA;AAAA,IACZ,EAAI,EAAA,OAAA;AAAA,IACJ,OAAO,EAAE,IAAA,EAAM,QAAQ,OAAS,EAAA,OAAO,EAAI,CAAA,EAAA;AAAA,IAC3C,OAAS,EAAA,QAAA;AAAA,GACX;AAAA,EACA,YAAc,EAAA,KAAA;AAAA,EACd,KAAM,CAAA,KAAA,EAAO,EAAE,KAAA,EAAiC,EAAA;AAC9C,IAAA,MAAM,gBAAoC,EAAC,CAAA;AAC3C,IAAA,MAAM,mBAA0C,EAAC,CAAA;AACjD,IAAA,MAAM,wBAA8C,EAAC,CAAA;AACrD,IAAA,MAAM,uBAA6C,EAAC,CAAA;AACpD,IAAA,MAAM,kBAAwC,EAAC,CAAA;AAE/C,IAAM,MAAA,MAAA,GAAS,QAAS,CAAA,aAAA,CAAc,QAAQ,CAAA,CAAA;AAC9C,IAAO,MAAA,CAAA,OAAA,CAAQ,KAAK,CAAE,CAAA,OAAA,CAAQ,CAAC,CAAC,GAAA,EAAK,KAAK,CAAM,KAAA;AAC9C,MAAM,MAAA,OAAA,GAAU,GAAI,CAAA,KAAA,CAAM,sBAAsB,CAAA,CAAA;AAChD,MAAA,IAAI,OAAS,EAAA;AACX,QAAA,MAAA,CAAO,gBAAiB,CAAA,OAAA,CAAQ,CAAG,CAAA,CAAA,WAAA,IAAe,KAAoB,CAAA,CAAA;AAAA,OACjE,MAAA;AACL,QAAO,MAAA,CAAA,YAAA,CAAa,KAAK,KAAe,CAAA,CAAA;AAAA,OAC1C;AAAA,KACD,CAAA,CAAA;AAED,IAAA,MAAM,MAA+B,GAAA;AAAA,MACnC,MAAA;AAAA,MACA,QAAQ,KAAM,CAAA,MAAA;AAAA,MACd,WAAW,KAAM,CAAA,SAAA;AAAA,MACjB,OAAO,KAAM,CAAA,KAAA;AAAA,MACb,WAAW,KAAM,CAAA,SAAA;AAAA,MACjB,WAAW,KAAM,CAAA,SAAA;AAAA,MACjB,SAAS,KAAM,CAAA,OAAA;AAAA,MACf,QAAQ,KAAM,CAAA,MAAA;AAAA,KAChB,CAAA;AAEA,IAAA,IAAI,KAAM,CAAA,KAAA;AAAO,MAAO,MAAA,CAAA,KAAA,GAAQ,QAAS,CAAA,KAAA,CAAM,KAAK,CAAA,CAAA;AACpD,IAAA,IAAI,KAAM,CAAA,MAAA;AAAQ,MAAO,MAAA,CAAA,MAAA,GAAS,QAAS,CAAA,KAAA,CAAM,MAAM,CAAA,CAAA;AAEvD,IAAM,MAAA,KAAA,GAAQ,SAAS,MAAM,CAAA,CAAA;AAC7B,IAAe,cAAA,CAAA,KAAA,EAAO,OAAS,EAAA,KAAA,CAAM,QAAQ,CAAA,CAAA;AAE7C,IAAAC,eAAA,CAAY,MAAM;AAChB,MAAA,IAAI,KAAM,CAAA,UAAA;AAAY,QAAM,KAAA,CAAA,QAAA,CAAS,aAAc,CAAA,KAAA,CAAM,UAAU,CAAA,CAAA;AAAA,KACpE,CAAA,CAAA;AAED,IAAA,MAAM,WAAuB,MAAM;AAAA,KAAC,CAAA;AAEpC,IAAO,OAAA;AAAA,MACL,MAAA;AAAA,MACA,KAAA;AAAA,MACA,UAAU,KAAM,CAAA,QAAA;AAAA,MAChB,MAAM,KAAM,CAAA,IAAA;AAAA,MACZ,QAAA;AAAA,MACA,GAAK,EAAA,IAAA;AAAA,MACL,aAAA;AAAA,MACA,gBAAA;AAAA,MACA,qBAAA;AAAA,MACA,oBAAA;AAAA,MACA,eAAA;AAAA,KACF,CAAA;AAAA,GACF;AAAA,EACA,QAAU,EAAA;AAAA,IACR,MAAQ,EAAA;AAAA,MACN,KAAK,WAA+B;AAAE,QAAA,OAAO,KAAK,KAAM,CAAA,MAAA,CAAA;AAAA,OAAO;AAAA,MAC/D,GAAA,EAAK,SAAS,MAAsB,EAAA;AAAE,QAAA,IAAA,CAAK,MAAM,MAAS,GAAA,MAAA,CAAA;AAAA,OAAO;AAAA,KACnE;AAAA,IACA,KAAO,EAAA;AAAA,MACL,KAAK,WAA8B;AAAE,QAAA,OAAO,KAAK,KAAM,CAAA,KAAA,CAAA;AAAA,OAAM;AAAA,MAC7D,GAAA,EAAK,SAAS,KAAoB,EAAA;AAAE,QAAA,IAAA,CAAK,MAAM,KAAQ,GAAA,KAAA,CAAA;AAAA,OAAM;AAAA,KAC/D;AAAA,IACA,QAAU,EAAA;AAAA,MACR,KAAK,WAAuC;AAAE,QAAA,OAAO,KAAK,KAAM,CAAA,QAAA,CAAA;AAAA,OAAS;AAAA,MACzE,GAAA,EAAK,SAAS,QAAgC,EAAA;AAAE,QAAA,IAAA,CAAK,MAAM,QAAW,GAAA,QAAA,CAAA;AAAA,OAAS;AAAA,KACjF;AAAA,GACF;AAAA,EACA,OAAU,GAAA;AACR,IAAO,OAAA;AAAA,MACL,CAAC,oBAAiC,GAAA,IAAA;AAAA,KACpC,CAAA;AAAA,GACF;AAAA,EACA,OAAU,GAAA;AA9LZ,IAAA,IAAA,EAAA,CAAA;AAgMI,IAAA,IAAA,CAAK,IAAI,UAAW,CAAA,YAAA,CAAa,IAAK,CAAA,MAAA,EAAQ,KAAK,GAAG,CAAA,CAAA;AAEtD,IAAI,IAAA,IAAA,CAAK,KAAM,CAAA,IAAA,EAAQ,EAAA;AACrB,MAAI,IAAA,IAAA,CAAK,MAAM,OAAS,EAAA;AACtB,QAAK,IAAA,CAAA,QAAA,GAAW,KAAK,KAAM,CAAA,OAAA,CAAA;AAAA,OAC7B;AAGA,MAAA,IAAA,CAAK,KAAM,CAAA,MAAA,CAAO,QAAW,GAAA,CAAC,IAAS,KAAA;AACrC,QAAK,IAAA,CAAA,eAAA,CAAgB,OAAQ,CAAA,CAAA,CAAA,KAAK,CAAE,CAAA,EAAE,IAAM,EAAA,QAAA,EAAU,QAAU,EAAA,IAAA,EAAM,IAAK,EAAC,CAAC,CAAA,CAAA;AAAA,OAC/E,CAAA;AAEA,MAAA,IAAI,KAAK,MAAQ,EAAA;AACf,QAAK,IAAA,CAAA,QAAA,CAAS,UAAU,OAAU,GAAA,IAAA,CAAA;AAAA,OACpC;AAEA,MAAK,IAAA,CAAA,QAAA,GAAW,KAAK,KAAM,CAAA,QAAA,GAAW,KAAK,KAAM,CAAA,OAAA,GAAU,KAAK,KAAM,CAAA,MAAA,CAAA;AAEtE,MAAK,IAAA,CAAA,aAAA,CAAc,OAAQ,CAAA,CAAA,CAAA,KAAK,CAAE,CAAA,EAAE,MAAM,MAAQ,EAAA,QAAA,EAAU,IAAK,EAAC,CAAC,CAAA,CAAA;AACnE,MAAA,CAAA,EAAA,GAAA,IAAA,CAAK,YAAL,IAAe,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,IAAA,EAAA,IAAA,CAAA,CAAA;AAEf,MAAA,IAAI,KAAK,EAAI,EAAA;AACX,QAAK,IAAA,CAAA,QAAA,CAAS,GAAG,OAAU,GAAA,IAAA,CAAA;AAC3B,QAAK,IAAA,CAAA,QAAA,CAAS,gBAAiB,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAAA,OACrC,MAAA;AACL,QAAA,qBAAA,CAAsB,KAAK,UAAU,CAAA,CAAA;AAAA,OACvC;AAAA,KACF;AAEA,IAAK,IAAA,CAAA,gBAAA,CAAiB,OAAQ,CAAA,CAAA,CAAA,KAAK,CAAE,CAAA,EAAE,MAAM,SAAW,EAAA,QAAA,EAAU,IAAK,EAAC,CAAC,CAAA,CAAA;AAAA,GAC3E;AAAA,EACA,aAAgB,GAAA;AACd,IAAA,IAAA,CAAK,OAAO,MAAO,EAAA,CAAA;AACnB,IAAA,IAAA,CAAK,wBAAwB,EAAC,CAAA;AAC9B,IAAA,IAAA,CAAK,uBAAuB,EAAC,CAAA;AAC7B,IAAA,IAAA,CAAK,GAAM,GAAA,KAAA,CAAA;AACX,IAAA,IAAA,CAAK,MAAM,OAAQ,EAAA,CAAA;AAAA,GACrB;AAAA,EACA,OAAS,EAAA;AAAA,IACP,OAAO,EAAsB,EAAA;AAAE,MAAK,IAAA,CAAA,WAAA,CAAY,QAAQ,EAAE,CAAA,CAAA;AAAA,KAAE;AAAA,IAC5D,UAAU,EAAyB,EAAA;AAAE,MAAK,IAAA,CAAA,WAAA,CAAY,WAAW,EAAE,CAAA,CAAA;AAAA,KAAE;AAAA,IACrE,eAAe,EAAwB,EAAA;AAAE,MAAK,IAAA,CAAA,WAAA,CAAY,gBAAgB,EAAE,CAAA,CAAA;AAAA,KAAE;AAAA,IAC9E,gBAAgB,EAAwB,EAAA;AAAE,MAAK,IAAA,CAAA,cAAA,CAAe,gBAAgB,EAAE,CAAA,CAAA;AAAA,KAAE;AAAA,IAClF,cAAc,EAAwB,EAAA;AAAE,MAAK,IAAA,CAAA,WAAA,CAAY,eAAe,EAAE,CAAA,CAAA;AAAA,KAAE;AAAA,IAC5E,eAAe,EAAwB,EAAA;AAAE,MAAK,IAAA,CAAA,cAAA,CAAe,eAAe,EAAE,CAAA,CAAA;AAAA,KAAE;AAAA,IAChF,SAAS,EAAwB,EAAA;AAAE,MAAK,IAAA,CAAA,WAAA,CAAY,UAAU,EAAE,CAAA,CAAA;AAAA,KAAE;AAAA,IAClE,UAAU,EAAwB,EAAA;AAAE,MAAK,IAAA,CAAA,cAAA,CAAe,UAAU,EAAE,CAAA,CAAA;AAAA,KAAE;AAAA,IAEtE,WAAA,CAAY,MAAc,EAAuB,EAAA;AAC/C,MAAM,MAAA,SAAA,GAAY,IAAK,CAAA,YAAA,CAAa,IAAI,CAAA,CAAA;AACxC,MAAA,SAAA,CAAU,KAAK,EAAE,CAAA,CAAA;AAAA,KACnB;AAAA,IAEA,cAAA,CAAe,MAAc,EAAuB,EAAA;AAClD,MAAM,MAAA,SAAA,GAAY,IAAK,CAAA,YAAA,CAAa,IAAI,CAAA,CAAA;AACxC,MAAM,MAAA,KAAA,GAAQ,SAAU,CAAA,OAAA,CAAQ,EAAE,CAAA,CAAA;AAClC,MAAA,IAAI,KAAU,KAAA,CAAA,CAAA;AAAI,QAAU,SAAA,CAAA,MAAA,CAAO,OAAO,CAAC,CAAA,CAAA;AAAA,KAC7C;AAAA,IAEA,aAAa,IAAc,EAAA;AACzB,MAAA,IAAI,SAAS,MAAQ,EAAA;AACnB,QAAA,OAAO,IAAK,CAAA,aAAA,CAAA;AAAA,OACd,MAAA,IAAW,SAAS,SAAW,EAAA;AAC7B,QAAA,OAAO,IAAK,CAAA,gBAAA,CAAA;AAAA,OACd,MAAA,IAAW,SAAS,cAAgB,EAAA;AAClC,QAAA,OAAO,IAAK,CAAA,qBAAA,CAAA;AAAA,OACd,MAAA,IAAW,SAAS,aAAe,EAAA;AACjC,QAAA,OAAO,IAAK,CAAA,oBAAA,CAAA;AAAA,OACP,MAAA;AACL,QAAA,OAAO,IAAK,CAAA,eAAA,CAAA;AAAA,OACd;AAAA,KACF;AAAA,IAEA,OAAO,IAAc,EAAA;AACnB,MAAK,IAAA,CAAA,qBAAA,CAAsB,OAAQ,CAAA,CAAA,CAAA,KAAK,CAAE,CAAA,EAAE,IAAM,EAAA,cAAA,EAAgB,QAAU,EAAA,IAAA,EAAM,IAAK,EAAC,CAAC,CAAA,CAAA;AAEzF,MAAA,IAAA,CAAK,QAAS,CAAA,EAAE,QAAU,EAAA,IAAA,EAAM,MAAM,CAAA,CAAA;AACtC,MAAK,IAAA,CAAA,oBAAA,CAAqB,OAAQ,CAAA,CAAA,CAAA,KAAK,CAAE,CAAA,EAAE,IAAM,EAAA,aAAA,EAAe,QAAU,EAAA,IAAA,EAAM,IAAK,EAAC,CAAC,CAAA,CAAA;AAEvF,MAAK,IAAA,CAAA,KAAA,CAAM,KAAS,IAAAF,gBAAA,CAAM,MAAO,EAAA,CAAA;AAAA,KACnC;AAAA,IACA,WAAW,IAAc,EAAA;AACvB,MAAA,IAAI,IAAK,CAAA,GAAA;AAAK,QAAA,qBAAA,CAAsB,KAAK,UAAU,CAAA,CAAA;AACnD,MAAA,IAAA,CAAK,OAAO,IAAI,CAAA,CAAA;AAAA,KAClB;AAAA,GACF;AAAA,EACA,MAAS,GAAA;AACP,IAAA,OAAO,KAAK,MAAO,CAAA,OAAA,GAAU,KAAK,MAAO,CAAA,OAAA,KAAY,EAAC,CAAA;AAAA,GACxD;AAAA,EACA,OAAS,EAAA,UAAA;AACX,CAAC,CAAA;;AChRD,aAAeC,mBAAgB,CAAA;AAAA,EAI7B,KAAO,EAAA;AAAA,IACL,OAAO,EAAE,IAAA,EAAM,QAAQ,OAAS,EAAA,OAAO,EAAI,CAAA,EAAA;AAAA,GAC7C;AAAA,EAQA,MAAS,GAAA;AACP,IAAA,OAAO,KAAK,MAAO,CAAA,OAAA,GAAU,KAAK,MAAO,CAAA,OAAA,KAAY,EAAC,CAAA;AAAA,GACxD;AACF,CAAC,CAAA,CAAA;AAEM,SAAS,aAAc,CAAA,MAAA,EAAa,GAAa,EAAA,KAAA,EAAY,yBAAyB,IAAM,EAAA;AACjG,EAAA,MAAA,CAAO,GAAO,CAAA,GAAA,KAAA,CAAA;AACd,EAAI,IAAA,sBAAA;AAAwB,IAAA,MAAA,CAAO,sBAAuB,EAAA,CAAA;AAC5D;;ACzBA,yBAAeA,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,MAAA;AAAA,EACT,IAAM,EAAA,oBAAA;AAAA,EACN,KAAO,EAAA;AAAA,IACL,IAAM,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAG,CAAA,EAAA;AAAA,IAClC,KAAO,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,IAClC,GAAK,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,IAChC,MAAQ,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAG,CAAA,EAAA;AAAA,IACpC,IAAM,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,GAAI,EAAA;AAAA,IACnC,GAAK,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,GAAK,EAAA;AAAA,IACnC,IAAM,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,IACjC,QAAU,EAAA,EAAE,IAAM,EAAA,MAAA,EAA0C,OAAS,EAAA,OAAO,EAAE,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAK,CAAA,EAAA;AAAA,GACpG;AAAA,EACA,MAAM,KAAO,EAAA;AACX,IAAM,MAAA,QAAA,GAAWE,WAAO,oBAAoB,CAAA,CAAA;AAC5C,IAAA,IAAI,CAAC,QAAU,EAAA;AACb,MAAA,OAAA,CAAQ,MAAM,oBAAoB,CAAA,CAAA;AAClC,MAAA,OAAA;AAAA,KACF;AAEA,IAAA,MAAM,MAAS,GAAA,IAAIC,wBAAmB,CAAA,KAAA,CAAM,MAAM,KAAM,CAAA,KAAA,EAAO,KAAM,CAAA,GAAA,EAAK,KAAM,CAAA,MAAA,EAAQ,KAAM,CAAA,IAAA,EAAM,MAAM,GAAG,CAAA,CAAA;AAC7G,IAAA,QAAA,CAAS,MAAS,GAAA,MAAA,CAAA;AAElB,IAAS,QAAA,CAAA,KAAA,EAAO,YAAY,MAAM,CAAA,CAAA;AAClC,IAAA,cAAA,CAAe,KAAO,EAAA,OAAA,EAAS,MAAQ,EAAA,IAAA,EAAM,aAAa,CAAA,CAAA;AAE1D,IAAC,CAAA,MAAA,EAAQ,SAAS,KAAO,EAAA,QAAA,EAAU,QAAQ,KAAO,EAAA,MAAM,CAAE,CAAA,OAAA,CAAQ,CAAK,CAAA,KAAA;AAErE,MAAAhC,SAAA,CAAM,MAAM,KAAA,CAAM,CAAI,CAAA,EAAA,CAAC,KAAU,KAAA;AAC/B,QAAc,aAAA,CAAA,MAAA,EAAQ,GAAG,KAAK,CAAA,CAAA;AAAA,OAC/B,CAAA,CAAA;AAAA,KACF,CAAA,CAAA;AAED,IAAO,OAAA,EAAE,UAAU,MAAO,EAAA,CAAA;AAAA,GAC5B;AAAA,EACA,OAAS,EAAA,oBAAA;AACX,CAAC,CAAA;;ACpCD,wBAAe6B,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,MAAA;AAAA,EACT,IAAM,EAAA,mBAAA;AAAA,EACN,KAAO,EAAA;AAAA,IACL,MAAQ,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,KAAM,EAAA;AAAA,IACvC,GAAK,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,GAAM,EAAA;AAAA,IACpC,GAAK,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,EAAG,EAAA;AAAA,IACjC,IAAM,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,GAAI,EAAA;AAAA,IACnC,QAAU,EAAA,EAAE,IAAM,EAAA,MAAA,EAA0C,OAAS,EAAA,OAAO,EAAE,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAK,CAAA,EAAA;AAAA,IAClG,MAAQ,EAAA,EAAE,IAAM,EAAA,MAAA,EAA0C,SAAS,IAAK,EAAA;AAAA,GAC1E;AAAA,EACA,MAAM,KAAO,EAAA;AAlBf,IAAA,IAAA,EAAA,CAAA;AAmBI,IAAM,MAAA,QAAA,GAAWE,WAAO,oBAAoB,CAAA,CAAA;AAC5C,IAAA,IAAI,CAAC,QAAU,EAAA;AACb,MAAA,OAAA,CAAQ,MAAM,oBAAoB,CAAA,CAAA;AAClC,MAAA,OAAA;AAAA,KACF;AAEA,IAAM,MAAA,MAAA,GAAS,IAAIE,uBAAA,CAAkB,KAAM,CAAA,GAAA,EAAK,MAAM,MAAQ,EAAA,KAAA,CAAM,IAAM,EAAA,KAAA,CAAM,GAAG,CAAA,CAAA;AACnF,IAAA,QAAA,CAAS,MAAS,GAAA,MAAA,CAAA;AAElB,IAAS,QAAA,CAAA,KAAA,EAAO,YAAY,MAAM,CAAA,CAAA;AAElC,IAAA,IAAI,KAAM,CAAA,MAAA;AAAQ,MAAO,MAAA,CAAA,MAAA,CAAA,CAAO,EAAM,GAAA,KAAA,CAAA,MAAA,CAAO,CAAb,KAAA,IAAA,GAAA,EAAA,GAAkB,CAAG,EAAA,KAAA,CAAM,MAAO,CAAA,CAAA,EAAG,KAAM,CAAA,MAAA,CAAO,CAAC,CAAA,CAAA;AACnF,IAAAjC,SAAA,CAAM,MAAM,KAAA,CAAM,MAAQ,EAAA,CAAC,CAAM,KAAA;AA/BrC,MAAAkC,IAAAA,GAAAA,CAAAA;AA+BuC,MAAO,MAAA,CAAA,MAAA,CAAA,CAAOA,GAAA,GAAA,CAAA,CAAE,CAAF,KAAA,IAAA,GAAAA,MAAO,CAAG,EAAA,CAAA,CAAE,CAAG,EAAA,CAAA,CAAE,CAAC,CAAA,CAAA;AAAA,KAAK,EAAA,EAAE,IAAM,EAAA,IAAA,EAAM,CAAA,CAAA;AAEtF,IAAA,cAAA,CAAe,KAAO,EAAA,OAAA,EAAS,MAAQ,EAAA,IAAA,EAAM,aAAa,CAAA,CAAA;AAE1D,IAAA,CAAC,UAAU,KAAO,EAAA,KAAA,EAAO,MAAM,CAAA,CAAE,QAAQ,CAAK,CAAA,KAAA;AAE5C,MAAAlC,SAAA,CAAM,MAAM,KAAA,CAAM,CAAI,CAAA,EAAA,CAAC,KAAU,KAAA;AAC/B,QAAc,aAAA,CAAA,MAAA,EAAQ,GAAG,KAAK,CAAA,CAAA;AAAA,OAC/B,CAAA,CAAA;AAAA,KACF,CAAA,CAAA;AAED,IAAO,OAAA,EAAE,UAAU,MAAO,EAAA,CAAA;AAAA,GAC5B;AAAA,EACA,OAAS,EAAA,mBAAA;AACX,CAAC,CAAA;;ACzCY,MAAA,iBAAA,GAAyC,OAAO,OAAO,EAAA;AAEpE,YAAe6B,mBAAgB,CAAA;AAAA,EAC7B,IAAM,EAAA,OAAA;AAAA,EACN,KAAO,EAAA;AAAA,IACL,UAAY,EAAA,CAAC,MAAQ,EAAA,MAAA,EAAQ,MAAM,CAAA;AAAA,GACrC;AAAA,EACA,MAAM,KAAO,EAAA;AACX,IAAM,MAAA,QAAA,GAAWE,WAAO,oBAAoB,CAAA,CAAA;AAC5C,IAAM,MAAA,KAAA,GAAQ,IAAII,WAAM,EAAA,CAAA;AAExB,IAAA,IAAI,CAAC,QAAU,EAAA;AACb,MAAA,OAAA,CAAQ,MAAM,oBAAoB,CAAA,CAAA;AAClC,MAAA,OAAA;AAAA,KACF;AAEA,IAAA,QAAA,CAAS,KAAQ,GAAA,KAAA,CAAA;AACjB,IAAAC,WAAA,CAAQ,mBAAmB,KAAK,CAAA,CAAA;AAEhC,IAAM,MAAA,aAAA,GAAgB,CAAC,KAAqB,KAAA;AAC1C,MAAA,IAAI,CAAC,KAAA;AAAO,QAAA,OAAA;AACZ,MAAA,IAAI,OAAO,KAAA,KAAU,QAAY,IAAA,OAAO,UAAU,QAAU,EAAA;AAC1D,QAAA,IAAI,MAAM,UAAsB,YAAAjB,WAAA;AAAO,UAAM,KAAA,CAAA,UAAA,CAAW,IAAI,KAAK,CAAA,CAAA;AAAA;AAC5D,UAAM,KAAA,CAAA,UAAA,GAAa,IAAIA,WAAA,CAAM,KAAK,CAAA,CAAA;AAAA,OACzC,MAAA,IAAW,iBAAiBkB,aAAS,EAAA;AACnC,QAAA,KAAA,CAAM,UAAa,GAAA,KAAA,CAAA;AAAA,OACrB;AAAA,KACF,CAAA;AAEA,IAAA,aAAA,CAAc,MAAM,UAAU,CAAA,CAAA;AAC9B,IAAMrC,SAAA,CAAA,MAAM,KAAM,CAAA,UAAA,EAAY,aAAa,CAAA,CAAA;AAE3C,IAAM,MAAA,GAAA,GAAM,CAAC,CAAsB,KAAA;AAAE,MAAA,KAAA,CAAM,IAAI,CAAC,CAAA,CAAA;AAAA,KAAE,CAAA;AAClD,IAAM,MAAA,MAAA,GAAS,CAAC,CAAsB,KAAA;AAAE,MAAA,KAAA,CAAM,OAAO,CAAC,CAAA,CAAA;AAAA,KAAE,CAAA;AAExD,IAAO,OAAA,EAAE,KAAO,EAAA,GAAA,EAAK,MAAO,EAAA,CAAA;AAAA,GAC9B;AAAA,EACA,MAAS,GAAA;AACP,IAAA,OAAO,KAAK,MAAO,CAAA,OAAA,GAAU,KAAK,MAAO,CAAA,OAAA,KAAY,EAAC,CAAA;AAAA,GACxD;AAAA,EACA,OAAS,EAAA,OAAA;AACX,CAAC,CAAA;;ACjBM,MAAM,YAAe,GAAA;AAAA,EAC1B,cAAgB,EAAA,QAAA;AAAA,EAChB,aAAe,EAAA,QAAA;AAAA,EACf,aAAe,EAAA,QAAA;AAAA,EACf,cAAgB,EAAA,QAAA;AAAA,EAChB,aAAe,EAAA,QAAA;AAAA,EACf,WAAa,EAAA,QAAA;AAAA,EACb,OAAS,EAAA,QAAA;AACX,CAAA,CAAA;AAiBA,eAAe6B,mBAAgB,CAAA;AAAA,EAC7B,IAAM,EAAA,UAAA;AAAA,EAEN,MAAQ,EAAA;AAAA,IACN,QAAU,EAAA,oBAAA;AAAA,IACV,KAAO,EAAA,iBAAA;AAAA,GACT;AAAA,EACA,KAAA,EAAO,CAAC,SAAA,EAAW,OAAO,CAAA;AAAA,EAC1B,KAAO,EAAA;AAAA,IACL,QAAU,EAAA,EAAE,IAAM,EAAA,MAAA,EAA0C,OAAS,EAAA,OAAO,EAAE,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAK,CAAA,EAAA;AAAA,IAClG,QAAU,EAAA,EAAE,IAAM,EAAA,MAAA,EAAwC,OAAS,EAAA,OAAO,EAAE,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAK,CAAA,EAAA;AAAA,IAChG,KAAO,EAAA,EAAE,IAAM,EAAA,MAAA,EAA0C,SAAS,OAAO,EAAE,CAAG,EAAA,CAAA,EAAG,GAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,KAAA,EAAO,OAAS,CAAA,EAAA;AAAA,IAC7G,MAAQ,EAAA,EAAE,IAAM,EAAA,MAAA,EAA0C,SAAS,IAAK,EAAA;AAAA,IACxE,UAAU,EAAE,IAAA,EAAM,QAAQ,OAAS,EAAA,OAAO,EAAI,CAAA,EAAA;AAAA,IAC9C,OAAS,EAAA,EAAE,IAAM,EAAA,OAAA,EAAS,SAAS,IAAK,EAAA;AAAA,IACxC,OAAO,EAAE,IAAA,EAAM,QAAQ,OAAS,EAAA,OAAO,EAAI,CAAA,EAAA;AAAA,IAC3C,UAAY,EAAA,EAAE,IAAM,EAAA,OAAA,EAAS,SAAS,KAAM,EAAA;AAAA,IAC5C,aAAe,EAAA,EAAE,IAAM,EAAA,OAAA,EAAS,SAAS,KAAM,EAAA;AAAA,IAC/C,GAAG,YAAA;AAAA,GACL;AAAA,EACA,KAAgC,GAAA;AAE9B,IAAA,OAAO,EAAC,CAAA;AAAA,GACV;AAAA,EACA,OAAU,GAAA;AACR,IAAI,IAAA,CAAC,KAAK,QAAU,EAAA;AAClB,MAAA,OAAA,CAAQ,MAAM,yBAAyB,CAAA,CAAA;AAAA,KACzC;AACA,IAAI,IAAA,CAAC,KAAK,KAAO,EAAA;AACf,MAAA,OAAA,CAAQ,MAAM,sBAAsB,CAAA,CAAA;AAAA,KACtC;AAAA,GACF;AAAA,EACA,SAAY,GAAA;AACV,IAAA,IAAI,CAAC,IAAK,CAAA,aAAA;AAAe,MAAA,IAAA,CAAK,gBAAiB,EAAA,CAAA;AAC/C,IAAA,IAAI,KAAK,GAAK,EAAA;AACZ,MAAA,IAAI,IAAK,CAAA,QAAA;AAAU,QAAA,IAAA,CAAK,QAAS,CAAA,KAAA,CAAM,qBAAsB,CAAA,IAAA,CAAK,GAAG,CAAA,CAAA;AAAA,KACvE;AAAA,GACF;AAAA,EACA,OAAS,EAAA;AAAA,IACP,aAAa,GAAe,EAAA;AA5FhC,MAAA,IAAA,EAAA,CAAA;AA6FM,MAAA,IAAA,CAAK,GAAM,GAAA,GAAA,CAAA;AACX,MAAA,GAAA,CAAI,SAAS,SAAY,GAAA,IAAA,CAAA;AAEzB,MAAA,IAAI,IAAK,CAAA,cAAA,IACP,IAAK,CAAA,aAAA,IACL,IAAK,CAAA,aAAA,IACL,IAAK,CAAA,cAAA,IACL,IAAK,CAAA,aAAA,IACL,IAAK,CAAA,WAAA,IACL,KAAK,OAAS,EAAA;AACd,QAAA,IAAI,IAAK,CAAA,QAAA;AAAU,UAAK,IAAA,CAAA,QAAA,CAAS,KAAM,CAAA,kBAAA,CAAmB,GAAG,CAAA,CAAA;AAAA,OAC/D;AAEA,MAAS,QAAA,CAAA,IAAA,EAAM,YAAY,GAAG,CAAA,CAAA;AAC9B,MAAS,QAAA,CAAA,IAAA,EAAM,YAAY,GAAG,CAAA,CAAA;AAC9B,MAAS,QAAA,CAAA,IAAA,EAAM,SAAS,GAAG,CAAA,CAAA;AAC3B,MAAS,QAAA,CAAA,IAAA,EAAM,UAAY,EAAA,GAAA,CAAI,QAAQ,CAAA,CAAA;AACvC,MAAS,QAAA,CAAA,IAAA,EAAM,WAAW,GAAG,CAAA,CAAA;AAE7B,MAAe,cAAA,CAAA,IAAA,EAAM,SAAS,GAAG,CAAA,CAAA;AAEjC,MAAK,IAAA,CAAA,KAAA,CAAM,WAAW,GAAG,CAAA,CAAA;AAEzB,MAAA,IAAI,IAAK,CAAA,MAAA;AAAQ,QAAI,GAAA,CAAA,MAAA,CAAA,CAAO,EAAK,GAAA,IAAA,CAAA,MAAA,CAAO,CAAZ,KAAA,IAAA,GAAA,EAAA,GAAiB,CAAG,EAAA,IAAA,CAAK,MAAO,CAAA,CAAA,EAAG,IAAK,CAAA,MAAA,CAAO,CAAC,CAAA,CAAA;AAC5E,MAAA7B,SAAA,CAAM,MAAM,IAAA,CAAK,MAAQ,EAAA,CAAC,CAAM,KAAA;AArHtC,QAAAkC,IAAAA,GAAAA,CAAAA;AAqHwC,QAAI,GAAA,CAAA,MAAA,CAAA,CAAOA,GAAA,GAAA,CAAA,CAAE,CAAF,KAAA,IAAA,GAAAA,MAAO,CAAG,EAAA,CAAA,CAAE,CAAG,EAAA,CAAA,CAAE,CAAC,CAAA,CAAA;AAAA,OAAK,EAAA,EAAE,IAAM,EAAA,IAAA,EAAM,CAAA,CAAA;AAElF,MAAK,IAAA,CAAA,MAAA,GAAS,KAAK,SAAU,EAAA,CAAA;AAC7B,MAAI,IAAA,CAAC,KAAK,UAAY,EAAA;AACpB,QAAA,IAAI,KAAK,WAAY,EAAA;AAAG,UAAK,IAAA,CAAA,KAAA,CAAM,SAAS,IAAI,CAAA,CAAA;AAAA;AAC3C,UAAA,OAAA,CAAQ,MAAM,kCAAkC,CAAA,CAAA;AAAA,OACvD;AAAA,KACF;AAAA,IACA,SAAiD,GAAA;AAC/C,MAAA,IAAI,SAAS,IAAK,CAAA,OAAA,CAAA;AAElB,MAAA,IAAI,CAAC,MAAQ,EAAA;AAEX,QAAA,MAAM,WAAWI,sBAAmB,EAAA,CAAA;AACpC,QAAA,IAAI,YAAY,QAAS,CAAA,MAAA;AAAQ,UAAA,MAAA,GAAS,SAAS,MAAO,CAAA,GAAA,CAAA;AAAA,OAC5D;AAEA,MAAA,OAAO,MAAQ,EAAA;AACb,QAAA,IAAK,MAAe,CAAA,GAAA;AAAK,UAAO,OAAA,MAAA,CAAA;AAChC,QAAA,MAAA,GAAS,MAAO,CAAA,OAAA,CAAA;AAAA,OAClB;AACA,MAAO,OAAA,KAAA,CAAA,CAAA;AAAA,KACT;AAAA,IACA,YAAY,CAAc,EAAA;AACxB,MAAM,MAAA,GAAA,GAAM,KAAK,IAAK,CAAA,GAAA,CAAA;AACtB,MAAA,IAAI,KAAK,MAAQ,EAAA;AACf,QAAC,IAAA,CAAK,MAAe,CAAA,GAAA,CAAI,GAAG,CAAA,CAAA;AAC5B,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AACA,MAAO,OAAA,KAAA,CAAA;AAAA,KACT;AAAA,IACA,iBAAiB,CAAc,EAAA;AAC7B,MAAM,MAAA,GAAA,GAAM,KAAK,IAAK,CAAA,GAAA,CAAA;AACtB,MAAA,IAAI,KAAK,MAAQ,EAAA;AACf,QAAC,IAAA,CAAK,MAAe,CAAA,MAAA,CAAO,GAAG,CAAA,CAAA;AAC/B,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AACA,MAAO,OAAA,KAAA,CAAA;AAAA,KACT;AAAA,IACA,IAAI,CAAa,EAAA;AA5JrB,MAAA,IAAA,EAAA,CAAA;AA4JuB,MAAK,CAAA,EAAA,GAAA,IAAA,CAAA,GAAA,KAAL,mBAAU,GAAI,CAAA,CAAA,CAAA,CAAA;AAAA,KAAG;AAAA,IACpC,OAAO,CAAa,EAAA;AA7JxB,MAAA,IAAA,EAAA,CAAA;AA6J0B,MAAK,CAAA,EAAA,GAAA,IAAA,CAAA,GAAA,KAAL,mBAAU,MAAO,CAAA,CAAA,CAAA,CAAA;AAAA,KAAG;AAAA,GAC5C;AAAA,EACA,MAAS,GAAA;AACP,IAAA,OAAO,KAAK,MAAO,CAAA,OAAA,GAAU,KAAK,MAAO,CAAA,OAAA,KAAY,EAAC,CAAA;AAAA,GACxD;AAAA,EACA,OAAS,EAAA,UAAA;AACX,CAAC,CAAA;;AC/JD,YAAeT,mBAAgB,CAAA;AAAA,EAC7B,IAAM,EAAA,OAAA;AAAA,EACN,OAAS,EAAA,QAAA;AAAA,EACT,KAAQ,GAAA;AACN,IAAO,OAAA;AAAA,MACL,KAAA,EAAO,IAAIU,WAAM,EAAA;AAAA,KACnB,CAAA;AAAA,GACF;AAAA,EACA,OAAU,GAAA;AACR,IAAK,IAAA,CAAA,YAAA,CAAa,KAAK,KAAK,CAAA,CAAA;AAAA,GAC9B;AAAA,EACA,OAAS,EAAA,OAAA;AACX,CAAC,CAAA;;ACXD,MAAM,gBAA8C,MAAM;AAAC,CAAA,CAAA;AAO3D,gBAAeV,mBAAgB,CAAA;AAAA,EAC7B,IAAM,EAAA,WAAA;AAAA,EACN,KAAO,EAAA;AAAA,IACL,cAAgB,EAAA,EAAE,IAAM,EAAA,QAAA,EAAoD,SAAS,aAAc,EAAA;AAAA,IACnG,aAAe,EAAA,EAAE,IAAM,EAAA,QAAA,EAAoD,SAAS,aAAc,EAAA;AAAA,IAClG,aAAe,EAAA,EAAE,IAAM,EAAA,QAAA,EAAoD,SAAS,aAAc,EAAA;AAAA,IAClG,cAAgB,EAAA,EAAE,IAAM,EAAA,QAAA,EAAoD,SAAS,aAAc,EAAA;AAAA,IACnG,OAAS,EAAA,EAAE,IAAM,EAAA,QAAA,EAAoD,SAAS,aAAc,EAAA;AAAA,IAC5F,UAAY,EAAA,EAAE,IAAM,EAAA,QAAA,EAAoD,SAAS,aAAc,EAAA;AAAA,IAC/F,aAAe,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,MAAO,EAAA;AAAA,IAC/C,kBAAoB,EAAA,EAAE,IAAM,EAAA,OAAA,EAAS,SAAS,KAAM,EAAA;AAAA,GACtD;AAAA,EACA,KAAiC,GAAA;AAC/B,IAAM,MAAA,QAAA,GAAWE,WAAO,oBAAoB,CAAA,CAAA;AAC5C,IAAA,OAAO,EAAE,QAAS,EAAA,CAAA;AAAA,GACpB;AAAA,EACA,OAAU,GAAA;AACR,IAAI,IAAA,CAAC,KAAK,QAAU,EAAA;AAClB,MAAA,OAAA,CAAQ,MAAM,oBAAoB,CAAA,CAAA;AAClC,MAAA,OAAA;AAAA,KACF;AACA,IAAA,MAAM,WAAW,IAAK,CAAA,QAAA,CAAA;AAEtB,IAAK,IAAA,CAAA,QAAA,CAAS,UAAU,MAAM;AAC5B,MAAA,IAAI,CAAC,QAAS,CAAA,MAAA;AAAQ,QAAA,OAAA;AAEtB,MAAA,IAAA,CAAK,UAAU,UAAW,CAAA;AAAA,QACxB,QAAQ,QAAS,CAAA,MAAA;AAAA,QACjB,YAAY,QAAS,CAAA,MAAA;AAAA,QACrB,kBAAkB,MAAM,QAAA,CAAS,QAAQ,QAAS,CAAA,KAAA,CAAM,WAAW,EAAC;AAAA,QACpE,oBAAoB,IAAK,CAAA,kBAAA;AAAA,QACzB,kBAAkB,IAAK,CAAA,cAAA;AAAA,QACvB,iBAAiB,IAAK,CAAA,aAAA;AAAA,QACtB,iBAAiB,IAAK,CAAA,aAAA;AAAA,QACtB,kBAAkB,IAAK,CAAA,cAAA;AAAA,QACvB,kBAAkB,IAAK,CAAA,OAAA;AAAA,OACxB,CAAA,CAAA;AACD,MAAA,IAAA,CAAK,QAAQ,YAAa,EAAA,CAAA;AAE1B,MAAI,IAAA,IAAA,CAAK,kBAAkB,OAAS,EAAA;AAClC,QAAS,QAAA,CAAA,cAAA,CAAe,IAAK,CAAA,OAAA,CAAQ,SAAS,CAAA,CAAA;AAAA,OAChD;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AAAA,EACA,SAAY,GAAA;AAxDd,IAAA,IAAA,EAAA,CAAA;AAyDI,IAAA,IAAI,KAAK,OAAS,EAAA;AAChB,MAAA,IAAA,CAAK,QAAQ,eAAgB,EAAA,CAAA;AAC7B,MAAA,CAAA,EAAA,GAAA,IAAA,CAAK,QAAL,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAe,eAAgB,CAAA,IAAA,CAAK,OAAQ,CAAA,SAAA,CAAA,CAAA;AAAA,KAC9C;AAAA,GACF;AAAA,EACA,MAAS,GAAA;AACP,IAAA,OAAO,EAAC,CAAA;AAAA,GACV;AAAA,EACA,OAAS,EAAA,WAAA;AACX,CAAC,CAAA;;ACvDD,iBAAeF,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA;AAAA,IACL,UAAY,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,GAAI,EAAA;AAAA,IACzC,cAAgB,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,GAAI,EAAA;AAAA,IAC7C,aAAe,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,GAAK,EAAA;AAAA,IAC7C,UAAY,EAAA,OAAA;AAAA,IACZ,YAAY,EAAE,IAAA,EAAM,OAA2B,OAAS,EAAA,MAAO,EAAI,EAAA;AAAA,GACrE;AAAA,EACA,MAAM,KAAiC,EAAA;AACrC,IAAM,MAAA,SAAA,GAAYE,WAAO,oBAAoB,CAAA,CAAA;AAC7C,IAAA,IAAI,CAAC,SAAA,IAAa,CAAC,SAAA,CAAU,KAAO,EAAA;AAClC,MAAA,OAAA,CAAQ,MAAM,0BAA0B,CAAA,CAAA;AACxC,MAAA,OAAO,EAAC,CAAA;AAAA,KACV;AAEA,IAAA,MAAM,QAAW,GAAA,SAAA,CAAU,QAAU,EAAA,KAAA,GAAQ,SAAU,CAAA,KAAA,CAAA;AACvD,IAAA,MAAM,MAAS,GAAA,IAAIS,2BAAsB,CAAA,KAAA,CAAM,UAAY,EAAA,EAAE,MAAQ,EAAAC,gBAAA,EAAY,eAAiB,EAAA,IAAA,EAAM,SAAW,EAAAC,8BAAA,EAA0B,CAAA,CAAA;AAC7I,IAAA,MAAM,aAAa,IAAIC,gBAAA,CAAW,MAAM,cAAgB,EAAA,KAAA,CAAM,eAAe,MAAM,CAAA,CAAA;AACnF,IAAA,MAAM,WAAW,MAAM;AACrB,MAAM,KAAA,CAAA,UAAA,CAAW,QAAQ,CAAK,CAAA,KAAA;AAAE,QAAA,CAAA,CAAE,OAAU,GAAA,KAAA,CAAA;AAAA,OAAO,CAAA,CAAA;AACnD,MAAW,UAAA,CAAA,MAAA,CAAO,UAAU,KAAK,CAAA,CAAA;AACjC,MAAM,KAAA,CAAA,UAAA,CAAW,QAAQ,CAAK,CAAA,KAAA;AAAE,QAAA,CAAA,CAAE,OAAU,GAAA,IAAA,CAAA;AAAA,OAAM,CAAA,CAAA;AAAA,KACpD,CAAA;AAEA,IAAA,IAAI,MAAM,UAAY,EAAA;AACpB,MAAA,SAAA,CAAU,eAAe,QAAQ,CAAA,CAAA;AACjC,MAAAC,eAAA,CAAY,MAAM;AAAE,QAAA,SAAA,CAAU,gBAAgB,QAAQ,CAAA,CAAA;AAAA,OAAG,CAAA,CAAA;AAAA,KACpD,MAAA;AACL,MAAA,SAAA,CAAU,UAAU,QAAQ,CAAA,CAAA;AAAA,KAC9B;AAEA,IAAO,OAAA,EAAE,MAAQ,EAAA,UAAA,EAAY,QAAS,EAAA,CAAA;AAAA,GACxC;AAAA,EACA,OAAU,GAAA;AACR,IAAA,IAAI,IAAK,CAAA,UAAA;AAAY,MAAK,IAAA,CAAA,YAAA,CAAa,KAAK,UAAU,CAAA,CAAA;AAAA,GACxD;AAAA,EACA,MAAS,GAAA;AACP,IAAA,OAAO,EAAC,CAAA;AAAA,GACV;AAAA,EACA,OAAS,EAAA,YAAA;AACX,CAAC,CAAA;;AChDoB,MAAA,cAAA,SAAuB1C,iBAAM,QAAS,CAAA;AAAA,EAQzD,WAAA,CAAY,WAAW,IAAM,EAAA;AAC3B,IAAM,KAAA,EAAA,CAAA;AARR,IAAO,IAAA,CAAA,IAAA,GAAA,iBAAA,CAAA;AACP,IAAA,IAAA,CAAiB,WAAc,GAAA,CAAA,CAAA;AAE/B,IAAA,IAAA,CAAiB,YAAe,GAAA,QAAA,CAAA;AAChC,IAAA,IAAA,CAAiB,YAAe,GAAA,KAAA,CAAA;AAChC,IAAA,IAAA,CAAiB,YAAe,GAAA,GAAA,CAAA;AAK9B,IAAA,MAAM,SAAS,IAAIA,gBAAA,CAAM,OAAQ,CAAA,CAAA,EAAG,GAAG,CAAC,CAAA,CAAA;AACxC,IAAA,MAAM,QAAQ,IAAIA,gBAAA,CAAM,OAAQ,CAAA,CAAA,EAAG,GAAG,CAAC,CAAA,CAAA;AACvC,IAAA,MAAM,QAAQ,IAAIA,gBAAA,CAAM,OAAQ,CAAA,CAAA,EAAG,GAAG,CAAC,CAAA,CAAA;AACvC,IAAA,MAAM,QAAQ,IAAIA,gBAAA,CAAM,OAAQ,CAAA,CAAA,EAAG,GAAG,CAAC,CAAA,CAAA;AAEvC,IAAA,MAAM,MAAS,GAAA,IAAIA,gBAAM,CAAA,WAAA,CAAY,OAAO,MAAQ,EAAA,IAAA,CAAK,WAAa,EAAA,IAAA,CAAK,cAAc,IAAK,CAAA,WAAA,GAAc,CAAG,EAAA,IAAA,CAAK,cAAc,CAAC,CAAA,CAAA;AACnI,IAAA,MAAM,MAAS,GAAA,IAAIA,gBAAM,CAAA,WAAA,CAAY,OAAO,MAAQ,EAAA,IAAA,CAAK,WAAa,EAAA,IAAA,CAAK,cAAc,IAAK,CAAA,WAAA,GAAc,CAAG,EAAA,IAAA,CAAK,cAAc,CAAC,CAAA,CAAA;AACnI,IAAA,MAAM,MAAS,GAAA,IAAIA,gBAAM,CAAA,WAAA,CAAY,OAAO,MAAQ,EAAA,IAAA,CAAK,WAAa,EAAA,IAAA,CAAK,cAAc,IAAK,CAAA,WAAA,GAAc,CAAG,EAAA,IAAA,CAAK,cAAc,CAAC,CAAA,CAAA;AACnI,IAAK,IAAA,CAAA,GAAA,CAAI,MAAQ,EAAA,MAAA,EAAQ,MAAM,CAAA,CAAA;AAQ/B,IAAA,QAAA,IAAY,KAAK,QAAS,EAAA,CAAA;AAAA,GAC5B;AAAA,EAEA,QAAW,GAAA;AAET,IAAA,IAAI2C,wBAAW,EAAA,CAAE,IAAK,CAAA,8CAAA,EAAgD,CAAC,IAAS,KAAA;AAC9E,MAAM,MAAA,CAAA,GAAI,KAAK,UAAW,CAAA,IAAA,EAAM,KAAK,IAAI3C,gBAAA,CAAM,KAAM,CAAA,QAAQ,CAAC,CAAA,CAAA;AAC9D,MAAM,MAAA,CAAA,GAAI,KAAK,UAAW,CAAA,IAAA,EAAM,KAAK,IAAIA,gBAAA,CAAM,KAAM,CAAA,KAAQ,CAAC,CAAA,CAAA;AAC9D,MAAM,MAAA,CAAA,GAAI,KAAK,UAAW,CAAA,IAAA,EAAM,KAAK,IAAIA,gBAAA,CAAM,KAAM,CAAA,GAAQ,CAAC,CAAA,CAAA;AAC9D,MAAA,CAAA,CAAE,QAAS,CAAA,GAAA,CAAI,IAAK,CAAA,WAAA,EAAa,GAAG,CAAC,CAAA,CAAA;AACrC,MAAA,CAAA,CAAE,QAAS,CAAA,GAAA,CAAI,CAAG,EAAA,IAAA,CAAK,aAAa,CAAC,CAAA,CAAA;AACrC,MAAA,CAAA,CAAE,QAAS,CAAA,GAAA,CAAI,CAAG,EAAA,CAAA,EAAG,KAAK,WAAW,CAAA,CAAA;AACrC,MAAK,IAAA,CAAA,GAAA,CAAI,CAAG,EAAA,CAAA,EAAG,CAAC,CAAA,CAAA;AAAA,KACjB,CAAA,CAAA;AAAA,GACH;AAAA,EAEA,UAAA,CAAW,IAAY,EAAA,IAAA,EAAc,KAAqB,EAAA;AACxD,IAAM,MAAA,QAAA,GAAW,IAAI4C,4BAAA,CAAa,IAAM,EAAA;AAAA,MACtC,IAAA;AAAA,MACA,IAAM,EAAA,GAAA;AAAA,MACN,MAAQ,EAAA,IAAA;AAAA,MACR,aAAe,EAAA,CAAA;AAAA,MACf,YAAc,EAAA,KAAA;AAAA,MACd,cAAgB,EAAA,CAAA;AAAA,MAChB,SAAW,EAAA,IAAA;AAAA,MACX,aAAe,EAAA,CAAA;AAAA,KAChB,CAAA,CAAA;AACD,IAAM,MAAA,OAAA,GAAU,IAAI5C,gBAAA,CAAM,oBAAqB,CAAA;AAAA,MAC7C,WAAa,EAAA,IAAA;AAAA,MACb,WAAa,EAAA,IAAA;AAAA,MACb,OAAS,EAAA,GAAA;AAAA,MACT,QAAU,EAAA,KAAA,IAAS,IAAIA,gBAAA,CAAM,MAAM,KAAQ,CAAA;AAAA,KAC5C,CAAA,CAAA;AACD,IAAA,OAAO,IAAIA,gBAAA,CAAM,IAAK,CAAA,QAAA,EAAU,OAAO,CAAA,CAAA;AAAA,GACzC;AACF;;AC3DA,MAAqB,sBAAuB,CAAA;AAAA,EAS1C,WAAA,CAAY,OAAgB,MAAiB,EAAA;AAH7C,IAAS,IAAA,CAAA,MAAA,GAAA,GAAA,CAAA;AACT,IAAQ,IAAA,CAAA,KAAA,GAAA,GAAA,CAAA;AAGN,IAAK,IAAA,CAAA,KAAA,GAAQ,SAAS,IAAK,CAAA,KAAA,CAAA;AAC3B,IAAK,IAAA,CAAA,MAAA,GAAS,UAAU,IAAK,CAAA,MAAA,CAAA;AAC7B,IAAA,IAAA,CAAK,IAAK,EAAA,CAAA;AAAA,GACZ;AAAA,EAEA,IAAO,GAAA;AACL,IAAA,IAAA,CAAK,YAAa,EAAA,CAAA;AAClB,IAAA,IAAA,CAAK,SAAU,EAAA,CAAA;AACf,IAAA,IAAA,CAAK,OAAQ,EAAA,CAAA;AAAA,GACf;AAAA,EAEA,YAAe,GAAA;AACb,IAAK,IAAA,CAAA,QAAA,GAAW,IAAIA,gBAAM,CAAA,aAAA,CAAc,EAAE,SAAW,EAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,CAAA,CAAA;AACxE,IAAA,IAAA,CAAK,QAAS,CAAA,OAAA,CAAQ,IAAK,CAAA,KAAA,EAAO,KAAK,MAAM,CAAA,CAAA;AAAA,GAC/C;AAAA,EAEA,SAAY,GAAA;AACV,IAAK,IAAA,CAAA,KAAA,GAAQ,IAAIA,gBAAA,CAAM,KAAM,EAAA,CAAA;AAI7B,IAAK,IAAA,CAAA,MAAA,GAAS,IAAIA,gBAAM,CAAA,kBAAA,CAAmB,IAAI,CAAG,EAAA,CAAA,EAAG,CAAI,CAAA,EAAA,GAAA,EAAK,GAAG,CAAA,CAAA;AACjE,IAAK,IAAA,CAAA,KAAA,CAAM,GAAI,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAE1B,IAAK,IAAA,CAAA,cAAA,GAAiB,IAAI,cAAe,EAAA,CAAA;AACzC,IAAK,IAAA,CAAA,KAAA,CAAM,GAAI,CAAA,IAAA,CAAK,cAAc,CAAA,CAAA;AAAA,GACpC;AAAA,EAEA,MAAS,GAAA;AACP,IAAA,IAAI,IAAK,CAAA,QAAA,IAAY,IAAK,CAAA,KAAA,IAAS,KAAK,MAAQ,EAAA;AAC9C,MAAA,IAAA,CAAK,MAAO,EAAA,CAAA;AACZ,MAAA,IAAA,CAAK,QAAS,CAAA,MAAA,CAAO,IAAK,CAAA,KAAA,EAAO,KAAK,MAAM,CAAA,CAAA;AAAA,KAC9C;AAAA,GACF;AAAA,EAEA,OAAU,GAAA;AACR,IAAA,qBAAA,CAAsB,IAAK,CAAA,OAAA,CAAQ,IAAK,CAAA,IAAI,CAAC,CAAA,CAAA;AAC7C,IAAA,IAAA,CAAK,MAAO,EAAA,CAAA;AAAA,GACd;AAAA,EAEA,gBAAgB,QAAwC,EAAA;AACtD,IAAA,IAAA,CAAK,YAAe,GAAA,QAAA,CAAA;AACpB,IAAA,IAAA,CAAK,MAAO,EAAA,CAAA;AAAA,GACd;AAAA,EAEA,MAAS,GAAA;AACP,IAAA,IAAI,CAAC,IAAK,CAAA,YAAA,IAAgB,CAAC,IAAA,CAAK,aAAa,MAAQ,EAAA;AACnD,MAAA,OAAA;AAAA,KACF;AACA,IAAM,MAAA,MAAA,GAAS,KAAK,YAAa,CAAA,MAAA,CAAA;AACjC,IAAA,IAAI,MAAQ,EAAA;AACV,MAAM,MAAA,MAAA,GAAS,IAAIA,gBAAA,CAAM,OAAQ,EAAA,CAAA;AACjC,MAAA,MAAA,CAAO,kBAAkB,MAAM,CAAA,CAAA;AAC/B,MAAA,MAAM,KAAK,MAAO,CAAA,EAAA,CAAA;AAClB,MAAK,IAAA,CAAA,qBAAA,CAAsB,QAAQ,EAAE,CAAA,CAAA;AAAA,KACvC;AAAA,GACF;AAAA,EAOA,qBAAA,CAAsB,WAA0B,EAAmB,EAAA;AACjE,IAAA,IAAI,CAAC,IAAA,CAAK,MAAU,IAAA,CAAC,SAAW,EAAA;AAC9B,MAAA,OAAA;AAAA,KACF;AACA,IAAA,SAAA,CAAU,SAAU,EAAA,CAAA;AACpB,IAAA,MAAM,cAAiB,GAAA,CAAA,CAAA;AACvB,IAAA,MAAM,WAAc,GAAA,GAAA,CAAA;AACpB,IAAA,IAAA,CAAK,OAAO,QAAS,CAAA,GAAA,CAAI,CAAC,SAAA,CAAU,IAAI,cAAiB,GAAA,WAAA,EAAa,CAAC,SAAA,CAAU,IAAI,cAAiB,GAAA,WAAA,EAAa,CAAC,SAAU,CAAA,CAAA,GAAI,iBAAiB,WAAW,CAAA,CAAA;AAC9J,IAAA,IAAA,CAAK,MAAO,CAAA,MAAA,CAAO,WAAa,EAAA,WAAA,EAAa,WAAW,CAAA,CAAA;AACxD,IAAA,IAAA,CAAK,OAAO,EAAK,GAAA,EAAA,CAAA;AAAA,GACnB;AAAA,EAEA,OAAU,GAAA;AACR,IAAI,IAAA,CAAC,KAAK,KAAS,IAAA,CAAC,KAAK,MAAU,IAAA,CAAC,KAAK,cAAgB,EAAA;AACvD,MAAA,OAAA;AAAA,KACF;AACA,IAAA,IAAA,CAAK,MAAM,KAAM,EAAA,CAAA;AACjB,IAAA,IAAA,CAAK,YAAe,GAAA,KAAA,CAAA,CAAA;AACpB,IAAA,IAAA,CAAK,MAAS,GAAA,KAAA,CAAA,CAAA;AACd,IAAA,IAAA,CAAK,cAAiB,GAAA,KAAA,CAAA,CAAA;AACtB,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA,CAAA;AAAA,GACf;AACF;;ACnFa,MAAA,gBAAA,GAAsD,OAAO,MAAM,EAAA;AAEhF,MAAM,OAAO2B,mBAAgB,CAAA;AAAA,EAC3B,IAAM,EAAA,MAAA;AAAA,EACN,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA;AAAA,IACL,UAAY,EAAA,OAAA;AAAA,IACZ,aAAe,EAAA,OAAA;AAAA,GACjB;AAAA,EACA,KAA4B,GAAA;AAC1B,IAAA,OAAO,EAAC,CAAA;AAAA,GACV;AAAA,EACA,OAAU,GAAA;AACR,IAAO,OAAA;AAAA,MACL,CAAC,gBAA6B,GAAA,IAAA;AAAA,KAChC,CAAA;AAAA,GACF;AAAA,EACA,OAAU,GAAA;AAER,IAAA,IAAI,CAAC,IAAA,CAAK,IAAQ,IAAA,CAAC,IAAK,CAAA,OAAA;AAAS,MAAA,IAAA,CAAK,QAAS,EAAA,CAAA;AAAA,GACjD;AAAA,EACA,OAAS,EAAA;AAAA,IACP,QAAW,GAAA;AACT,MAAA,MAAM,OAAO,IAAIkB,UAAA,CAAM,IAAK,CAAA,QAAA,EAAU,KAAK,QAAQ,CAAA,CAAA;AAEnD,MAAS,QAAA,CAAA,IAAA,EAAM,cAAc,IAAI,CAAA,CAAA;AACjC,MAAS,QAAA,CAAA,IAAA,EAAM,iBAAiB,IAAI,CAAA,CAAA;AAEpC,MAAA,IAAA,CAAK,IAAO,GAAA,IAAA,CAAA;AACZ,MAAA,IAAA,CAAK,aAAa,IAAI,CAAA,CAAA;AAAA,KACxB;AAAA,IACA,cAAiB,GAAA;AAAA,KAAC;AAAA,IAClB,oBAAoB,KAAwC,EAAA;AAC1D,MAAA,MAAA,CAAO,IAAK,CAAA,KAAK,CAAE,CAAA,OAAA,CAAQ,CAAQ,IAAA,KAAA;AAEjC,QAAM/C,SAAA,CAAA,MAAM,IAAK,CAAA,IAAA,CAAA,EAAO,MAAM;AAC5B,UAAA,IAAA,CAAK,eAAgB,EAAA,CAAA;AAAA,SACtB,CAAA,CAAA;AAAA,OACF,CAAA,CAAA;AAAA,KACH;AAAA,IACA,YAAY,QAA0B,EAAA;AACpC,MAAA,IAAA,CAAK,QAAW,GAAA,QAAA,CAAA;AAChB,MAAA,IAAI,IAAK,CAAA,IAAA;AAAM,QAAA,IAAA,CAAK,KAAK,QAAW,GAAA,QAAA,CAAA;AAAA,KACtC;AAAA,IACA,YAAY,QAAoB,EAAA;AAC9B,MAAA,IAAA,CAAK,QAAW,GAAA,QAAA,CAAA;AAChB,MAAA,IAAI,IAAK,CAAA,IAAA;AAAM,QAAA,IAAA,CAAK,KAAK,QAAW,GAAA,QAAA,CAAA;AAAA,KACtC;AAAA,IACA,eAAkB,GAAA;AAChB,MAAA,MAAM,SAAS,IAAK,CAAA,QAAA,CAAA;AACpB,MAAA,IAAA,CAAK,cAAe,EAAA,CAAA;AACpB,MAAI,IAAA,IAAA,CAAK,QAAQ,IAAK,CAAA,QAAA;AAAU,QAAK,IAAA,CAAA,IAAA,CAAK,WAAW,IAAK,CAAA,QAAA,CAAA;AAC1D,MAAQ,MAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,MAAA,CAAA,OAAA,EAAA,CAAA;AAAA,KACV;AAAA,GACF;AAAA,EACA,SAAY,GAAA;AAEV,IAAA,IAAI,IAAK,CAAA,QAAA;AAAU,MAAA,IAAA,CAAK,SAAS,OAAQ,EAAA,CAAA;AACzC,IAAA,IAAI,IAAK,CAAA,QAAA;AAAU,MAAA,IAAA,CAAK,SAAS,OAAQ,EAAA,CAAA;AAAA,GAC3C;AAAA,EACA,OAAS,EAAA,MAAA;AACX,CAAC,EAAA;AAKe,SAAA,aAAA,CACd,IACA,EAAA,KAAA,EACA,cACA,EAAA;AACA,EAAA,OAAO6B,mBAAgB,CAAA;AAAA,IACrB,IAAA;AAAA,IACA,OAAS,EAAA,IAAA;AAAA,IACT,KAAA;AAAA,IACA,OAAU,GAAA;AACR,MAAA,IAAA,CAAK,cAAe,EAAA,CAAA;AACpB,MAAA,IAAA,CAAK,oBAAoB,KAAK,CAAA,CAAA;AAAA,KAChC;AAAA,IACA,OAAS,EAAA;AAAA,MACP,cAAiB,GAAA;AACf,QAAK,IAAA,CAAA,QAAA,GAAW,eAAe,IAAI,CAAA,CAAA;AAAA,OACrC;AAAA,KACF;AAAA,GACD,CAAA,CAAA;AACH;;ACjFA,MAAM,WAAWA,mBAAgB,CAAA;AAAA,EAC/B,KAAA,EAAO,CAAC,SAAS,CAAA;AAAA,EACjB,KAAO,EAAA;AAAA,IACL,OAAS,EAAA,MAAA;AAAA,IACT,OAAS,EAAA,MAAA;AAAA,IACT,OAAS,EAAA,MAAA;AAAA,IACT,YAAY,EAAE,IAAA,EAAM,OAAsD,OAAS,EAAA,MAAO,EAAI,EAAA;AAAA,GAChG;AAAA,EAEA,MAAQ,EAAA;AAAA,IACN,IAAM,EAAA,gBAAA;AAAA,GACR;AAAA,EACA,KAAgC,GAAA;AAC9B,IAAA,OAAO,EAAC,CAAA;AAAA,GACV;AAAA,EACA,OAAU,GAAA;AACR,IAAI,IAAA,CAAC,KAAK,IAAM,EAAA;AACd,MAAA,OAAA,CAAQ,MAAM,qBAAqB,CAAA,CAAA;AACnC,MAAA,OAAA;AAAA,KACF;AAEA,IAAA,IAAA,CAAK,cAAe,EAAA,CAAA;AACpB,IAAA,IAAA,CAAK,cAAe,EAAA,CAAA;AACpB,IAAA,IAAI,IAAK,CAAA,QAAA;AAAU,MAAK,IAAA,CAAA,IAAA,CAAK,WAAY,CAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AAEtD,IAAA,MAAA,CAAO,IAAK,CAAA,IAAA,CAAK,MAAM,CAAA,CAAE,QAAQ,CAAQ,IAAA,KAAA;AAEvC,MAAA7B,SAAA,CAAM,MAAM,IAAA,CAAK,IAAO,CAAA,EAAA,IAAA,CAAK,eAAe,CAAA,CAAA;AAAA,KAC7C,CAAA,CAAA;AAAA,GACH;AAAA,EACA,SAAY,GAAA;AArDd,IAAA,IAAA,EAAA,CAAA;AAsDI,IAAA,CAAA,EAAA,GAAA,IAAA,CAAK,aAAL,IAAe,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAA,EAAA,CAAA;AAAA,GACjB;AAAA,EACA,OAAS,EAAA;AAAA,IACP,cAAiB,GAAA;AACf,MAAA,MAAM,mBAA4C,EAAC,CAAA;AACnD,MAAM,MAAA,QAAA,GAAW,IAAIgD,oBAAe,EAAA,CAAA;AACpC,MAAK,IAAA,CAAA,UAAA,CAAW,QAAQ,CAAa,SAAA,KAAA;AACnC,QAAA,IAAI,SAAU,CAAA,IAAA,IAAQ,SAAU,CAAA,QAAA,IAAY,UAAU,KAAO,EAAA;AAC3D,UAAM,MAAA,eAAA,GAAkB,gBAAiB,CAAA,SAAA,CAAU,IAAQ,CAAA,GAAA,IAAIC,qBAAgB,CAAA,SAAA,CAAU,KAAO,EAAA,SAAA,CAAU,QAAU,EAAA,SAAA,CAAU,UAAU,CAAA,CAAA;AACxI,UAAS,QAAA,CAAA,YAAA,CAAa,SAAU,CAAA,IAAA,EAAM,eAAe,CAAA,CAAA;AAAA,SACvD;AAAA,OACD,CAAA,CAAA;AACD,MAAA,QAAA,CAAS,kBAAmB,EAAA,CAAA;AAC5B,MAAA,QAAA,CAAS,SAAS,SAAY,GAAA,IAAA,CAAA;AAC9B,MAAA,IAAA,CAAK,QAAW,GAAA,QAAA,CAAA;AAChB,MAAK,IAAA,CAAA,KAAA,CAAM,WAAW,QAAQ,CAAA,CAAA;AAAA,KAChC;AAAA,IACA,cAAiB,GAAA;AACf,MAAA,IAAI,CAAC,IAAK,CAAA,QAAA;AAAU,QAAA,OAAA;AACpB,MAAA,IAAI,IAAK,CAAA,OAAA;AAAS,QAAK,IAAA,CAAA,QAAA,CAAS,OAAQ,CAAA,IAAA,CAAK,OAAO,CAAA,CAAA;AACpD,MAAA,IAAI,IAAK,CAAA,OAAA;AAAS,QAAK,IAAA,CAAA,QAAA,CAAS,OAAQ,CAAA,IAAA,CAAK,OAAO,CAAA,CAAA;AACpD,MAAA,IAAI,IAAK,CAAA,OAAA;AAAS,QAAK,IAAA,CAAA,QAAA,CAAS,OAAQ,CAAA,IAAA,CAAK,OAAO,CAAA,CAAA;AAAA,KACtD;AAAA,IACA,eAAkB,GAAA;AAChB,MAAA,MAAM,SAAS,IAAK,CAAA,QAAA,CAAA;AACpB,MAAA,IAAA,CAAK,cAAe,EAAA,CAAA;AACpB,MAAA,IAAA,CAAK,cAAe,EAAA,CAAA;AACpB,MAAI,IAAA,IAAA,CAAK,YAAY,IAAK,CAAA,IAAA;AAAM,QAAK,IAAA,CAAA,IAAA,CAAK,WAAY,CAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AACnE,MAAQ,MAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,MAAA,CAAA,OAAA,EAAA,CAAA;AAAA,KACV;AAAA,GACF;AAAA,EACA,MAAS,GAAA;AAAE,IAAA,OAAO,EAAC,CAAA;AAAA,GAAE;AACvB,CAAC,EAAA;AAKe,SAAA,iBAAA,CACd,IACA,EAAA,KAAA,EACA,cACA,EAAA;AACA,EAAA,OAAOpB,mBAAgB,CAAA;AAAA,IACrB,IAAA;AAAA,IACA,OAAS,EAAA,QAAA;AAAA,IACT,KAAA;AAAA,IACA,OAAS,EAAA;AAAA,MACP,cAAiB,GAAA;AACf,QAAK,IAAA,CAAA,QAAA,GAAW,eAAe,IAAI,CAAA,CAAA;AACnC,QAAK,IAAA,CAAA,QAAA,CAAS,SAAS,SAAY,GAAA,IAAA,CAAA;AACnC,QAAK,IAAA,CAAA,KAAA,CAAM,SAAW,EAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AAAA,OACrC;AAAA,KACF;AAAA,GACD,CAAA,CAAA;AACH;;ACzGO,MAAMqB,OAAQ,GAAA;AAAA,EACnB,IAAM,EAAA,MAAA;AAAA,EACN,KAAO,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EAClC,MAAQ,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACnC,KAAO,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EAClC,aAAe,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EAC1C,cAAgB,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EAC3C,aAAe,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAC5C,CAAA,CAAA;AAEO,SAASC,iBAAe,IAAwB,EAAA;AACrD,EAAA,IAAI,KAAK,IAAM,EAAA;AACb,IAAA,OAAO,IAAIC,iBAAA,CAAY,IAAK,CAAA,IAAA,EAAM,IAAK,CAAA,IAAA,EAAM,IAAK,CAAA,IAAA,EAAM,IAAK,CAAA,aAAA,EAAe,IAAK,CAAA,cAAA,EAAgB,KAAK,aAAa,CAAA,CAAA;AAAA,GAC9G,MAAA;AACL,IAAA,OAAO,IAAIA,iBAAA,CAAY,IAAK,CAAA,KAAA,EAAO,IAAK,CAAA,MAAA,EAAQ,IAAK,CAAA,KAAA,EAAO,IAAK,CAAA,aAAA,EAAe,IAAK,CAAA,cAAA,EAAgB,KAAK,aAAa,CAAA,CAAA;AAAA,GACzH;AACF,CAAA;AAEA,kBAAe,iBAAA,CAAkB,aAAe,EAAAF,OAAA,EAAOC,gBAAc,CAAA;;AClB9D,MAAMD,OAAQ,GAAA;AAAA,EACnB,MAAQ,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACnC,QAAU,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACrC,UAAY,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACvC,aAAa,EAAE,IAAA,EAAM,QAAQ,OAAS,EAAA,IAAA,CAAK,KAAK,CAAE,EAAA;AACpD,CAAA,CAAA;AAEO,SAASC,iBAAe,IAA2B,EAAA;AACxD,EAAO,OAAA,IAAIE,qBAAe,IAAK,CAAA,MAAA,EAAQ,KAAK,QAAU,EAAA,IAAA,CAAK,UAAY,EAAA,IAAA,CAAK,WAAW,CAAA,CAAA;AACzF,CAAA;AAEA,qBAAe,iBAAA,CAAkB,gBAAkB,EAAAH,OAAA,EAAOC,gBAAc,CAAA;;ACXjE,MAAMD,OAAQ,GAAA;AAAA,EACnB,MAAQ,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACnC,MAAQ,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACnC,cAAgB,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EAC3C,cAAgB,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EAC3C,SAAW,EAAA,EAAE,IAAM,EAAA,OAAA,EAAS,SAAS,KAAM,EAAA;AAAA,EAC3C,UAAY,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACvC,aAAa,EAAE,IAAA,EAAM,QAAQ,OAAS,EAAA,IAAA,CAAK,KAAK,CAAE,EAAA;AACpD,CAAA,CAAA;AAEO,SAASC,iBAAe,IAAyB,EAAA;AACtD,EAAA,OAAO,IAAIG,kBAAA,CAAa,IAAK,CAAA,MAAA,EAAQ,KAAK,MAAQ,EAAA,IAAA,CAAK,cAAgB,EAAA,IAAA,CAAK,gBAAgB,IAAK,CAAA,SAAA,EAAW,IAAK,CAAA,UAAA,EAAY,KAAK,WAAW,CAAA,CAAA;AAC/I,CAAA;AAEA,mBAAe,iBAAA,CAAkB,cAAgB,EAAAJ,OAAA,EAAOC,gBAAc,CAAA;;ACd/D,MAAMD,OAAQ,GAAA;AAAA,EACnB,SAAW,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACtC,YAAc,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACzC,MAAQ,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACnC,cAAgB,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EAC3C,cAAgB,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EAC3C,SAAW,EAAA,EAAE,IAAM,EAAA,OAAA,EAAS,SAAS,KAAM,EAAA;AAAA,EAC3C,UAAY,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACvC,aAAa,EAAE,IAAA,EAAM,QAAQ,OAAS,EAAA,IAAA,CAAK,KAAK,CAAE,EAAA;AACpD,CAAA,CAAA;AAEO,SAASC,iBAAe,IAA6B,EAAA;AAC1D,EAAA,OAAO,IAAII,sBAAiB,CAAA,IAAA,CAAK,SAAW,EAAA,IAAA,CAAK,cAAc,IAAK,CAAA,MAAA,EAAQ,IAAK,CAAA,cAAA,EAAgB,KAAK,cAAgB,EAAA,IAAA,CAAK,WAAW,IAAK,CAAA,UAAA,EAAY,KAAK,WAAW,CAAA,CAAA;AACzK,CAAA;AAEA,uBAAe,iBAAA,CAAkB,kBAAoB,EAAAL,OAAA,EAAOC,gBAAc,CAAA;;ACfnE,MAAMD,OAAQ,GAAA;AAAA,EACnB,MAAQ,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACnC,MAAQ,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AACrC,CAAA,CAAA;AAEO,SAASC,iBAAe,IAAiC,EAAA;AAC9D,EAAA,OAAO,IAAIK,0BAAA,CAAqB,IAAK,CAAA,MAAA,EAAQ,KAAK,MAAM,CAAA,CAAA;AAC1D,CAAA;AAEA,2BAAe,iBAAA,CAAkB,sBAAwB,EAAAN,OAAA,EAAOC,gBAAc,CAAA;;ACRvE,MAAMD,OAAQ,GAAA;AAAA,EACnB,QAAQ,EAAE,IAAA,EAAM,CAAC,MAAA,EAAQ,KAAK,CAA+B,EAAA;AAAA,EAC7D,OAAA,EAAS,EAAE,IAAA,EAAM,MAA2C,EAAA;AAC9D,CAAA,CAAA;AAEO,SAASC,iBAAe,IAA4B,EAAA;AACzD,EAAA,OAAO,IAAIM,qBAAA,CAAgB,IAAK,CAAA,MAAA,EAAQ,KAAK,OAAO,CAAA,CAAA;AACtD,CAAA;AAEA,sBAAe,iBAAA,CAAkB,iBAAmB,EAAAP,OAAA,EAAOC,gBAAc,CAAA;;ACVlE,MAAMD,OAAQ,GAAA;AAAA,EACnB,MAAQ,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACnC,MAAQ,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AACrC,CAAA,CAAA;AAEO,SAASC,iBAAe,IAAgC,EAAA;AAC7D,EAAA,OAAO,IAAIO,yBAAA,CAAoB,IAAK,CAAA,MAAA,EAAQ,KAAK,MAAM,CAAA,CAAA;AACzD,CAAA;AAEA,0BAAe,iBAAA,CAAkB,qBAAuB,EAAAR,OAAA,EAAOC,gBAAc,CAAA;;ACTtE,MAAMD,OAAQ,GAAA;AAAA,EACnB,MAAQ,EAAA,KAAA;AAAA,EACR,QAAU,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,EAAG,EAAA;AAAA,EACtC,QAAU,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACrC,WAAW,EAAE,IAAA,EAAM,QAAQ,OAAS,EAAA,IAAA,CAAK,KAAK,CAAE,EAAA;AAClD,CAAA,CAAA;AAEO,SAASC,iBAAe,IAA0B,EAAA;AACvD,EAAO,OAAA,IAAIQ,oBAAc,IAAK,CAAA,MAAA,EAAQ,KAAK,QAAU,EAAA,IAAA,CAAK,QAAU,EAAA,IAAA,CAAK,SAAS,CAAA,CAAA;AACpF,CAAA;AAEA,oBAAe,iBAAA,CAAkB,eAAiB,EAAAT,OAAA,EAAOC,gBAAc,CAAA;;ACXhE,MAAMD,OAAQ,GAAA;AAAA,EACnB,MAAQ,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACnC,MAAQ,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AACrC,CAAA,CAAA;AAEO,SAASC,iBAAe,IAA+B,EAAA;AAC5D,EAAA,OAAO,IAAIS,wBAAA,CAAmB,IAAK,CAAA,MAAA,EAAQ,KAAK,MAAM,CAAA,CAAA;AACxD,CAAA;AAEA,yBAAe,iBAAA,CAAkB,oBAAsB,EAAAV,OAAA,EAAOC,gBAAc,CAAA;;ACTrE,MAAMD,OAAQ,GAAA;AAAA,EACnB,KAAO,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EAClC,MAAQ,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACnC,aAAe,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EAC1C,cAAgB,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAC7C,CAAA,CAAA;AAEO,SAASC,iBAAe,IAA0B,EAAA;AACvD,EAAO,OAAA,IAAIU,oBAAc,IAAK,CAAA,KAAA,EAAO,KAAK,MAAQ,EAAA,IAAA,CAAK,aAAe,EAAA,IAAA,CAAK,cAAc,CAAA,CAAA;AAC3F,CAAA;AAEA,oBAAe,iBAAA,CAAkB,eAAiB,EAAAX,OAAA,EAAOC,gBAAc,CAAA;;ACXhE,MAAMD,OAAQ,GAAA;AAAA,EACnB,QAAU,EAAA,KAAA;AAAA,EACV,OAAS,EAAA,KAAA;AAAA,EACT,MAAQ,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACnC,MAAQ,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AACrC,CAAA,CAAA;AAEO,SAASC,iBAAe,IAA+B,EAAA;AAC5D,EAAO,OAAA,IAAIW,yBAAmB,IAAK,CAAA,QAAA,EAAU,KAAK,OAAS,EAAA,IAAA,CAAK,MAAQ,EAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AACrF,CAAA;AAEA,yBAAe,iBAAA,CAAkB,oBAAsB,EAAAZ,OAAA,EAAOC,gBAAc,CAAA;;ACXrE,MAAMD,OAAQ,GAAA;AAAA,EACnB,WAAa,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,GAAI,EAAA;AAAA,EAC1C,WAAa,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACxC,aAAe,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EAC1C,WAAa,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACxC,UAAY,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACvC,aAAa,EAAE,IAAA,EAAM,QAAQ,OAAS,EAAA,IAAA,CAAK,KAAK,CAAE,EAAA;AACpD,CAAA,CAAA;AAEO,SAASC,iBAAe,IAAyB,EAAA;AACtD,EAAA,OAAO,IAAIY,kBAAA,CAAa,IAAK,CAAA,WAAA,EAAa,IAAK,CAAA,WAAA,EAAa,IAAK,CAAA,aAAA,EAAe,IAAK,CAAA,WAAA,EAAa,IAAK,CAAA,UAAA,EAAY,KAAK,WAAW,CAAA,CAAA;AACrI,CAAA;AAEA,mBAAe,iBAAA,CAAkB,cAAgB,EAAAb,OAAA,EAAOC,gBAAc,CAAA;;ACb/D,MAAMD,OAAQ,GAAA;AAAA,EACnB,MAAQ,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACnC,aAAe,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,EAAG,EAAA;AAAA,EAC3C,cAAgB,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,EAAG,EAAA;AAAA,EAC5C,QAAU,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACrC,WAAW,EAAE,IAAA,EAAM,QAAQ,OAAS,EAAA,IAAA,CAAK,KAAK,CAAE,EAAA;AAAA,EAChD,UAAY,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACvC,aAAa,EAAE,IAAA,EAAM,MAAQ,EAAA,OAAA,EAAS,KAAK,EAAG,EAAA;AAChD,CAAA,CAAA;AAEO,SAASC,iBAAe,IAA2B,EAAA;AACxD,EAAA,OAAO,IAAIa,oBAAA,CAAe,IAAK,CAAA,MAAA,EAAQ,KAAK,aAAe,EAAA,IAAA,CAAK,cAAgB,EAAA,IAAA,CAAK,UAAU,IAAK,CAAA,SAAA,EAAW,IAAK,CAAA,UAAA,EAAY,KAAK,WAAW,CAAA,CAAA;AAClJ,CAAA;AAEA,qBAAe,iBAAA,CAAkB,gBAAkB,EAAAd,OAAA,EAAOC,gBAAc,CAAA;;ACbjE,MAAMD,OAAQ,GAAA;AAAA,EACnB,QAAQ,EAAE,IAAA,EAAM,CAAC,MAAA,EAAQ,KAAK,CAA+B,EAAA;AAAA,EAC7D,aAAA,EAAe,EAAE,IAAA,EAAM,MAAO,EAAA;AAChC,CAAA,CAAA;AAEO,SAASC,iBAAe,IAA0B,EAAA;AACvD,EAAA,OAAO,IAAIc,mBAAA,CAAc,IAAK,CAAA,MAAA,EAAQ,KAAK,aAAa,CAAA,CAAA;AAC1D,CAAA;AAEA,oBAAe,iBAAA,CAAkB,eAAiB,EAAAf,OAAA,EAAOC,gBAAc,CAAA;;ACVhE,MAAMD,OAAQ,GAAA;AAAA,EACnB,MAAQ,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACnC,MAAQ,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AACrC,CAAA,CAAA;AAEO,SAASC,iBAAe,IAAgC,EAAA;AAC7D,EAAA,OAAO,IAAIe,yBAAA,CAAoB,IAAK,CAAA,MAAA,EAAQ,KAAK,MAAM,CAAA,CAAA;AACzD,CAAA;AAEA,0BAAe,iBAAA,CAAkB,qBAAuB,EAAAhB,OAAA,EAAOC,gBAAc,CAAA;;ACTtE,MAAMD,OAAQ,GAAA;AAAA,EACnB,MAAQ,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACnC,IAAM,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,GAAI,EAAA;AAAA,EACnC,cAAgB,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EAC3C,eAAiB,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EAC5C,KAAK,EAAE,IAAA,EAAM,QAAQ,OAAS,EAAA,IAAA,CAAK,KAAK,CAAE,EAAA;AAC5C,CAAA,CAAA;AAEO,SAASC,iBAAe,IAA0B,EAAA;AACvD,EAAO,OAAA,IAAIgB,mBAAc,CAAA,IAAA,CAAK,MAAQ,EAAA,IAAA,CAAK,IAAM,EAAA,IAAA,CAAK,cAAgB,EAAA,IAAA,CAAK,eAAiB,EAAA,IAAA,CAAK,GAAG,CAAA,CAAA;AACtG,CAAA;AAEA,oBAAe,iBAAA,CAAkB,eAAiB,EAAAjB,OAAA,EAAOC,gBAAc,CAAA;;ACZhE,MAAMD,OAAQ,GAAA;AAAA,EACnB,MAAQ,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACnC,IAAM,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,GAAI,EAAA;AAAA,EACnC,eAAiB,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,EAAG,EAAA;AAAA,EAC7C,cAAgB,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EAC3C,CAAG,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EAC9B,CAAG,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAChC,CAAA,CAAA;AAEO,SAASC,iBAAe,IAA8B,EAAA;AAC3D,EAAA,OAAO,IAAIiB,uBAAA,CAAkB,IAAK,CAAA,MAAA,EAAQ,IAAK,CAAA,IAAA,EAAM,IAAK,CAAA,eAAA,EAAiB,IAAK,CAAA,cAAA,EAAgB,IAAK,CAAA,CAAA,EAAG,KAAK,CAAC,CAAA,CAAA;AAChH,CAAA;AAEA,wBAAe,iBAAA,CAAkB,mBAAqB,EAAAlB,OAAA,EAAOC,gBAAc,CAAA;;ACZpE,MAAMD,OAAQ,GAAA;AAAA,EACnB,MAAQ,EAAA,KAAA;AAAA,EACR,IAAM,EAAAmB,WAAA;AAAA,EACN,eAAiB,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,EAAG,EAAA;AAAA,EAC7C,MAAQ,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACnC,cAAgB,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EAC3C,MAAQ,EAAA,EAAE,IAAM,EAAA,OAAA,EAAS,SAAS,KAAM,EAAA;AAC1C,CAAA,CAAA;AAEO,SAAS,eAAe,IAAyB,EAAA;AACtD,EAAI,IAAA,KAAA,CAAA;AACJ,EAAA,IAAI,KAAK,MAAQ,EAAA;AACf,IAAQ,KAAA,GAAA,IAAIC,sBAAiB,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAAA,GAC1C,MAAA,IAAW,KAAK,IAAM,EAAA;AACpB,IAAA,KAAA,GAAQ,IAAK,CAAA,IAAA,CAAA;AAAA,GACR,MAAA;AACL,IAAA,OAAA,CAAQ,MAAM,+BAA+B,CAAA,CAAA;AAAA,GAC/C;AACA,EAAO,OAAA,IAAIC,kBAAa,CAAA,KAAA,EAAO,IAAK,CAAA,eAAA,EAAiB,KAAK,MAAQ,EAAA,IAAA,CAAK,cAAgB,EAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AACpG,CAAA;AAEA,mBAAe1C,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,QAAA;AAAA,SACTqB,OAAA;AAAA,EACA,OAAS,EAAA;AAAA,IACP,cAAiB,GAAA;AACf,MAAK,IAAA,CAAA,QAAA,GAAW,eAAe,IAAI,CAAA,CAAA;AAAA,KACrC;AAAA,IAEA,aAAa,MAAmB,EAAA;AAC9B,MAAyB,wBAAA,CAAA,IAAA,CAAK,UAA0B,MAAM,CAAA,CAAA;AAAA,KAChE;AAAA,GACF;AACF,CAAC,CAAA,CAAA;AAEe,SAAA,wBAAA,CAAyB,MAAoB,MAAyB,EAAA;AACpF,EAAM,MAAA,KAAA,GAAQ,IAAIoB,sBAAA,CAAiB,MAAM,CAAA,CAAA;AACzC,EAAA,MAAM,EAAE,cAAgB,EAAA,MAAA,EAAQ,eAAiB,EAAA,MAAA,KAAW,IAAK,CAAA,UAAA,CAAA;AACjE,EAAA,MAAM,MAAS,GAAA,KAAA,CAAM,mBAAoB,CAAA,eAAA,EAAiB,MAAM,CAAA,CAAA;AAChE,EAAA,IAAA,CAAK,WAAW,MAAO,CAAA,QAAA,CAAA;AACvB,EAAA,IAAA,CAAK,UAAU,MAAO,CAAA,OAAA,CAAA;AACtB,EAAA,IAAA,CAAK,YAAY,MAAO,CAAA,SAAA,CAAA;AACxB,EAAA,IAAA,CAAK,WAAW,IAAO,GAAA,KAAA,CAAA;AAEvB,EAAM,MAAA,UAAA,GAAa,IAAK,CAAA,YAAA,CAAa,UAAU,CAAA,CAAA;AAC/C,EAAM,MAAA,UAAA,GAAa,IAAK,CAAA,YAAA,CAAa,QAAQ,CAAA,CAAA;AAE7C,EAAM,MAAA,MAAA,GAAS,IAAIjE,aAAQ,EAAA,CAAA;AAC3B,EAAM,MAAA,CAAA,GAAI,IAAIA,aAAQ,EAAA,CAAA;AAEtB,EAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,eAAA,EAAiB,CAAK,EAAA,EAAA;AACxC,IAAA,aAAA,CAAc,CAAC,CAAA,CAAA;AAAA,GACjB;AACA,EAAA,aAAA,CAAc,eAAe,CAAA,CAAA;AAE7B,EAAK,IAAA,CAAA,UAAA,CAAW,SAAS,WAAc,GAAA,IAAA,CAAA;AACvC,EAAK,IAAA,CAAA,UAAA,CAAW,OAAO,WAAc,GAAA,IAAA,CAAA;AAErC,EAAA,SAAS,cAAc,CAAW,EAAA;AAChC,IAAM,KAAA,CAAA,UAAA,CAAW,CAAI,GAAA,eAAA,EAAiB,CAAC,CAAA,CAAA;AACvC,IAAM,MAAA,CAAA,GAAI,OAAO,OAAQ,CAAA,CAAA,CAAA,CAAA;AACzB,IAAM,MAAA,CAAA,GAAI,OAAO,SAAU,CAAA,CAAA,CAAA,CAAA;AAC3B,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAK,IAAA,cAAA,EAAgB,CAAK,EAAA,EAAA;AACxC,MAAA,MAAM,CAAI,GAAA,CAAA,GAAI,cAAiB,GAAA,IAAA,CAAK,EAAK,GAAA,CAAA,CAAA;AACzC,MAAM,MAAA,GAAA,GAAM,IAAK,CAAA,GAAA,CAAI,CAAC,CAAA,CAAA;AACtB,MAAA,MAAM,GAAM,GAAA,CAAC,IAAK,CAAA,GAAA,CAAI,CAAC,CAAA,CAAA;AACvB,MAAA,MAAA,CAAO,CAAK,GAAA,GAAA,GAAM,CAAE,CAAA,CAAA,GAAI,MAAM,CAAE,CAAA,CAAA,CAAA;AAChC,MAAA,MAAA,CAAO,CAAK,GAAA,GAAA,GAAM,CAAE,CAAA,CAAA,GAAI,MAAM,CAAE,CAAA,CAAA,CAAA;AAChC,MAAA,MAAA,CAAO,CAAK,GAAA,GAAA,GAAM,CAAE,CAAA,CAAA,GAAI,MAAM,CAAE,CAAA,CAAA,CAAA;AAChC,MAAA,MAAA,CAAO,SAAU,EAAA,CAAA;AACjB,MAAM,MAAA,KAAA,GAAS,CAAK,IAAA,cAAA,GAAiB,CAAK,CAAA,GAAA,CAAA,CAAA;AAC1C,MAAA,UAAA,CAAW,OAAO,KAAO,EAAA,MAAA,CAAO,GAAG,MAAO,CAAA,CAAA,EAAG,OAAO,CAAC,CAAA,CAAA;AACrD,MAAA,UAAA,CAAW,OAAO,KAAO,EAAA,CAAA,CAAE,CAAI,GAAA,MAAA,GAAS,OAAO,CAAG,EAAA,CAAA,CAAE,CAAI,GAAA,MAAA,GAAS,OAAO,CAAG,EAAA,CAAA,CAAE,CAAI,GAAA,MAAA,GAAS,OAAO,CAAC,CAAA,CAAA;AAAA,KACpG;AAAA,GACF;AACF;;ACtEA,YAAewB,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,QAAA;AAAA,EACT,IAAM,EAAA,OAAA;AAAA,EACN,KAAO,EAAA;AAAA,IACL,KAAO,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,SAAU,EAAA;AAAA,IAC1C,SAAW,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,IACtC,UAAY,EAAA,EAAE,IAAM,EAAA,OAAA,EAAS,SAAS,KAAM,EAAA;AAAA,IAC5C,aAAA,EAAe,EAAE,IAAA,EAAM,MAA0C,EAAA,OAAA,EAAS,OAAO,EAAE,CAAG,EAAA,GAAA,EAAK,CAAG,EAAA,GAAA,EAAO,CAAA,EAAA;AAAA,IACrG,cAAc,EAAE,IAAA,EAAM,QAAQ,OAAS,EAAA,OAAO,EAAI,CAAA,EAAA;AAAA,GACpD;AAAA,EACA,KAA6B,GAAA;AAC3B,IAAA,OAAO,EAAC,CAAA;AAAA,GACV;AAAA,EACA,SAAY,GAAA;AACV,IAAA,IAAI,IAAK,CAAA,KAAA,YAAiB2C,eAAa,IAAA,IAAA,CAAK,iBAAiBC,sBAAkB,EAAA;AAC7E,MAAK,IAAA,CAAA,gBAAA,CAAiB,IAAK,CAAA,KAAA,CAAM,MAAM,CAAA,CAAA;AAAA,KACzC;AAAA,GACF;AAAA,EACA,OAAS,EAAA;AAAA,IACP,UAAU,KAAc,EAAA;AACtB,MAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AAEb,MAAA,IAAK,MAAc,MAAQ,EAAA;AACzB,QAAA,KAAA,CAAM,aAAa,IAAK,CAAA,UAAA,CAAA;AAExB,QAAA,WAAA,CAAY,KAAM,CAAA,MAAA,CAAO,OAAS,EAAA,IAAA,CAAK,aAAa,CAAA,CAAA;AAEpD,QAAA,WAAA,CAAY,KAAM,CAAA,MAAA,CAAO,MAAQ,EAAA,IAAA,CAAK,YAAY,CAAA,CAAA;AAAA,OACpD;AAEA,MAAA,CAAC,OAAS,EAAA,WAAA,EAAa,YAAY,CAAA,CAAE,QAAQ,CAAK,CAAA,KAAA;AAEhD,QAAAzE,SAAA,CAAM,MAAM,IAAA,CAAK,CAAI,CAAA,EAAA,CAAC,KAAU,KAAA;AAC9B,UAAA,IAAI,MAAM,OAAS,EAAA;AACjB,YAAM,KAAA,CAAA,KAAA,CAAM,IAAI,KAAK,CAAA,CAAA;AAAA,WAChB,MAAA;AAEL,YAAA,KAAA,CAAM,CAAK,CAAA,GAAA,KAAA,CAAA;AAAA,WACb;AAAA,SACD,CAAA,CAAA;AAAA,OACF,CAAA,CAAA;AAED,MAAA,IAAA,CAAK,aAAa,KAAK,CAAA,CAAA;AAEvB,MAAI,IAAA,KAAA,YAAiBwE,eAAa,IAAA,KAAA,YAAiBC,sBAAkB,EAAA;AACnE,QAAA,QAAA,CAAS,IAAM,EAAA,QAAA,EAAU,KAAM,CAAA,MAAA,EAAQ,UAAU,CAAA,CAAA;AACjD,QAAK,IAAA,CAAA,WAAA,CAAY,MAAM,MAAM,CAAA,CAAA;AAAA,OAC/B;AAAA,KACF;AAAA,GACF;AAAA,EACA,OAAS,EAAA,OAAA;AACX,CAAC,CAAA;;ACxDD,mBAAe5C,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,KAAA;AAAA,EACT,OAAU,GAAA;AACR,IAAA,IAAA,CAAK,UAAU,IAAI6C,kBAAA,CAAa,KAAK,KAAO,EAAA,IAAA,CAAK,SAAS,CAAC,CAAA,CAAA;AAAA,GAC7D;AAAA,EACA,OAAS,EAAA,cAAA;AACX,CAAC,CAAA;;ACLD,uBAAe7C,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,KAAA;AAAA,EACT,KAAO,EAAA;AAAA,IACL,MAAQ,EAAA,EAAE,IAAM,EAAA,MAAA,EAA0C,OAAS,EAAA,OAAO,EAAE,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,CAAA,EAAG,GAAK,CAAA,EAAA;AAAA,GAClG;AAAA,EACA,OAAU,GAAA;AACR,IAAA,IAAA,CAAK,UAAU,IAAI4C,sBAAA,CAAiB,KAAK,KAAO,EAAA,IAAA,CAAK,SAAS,CAAC,CAAA,CAAA;AAAA,GACjE;AAAA,EACA,OAAS,EAAA,kBAAA;AACX,CAAC,CAAA;;ACVD,sBAAe5C,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,KAAA;AAAA,EACT,KAAO,EAAA;AAAA,IACL,WAAa,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,SAAU,EAAA;AAAA,GAClD;AAAA,EACA,OAAU,GAAA;AACR,IAAM,MAAA,KAAA,GAAQ,IAAI8C,qBAAgB,CAAA,IAAA,CAAK,OAAO,IAAK,CAAA,WAAA,EAAa,KAAK,SAAS,CAAA,CAAA;AAC9E,IAAA3E,SAAA,CAAM,MAAM,IAAA,CAAK,WAAa,EAAA,CAAC,KAAU,KAAA;AAAE,MAAM,KAAA,CAAA,WAAA,CAAY,IAAI,KAAK,CAAA,CAAA;AAAA,KAAG,CAAA,CAAA;AACzE,IAAA,IAAA,CAAK,UAAU,KAAK,CAAA,CAAA;AAAA,GACtB;AAAA,EACA,OAAS,EAAA,iBAAA;AACX,CAAC,CAAA;;ACXD,iBAAe6B,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,KAAA;AAAA,EACT,KAAO,EAAA;AAAA,IACL,QAAU,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,IACrC,KAAO,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,GACpC;AAAA,EACA,OAAU,GAAA;AACR,IAAK,IAAA,CAAA,SAAA,CAAU,IAAI+C,gBAAA,CAAW,IAAK,CAAA,KAAA,EAAO,IAAK,CAAA,SAAA,EAAW,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,KAAK,CAAC,CAAA,CAAA;AAAA,GACtF;AAAA,EACA,OAAS,EAAA,YAAA;AACX,CAAC,CAAA;;ACRD,oBAAe/C,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,KAAA;AAAA,EACT,KAAO,EAAA;AAAA,IACL,KAAO,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,EAAG,EAAA;AAAA,IACnC,MAAQ,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,EAAG,EAAA;AAAA,IACpC,MAAQ,EAAA,OAAA;AAAA,GACV;AAAA,EACA,OAAU,GAAA;AACR,IAAAgD,oDAAA,CAAyB,IAAK,EAAA,CAAA;AAC9B,IAAM,MAAA,KAAA,GAAQ,IAAIC,mBAAA,CAAc,IAAK,CAAA,KAAA,EAAO,KAAK,SAAW,EAAA,IAAA,CAAK,KAAO,EAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAEnF,IAAM,MAAA,UAAA,GAAa,CAAC,OAAA,EAAS,QAAQ,CAAA,CAAA;AACrC,IAAA,UAAA,CAAW,QAAQ,CAAK,CAAA,KAAA;AAEtB,MAAA9E,SAAA,CAAM,MAAM,IAAA,CAAK,CAAI,CAAA,EAAA,CAAC,KAAU,KAAA;AAAE,QAAA,KAAA,CAAM,CAAK,CAAA,GAAA,KAAA,CAAA;AAAA,OAAO,CAAA,CAAA;AAAA,KACrD,CAAA,CAAA;AAED,IAAA,IAAI,KAAK,MAAQ,EAAA;AACf,MAAM,MAAA,WAAA,GAAc,IAAI+E,0CAAA,CAAoB,KAAK,CAAA,CAAA;AACjD,MAAA,KAAA,CAAM,IAAI,WAAW,CAAA,CAAA;AAAA,KACvB;AAEA,IAAA,IAAA,CAAK,UAAU,KAAK,CAAA,CAAA;AAAA,GACtB;AAAA,EACA,OAAS,EAAA,eAAA;AACX,CAAC,CAAA;;AC3BD,gBAAelD,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,KAAA;AAAA,EACT,KAAO,EAAA;AAAA,IACL,OAAO,EAAE,IAAA,EAAM,QAAQ,OAAS,EAAA,IAAA,CAAK,KAAK,CAAE,EAAA;AAAA,IAC5C,KAAO,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,IAClC,QAAU,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,IACrC,QAAU,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,IACrC,MAAQ,EAAA,MAAA;AAAA,GACV;AAAA,EACA,OAAU,GAAA;AACR,IAAA,MAAM,KAAQ,GAAA,IAAI2C,eAAU,CAAA,IAAA,CAAK,OAAO,IAAK,CAAA,SAAA,EAAW,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,KAAA,EAAO,IAAK,CAAA,QAAA,EAAU,KAAK,KAAK,CAAA,CAAA;AAE5G,IAAA,MAAM,UAAa,GAAA,CAAC,OAAS,EAAA,OAAA,EAAS,YAAY,UAAU,CAAA,CAAA;AAC5D,IAAA,UAAA,CAAW,QAAQ,CAAK,CAAA,KAAA;AAEtB,MAAAxE,SAAA,CAAM,MAAM,IAAA,CAAK,CAAI,CAAA,EAAA,CAAC,KAAU,KAAA;AAAE,QAAA,KAAA,CAAM,CAAK,CAAA,GAAA,KAAA,CAAA;AAAA,OAAO,CAAA,CAAA;AAAA,KACrD,CAAA,CAAA;AAED,IAAA,IAAA,CAAK,UAAU,KAAK,CAAA,CAAA;AAAA,GACtB;AAAA,EACA,OAAS,EAAA,WAAA;AACX,CAAC,CAAA;;ACPY,MAAA,oBAAA,GAA8D,OAAO,UAAU,EAAA;AAE5F,MAAM,eAAe6B,mBAAgB,CAAA;AAAA,EACnC,KAAA,EAAO,CAAC,SAAS,CAAA;AAAA,EACjB,KAAO,EAAA;AAAA,IACL,KAAO,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,SAAU,EAAA;AAAA,IAC1C,OAAO,EAAE,IAAA,EAAM,QAA4C,OAAS,EAAA,OAAO,EAAI,CAAA,EAAA;AAAA,GACjF;AAAA,EACA,MAAQ,EAAA;AAAA,IACN,IAAM,EAAA,gBAAA;AAAA,GACR;AAAA,EACA,KAAgC,GAAA;AAC9B,IAAA,OAAO,EAAC,CAAA;AAAA,GACV;AAAA,EACA,OAAU,GAAA;AACR,IAAO,OAAA;AAAA,MACL,CAAC,oBAAiC,GAAA,IAAA;AAAA,KACpC,CAAA;AAAA,GACF;AAAA,EACA,OAAU,GAAA;AACR,IAAI,IAAA,CAAC,KAAK,IAAM,EAAA;AACd,MAAA,OAAA,CAAQ,MAAM,qBAAqB,CAAA,CAAA;AACnC,MAAA,OAAA;AAAA,KACF;AAEA,IAAA,IAAI,KAAK,cAAgB,EAAA;AACvB,MAAA,MAAM,QAAW,GAAA,IAAA,CAAK,QAAW,GAAA,IAAA,CAAK,cAAe,EAAA,CAAA;AAErD,MAAA7B,SAAA,CAAM,MAAM,IAAA,CAAK,KAAO,EAAA,CAAC,KAAU,KAAA;AAAE,QAAS,QAAA,CAAA,KAAA,CAAM,IAAI,KAAK,CAAA,CAAA;AAAA,OAAG,CAAA,CAAA;AAChE,MAAA,cAAA,CAAe,IAAM,EAAA,OAAA,EAAS,QAAU,EAAA,KAAA,EAAO,KAAK,OAAO,CAAA,CAAA;AAC3D,MAAK,IAAA,CAAA,KAAA,CAAM,WAAW,QAAQ,CAAA,CAAA;AAC9B,MAAK,IAAA,CAAA,IAAA,CAAK,YAAY,QAAQ,CAAA,CAAA;AAAA,KAChC;AAAA,GACF;AAAA,EACA,SAAY,GAAA;AApDd,IAAA,IAAA,EAAA,CAAA;AAqDI,IAAA,CAAA,EAAA,GAAA,IAAA,CAAK,aAAL,IAAe,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAA,EAAA,CAAA;AAAA,GACjB;AAAA,EACA,OAAS,EAAA;AAAA,IACP,iBAAoB,GAAA;AAClB,MAAO,OAAA,EAAE,GAAG,WAAA,CAAY,IAAK,CAAA,MAAA,EAAQ,CAAC,OAAO,CAAC,CAAA,EAAG,GAAG,IAAA,CAAK,KAAM,EAAA,CAAA;AAAA,KACjE;AAAA,IACA,OAAQ,CAAA,QAAA,EAAe,GAAa,EAAA,KAAA,EAAY,cAAc,KAAO,EAAA;AACnE,MAAA,MAAM,SAAS,QAAS,CAAA,GAAA,CAAA,CAAA;AACxB,MAAA,IAAI,MAAkB,YAAAmB,WAAA;AAAO,QAAA,MAAA,CAAO,IAAI,KAAK,CAAA,CAAA;AAAA;AACxC,QAAA,QAAA,CAAS,GAAO,CAAA,GAAA,KAAA,CAAA;AACrB,MAAA,QAAA,CAAS,WAAc,GAAA,WAAA,CAAA;AAAA,KACzB;AAAA,IACA,UAAA,CAAW,OAAyB,EAAA,GAAA,GAAM,KAAO,EAAA;AAC/C,MAAA,IAAA,CAAK,OAAQ,CAAA,IAAA,CAAK,QAAU,EAAA,GAAA,EAAK,SAAS,IAAI,CAAA,CAAA;AAAA,KAChD;AAAA,GACF;AAAA,EACA,MAAS,GAAA;AACP,IAAA,OAAO,KAAK,MAAO,CAAA,OAAA,GAAU,KAAK,MAAO,CAAA,OAAA,KAAY,EAAC,CAAA;AAAA,GACxD;AAAA,EACA,OAAS,EAAA,UAAA;AACX,CAAC,EAAA;AAKe,SAAA,iBAAA,CACd,IACA,EAAA,KAAA,EACA,cACA,EAAA;AACA,EAAA,OAAOU,mBAAgB,CAAA;AAAA,IACrB,IAAA;AAAA,IACA,OAAS,EAAA,YAAA;AAAA,IACT,KAAA;AAAA,IACA,OAAS,EAAA;AAAA,MACP,cAAiB,GAAA;AACf,QAAO,OAAA,cAAA,CAAe,IAAK,CAAA,iBAAA,EAAmB,CAAA,CAAA;AAAA,OAChD;AAAA,KACF;AAAA,GACD,CAAA,CAAA;AACH,CAAA;AAGO,MAAM,gBAAgB,iBAAkB,CAAA,eAAA,EAAiB,EAAE,KAAO,EAAA,EAAE,MAAM,MAAiD,EAAA,OAAA,EAAS,OAAO,EAAC,CAAA,IAAQ,EAAA,CAAC,SAAS,IAAIP,uBAAA,CAAkB,IAAI,CAAC,EAAA;AACzL,MAAM,kBAAkB,iBAAkB,CAAA,iBAAA,EAAmB,EAAE,KAAO,EAAA,EAAE,MAAM,MAAmD,EAAA,OAAA,EAAS,OAAO,EAAC,CAAA,IAAQ,EAAA,CAAC,SAAS,IAAIE,yBAAA,CAAoB,IAAI,CAAC,EAAA;AACjM,MAAM,gBAAgB,iBAAkB,CAAA,eAAA,EAAiB,EAAE,KAAO,EAAA,EAAE,MAAM,MAAiD,EAAA,OAAA,EAAS,OAAO,EAAC,CAAA,IAAQ,EAAA,CAAC,SAAS,IAAIH,uBAAA,CAAkB,IAAI,CAAC,EAAA;AACzL,MAAM,mBAAmB,iBAAkB,CAAA,kBAAA,EAAoB,EAAE,KAAO,EAAA,EAAE,MAAM,MAAoD,EAAA,OAAA,EAAS,OAAO,EAAC,CAAA,IAAQ,EAAA,CAAC,SAAS,IAAI2D,0BAAA,CAAqB,IAAI,CAAC,EAAA;AACrM,MAAM,iBAAiB,iBAAkB,CAAA,gBAAA,EAAkB,EAAE,KAAO,EAAA,EAAE,MAAM,MAAkD,EAAA,OAAA,EAAS,OAAO,EAAC,CAAA,IAAQ,EAAA,CAAC,SAAS,IAAIC,oBAAA,CAAgB,IAAI,CAAC,EAAA;AACpL,MAAA,cAAA,GAAiB,iBAAkB,CAAA,gBAAA,EAAkB,EAAE,KAAA,EAAO,EAAE,IAAA,EAAM,MAAQ,EAAA,OAAA,EAAS,SAAU,EAAA,EAAG,KAAO,EAAA,EAAE,MAAM,MAA4C,EAAA,OAAA,EAAS,OAAO,EAAI,CAAA,EAAA,EAAK,EAAA,CAAC,IAAS,KAAA,IAAIC,oBAAgB,CAAA,IAAI,CAAC,EAAA;AACjO,MAAM,mBAAmB,iBAAkB,CAAA,kBAAA,EAAoB,EAAE,KAAO,EAAA,EAAE,MAAM,MAAoD,EAAA,OAAA,EAAS,OAAO,EAAC,CAAA,IAAQ,EAAA,CAAC,SAAS,IAAI9D,0BAAA,CAAqB,IAAI,CAAC,EAAA;AACrM,MAAM,eAAe,iBAAkB,CAAA,cAAA,EAAgB,EAAE,KAAO,EAAA,EAAE,MAAM,MAAgD,EAAA,OAAA,EAAS,OAAO,EAAC,CAAA,IAAQ,EAAA,CAAC,SAAS,IAAI+D,sBAAA,CAAiB,IAAI,CAAC;;ACnG5L,qBAAe,iBAAA;AAAA,EACb,gBAAA;AAAA,EACA;AAAA,IACE,GAAK,EAAA,MAAA;AAAA,IACL,IAAM,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,6BAA8B,EAAA;AAAA,GAC/D;AAAA,EACA,CAAC,IAAS,KAAA;AACR,IAAA,MAAM,MAAM,IAAK,CAAA,GAAA,GAAM,KAAK,GAAM,GAAA,YAAA,CAAa,KAAK,IAAI,CAAA,CAAA;AACxD,IAAA,MAAM,SAAS,WAAY,CAAA,IAAA,EAAM,CAAC,KAAA,EAAO,MAAM,CAAC,CAAA,CAAA;AAChD,IAAA,MAAA,CAAO,MAAS,GAAA,IAAIC,mBAAc,EAAA,CAAE,KAAK,GAAG,CAAA,CAAA;AAC5C,IAAO,OAAA,IAAIC,yBAAmB,MAAM,CAAA,CAAA;AAAA,GACtC;AACF,CAAA;;ACZA,MAAM,mBAAsB,GAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAA,CAAA;AAQ5B,MAAM,qBAAwB,GAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAA,CAAA;AAO9B,qBAAe,iBAAA;AAAA,EACb,gBAAA;AAAA,EACA;AAAA,IACE,KAAO,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,OAAO;AAAA,MACrC,UAAU,EAAC;AAAA,MACX,YAAc,EAAA,mBAAA;AAAA,MACd,cAAgB,EAAA,qBAAA;AAAA,KACf,CAAA,EAAA;AAAA,GACL;AAAA,EACA,CAAC,SAAS,IAAIC,oBAAA,CAAe,YAAY,IAAM,EAAA,CAAC,OAAO,CAAC,CAAC,CAAA;AAC3D,CAAA;;ACdA,SAAS,UAAA,CAAW,MAAgB,EAAA,IAAA,EAAc,OAAiB,EAAA;AACjE,EAAA,OAAO,MAAO,CAAA,KAAA,CAAM,IAAI,CAAA,CAAE,KAAK,OAAO,CAAA,CAAA;AACxC,CAAA;AAEA,MAAM,iBAAA,GAAoBC,kBAAY,cAAe,CAAA,KAAA,CAAM,GAAGA,iBAAY,CAAA,cAAA,CAAe,OAAQ,CAAA,eAAe,CAAC,CAAA,CAAA;AACjH,MAAM,iBAAA,GAAoBA,kBAAY,cAAe,CAAA,KAAA,CAAMA,kBAAY,cAAe,CAAA,OAAA,CAAQ,eAAe,CAAC,CAAA,CAAA;AAE9G,MAAM,0BAA6B,GAAA;AAAA,EAEjC,QAAA,EAAUC,oBAAc,KAAM,CAAA;AAAA,IAC5BC,gBAAU,KAAM,CAAA,QAAA;AAAA,IAChB;AAAA,MACE,gBAAgB,EAAE,KAAA,EAAO,IAAItE,WAAA,CAAM,QAAQ,CAAE,EAAA;AAAA,MAC7C,mBAAA,EAAqB,EAAE,KAAA,EAAO,GAAI,EAAA;AAAA,MAClC,gBAAA,EAAkB,EAAE,KAAA,EAAO,CAAI,EAAA;AAAA,MAC/B,oBAAA,EAAsB,EAAE,KAAA,EAAO,GAAI,EAAA;AAAA,MACnC,cAAA,EAAgB,EAAE,KAAA,EAAO,CAAI,EAAA;AAAA,MAC7B,cAAA,EAAgB,EAAE,KAAA,EAAO,EAAK,EAAA;AAAA,KAChC;AAAA,GACD,CAAA;AAAA,EAED,YAAc,EAAA,CAAA;AAAA;AAAA,IAAA,EAEVoE,iBAAY,CAAA,cAAA,CAAA;AAAA,EAAA,CAAA;AAAA,EAGhB,cAAgB,EAAA,CAAA;AAAA;AAAA;AAAA;AAAA,IAIZ,EAAA,iBAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAA,CAAA,GAoBA,iBAAkB,CAAA,OAAA;AAAA,IACpB,kCAAA;AAAA,IACA,UAAA;AAAA,MACEA,iBAAY,CAAA,qBAAA;AAAA,MACZ,+DAAA;AAAA,MACA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAA,CAAA;AAAA,KAMF;AAAA,GACF;AACF,CAAA;;AC9DA,yBAAe1D,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAAZ,YAAA;AAAA,EACT,KAAO,EAAA;AAAA,IACL,QAAU,EAAA,EAAE,IAAM,EAAA,MAAA,EAAyD,SAAS,OAAO;AAAA,MACzF,OAAS,EAAA,SAAA;AAAA,MACT,cAAgB,EAAA,SAAA;AAAA,MAChB,mBAAqB,EAAA,GAAA;AAAA,MACrB,gBAAkB,EAAA,IAAA;AAAA,MAClB,oBAAsB,EAAA,GAAA;AAAA,MACtB,cAAgB,EAAA,CAAA;AAAA,MAChB,cAAgB,EAAA,CAAA;AAAA,KACf,CAAA,EAAA;AAAA,GACL;AAAA,EACA,OAAS,EAAA;AAAA,IACP,cAAiB,GAAA;AACf,MAAA,MAAM,MAAS,GAAA,0BAAA,CAAA;AACf,MAAA,MAAM,QAAW,GAAAuE,mBAAA,CAAc,KAAM,CAAA,MAAA,CAAO,QAAQ,CAAA,CAAA;AAEpD,MAAA,cAAA,CAAe,MAAM,UAAY,EAAA,QAAA,EAAU,MAAM,CAAC,GAAA,EAAU,KAAa,KAAe,KAAA;AACtF,QAAM,MAAA,MAAA,GAAS,IAAI,GAAK,CAAA,CAAA,KAAA,CAAA;AACxB,QAAA,IAAI,MAAkB,YAAArE,WAAA;AAAO,UAAA,MAAA,CAAO,IAAI,KAAK,CAAA,CAAA;AAAA;AACxC,UAAA,GAAA,CAAI,KAAK,KAAQ,GAAA,KAAA,CAAA;AAAA,OACvB,CAAA,CAAA;AAED,MAAM,MAAA,QAAA,GAAW,IAAImE,oBAAe,CAAA;AAAA,QAClC,GAAG,MAAA;AAAA,QACH,MAAQ,EAAA,IAAA;AAAA,QACR,GAAG,IAAK,CAAA,KAAA;AAAA,QACR,QAAA;AAAA,OACD,CAAA,CAAA;AAED,MAAO,OAAA,QAAA,CAAA;AAAA,KACT;AAAA,GACF;AACF,CAAC,CAAA;;ACxCD,cAAezD,mBAAgB,CAAA;AAAA,EAC7B,MAAQ,EAAA;AAAA,IACN,QAAU,EAAA,oBAAA;AAAA,GACZ;AAAA,EACA,KAAO,EAAA;AAAA,IACL,IAAM,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,KAAM,EAAA;AAAA,IACrC,OAAS,EAAA,MAAA;AAAA,IACT,GAAK,EAAA,MAAA;AAAA,IACL,MAAQ,EAAA,QAAA;AAAA,IACR,UAAY,EAAA,QAAA;AAAA,IACZ,OAAS,EAAA,QAAA;AAAA,IACT,OAAO,EAAE,IAAA,EAAM,QAAQ,OAAS,EAAA,OAAO,EAAI,CAAA,EAAA;AAAA,GAC7C;AAAA,EACA,KAAyB,GAAA;AACvB,IAAA,OAAO,EAAC,CAAA;AAAA,GACV;AAAA,EACA,OAAU,GAAA;AACR,IAAA,IAAA,CAAK,cAAe,EAAA,CAAA;AACpB,IAAA7B,SAAA,CAAM,MAAM,IAAA,CAAK,GAAK,EAAA,IAAA,CAAK,cAAc,CAAA,CAAA;AAAA,GAC3C;AAAA,EACA,SAAY,GAAA;AA9Bd,IAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AA+BI,IAAA,CAAA,EAAA,GAAA,IAAA,CAAK,QAAL,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAe,UAAW,CAAA,IAAA,EAAM,IAAK,CAAA,IAAA,CAAA,CAAA;AACrC,IAAA,CAAA,EAAA,GAAA,IAAA,CAAK,YAAL,IAAc,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAA,EAAA,CAAA;AAAA,GAChB;AAAA,EACA,OAAS,EAAA;AAAA,IACP,aAAgB,GAAA;AACd,MAAA,IAAI,CAAC,IAAK,CAAA,GAAA;AAAK,QAAO,OAAA,KAAA,CAAA,CAAA;AACtB,MAAO,OAAA,IAAIoF,mBAAc,EAAA,CAAE,IAAK,CAAA,IAAA,CAAK,GAAK,EAAA,IAAA,CAAK,QAAU,EAAA,IAAA,CAAK,UAAY,EAAA,IAAA,CAAK,OAAO,CAAA,CAAA;AAAA,KACxF;AAAA,IACA,WAAc,GAAA;AACZ,MAAA,IAAI,CAAC,IAAK,CAAA,OAAA;AAAS,QAAA,OAAA;AAEnB,MAAe,cAAA,CAAA,IAAA,EAAM,OAAS,EAAA,IAAA,CAAK,OAAO,CAAA,CAAA;AAC1C,MAAA,IAAI,CAAC,IAAK,CAAA,QAAA;AAAU,QAAA,OAAA;AAEpB,MAAA,IAAA,CAAK,QAAS,CAAA,UAAA,CAAW,IAAK,CAAA,OAAA,EAAS,KAAK,IAAI,CAAA,CAAA;AAChD,MAAA,IAAI,IAAK,CAAA,QAAA,CAAS,QAAoB,YAAAE,oBAAA,IAAkB,KAAK,OAAS,EAAA;AACpE,QAAC,IAAA,CAAK,SAAS,QAAU,CAAA,QAAA,CAAS,KAAK,OAAW,CAAA,GAAA,EAAE,KAAO,EAAA,IAAA,CAAK,OAAQ,EAAA,CAAA;AAAA,OAC1E;AAAA,KACF;AAAA,IACA,cAAiB,GAAA;AAlDrB,MAAA,IAAA,EAAA,CAAA;AAmDM,MAAA,CAAA,EAAA,GAAA,IAAA,CAAK,YAAL,IAAc,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAA,EAAA,CAAA;AACd,MAAK,IAAA,CAAA,OAAA,GAAU,KAAK,aAAc,EAAA,CAAA;AAClC,MAAA,IAAA,CAAK,WAAY,EAAA,CAAA;AAAA,KACnB;AAAA,IACA,SAAS,CAAY,EAAA;AAvDzB,MAAA,IAAA,EAAA,CAAA;AAwDM,MAAA,CAAA,EAAA,GAAA,IAAA,CAAK,WAAL,IAAc,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,IAAA,EAAA,CAAA,CAAA,CAAA;AAAA,KAChB;AAAA,GACF;AAAA,EACA,MAAS,GAAA;AAAE,IAAA,OAAO,EAAC,CAAA;AAAA,GAAE;AACvB,CAAC,CAAA;;ACxDD,kBAAezD,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,OAAA;AAAA,EACT,KAAO,EAAA;AAAA,IACL,IAAM,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,QAAS,EAAA;AAAA,IACxC,IAAM,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,UAAU,IAAK,EAAA;AAAA,IACrC,IAAM,EAAA;AAAA,MACJ,IAAM,EAAA,KAAA;AAAA,MACN,OAAA,EAAS,MAAM,CAAC,QAAA,EAAU,UAAU,QAAU,EAAA,QAAA,EAAU,UAAU,QAAQ,CAAA;AAAA,KAC5E;AAAA,IACA,KAAA,EAAO,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,OAAO,EAAE,OAAS,EAAA6D,2BAAA,EAAyB,CAAA,EAAA;AAAA,GAC7E;AAAA,EACA,OAAU,GAAA;AACR,IAAA1F,SAAA,CAAM,MAAM,IAAA,CAAK,IAAM,EAAA,IAAA,CAAK,cAAc,CAAA,CAAA;AAC1C,IAAAA,SAAA,CAAM,MAAM,IAAA,CAAK,IAAM,EAAA,IAAA,CAAK,cAAc,CAAA,CAAA;AAAA,GAC5C;AAAA,EACA,OAAS,EAAA;AAAA,IACP,aAAgB,GAAA;AACd,MAAA,OAAO,IAAI2F,uBAAA,EACR,CAAA,OAAA,CAAQ,KAAK,IAAI,CAAA,CACjB,IAAK,CAAA,IAAA,CAAK,MAAM,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,UAAA,EAAY,KAAK,OAAO,CAAA,CAAA;AAAA,KACjE;AAAA,GACF;AACF,CAAC,CAAA;;ACtBD,mBAAe9D,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,OAAA;AAAA,EACT,KAAO,EAAA;AAAA,IACL,OAAS,EAAA;AAAA,MACP,IAAM,EAAA,MAAA;AAAA,MACN,QAAU,EAAA,IAAA;AAAA,KACZ;AAAA,GACF;AAAA,EACA,OAAU,GAAA;AACR,IAAA7B,SAAA,CAAM,MAAM,IAAA,CAAK,OAAS,EAAA,IAAA,CAAK,cAAc,CAAA,CAAA;AAAA,GAC/C;AAAA,EACA,OAAS,EAAA;AAAA,IACP,aAAgB,GAAA;AACd,MAAA,MAAM,KAAQ,GAAA,QAAA,CAAS,cAAe,CAAA,IAAA,CAAK,OAAO,CAAA,CAAA;AAClD,MAAO,OAAA,IAAI4F,mBAAa,KAAK,CAAA,CAAA;AAAA,KAC/B;AAAA,GACF;AACF,CAAC,CAAA;;AClBD,UAAe,aAAA,CAAc,KAAO,EAAA1C,OAAA,EAAOC,gBAAc,CAAA;;ACAzD,aAAe,aAAA,CAAc,QAAU,EAAAD,OAAA,EAAOC,gBAAc,CAAA;;ACA5D,WAAe,aAAA,CAAc,MAAQ,EAAAD,OAAA,EAAOC,gBAAc,CAAA;;ACA1D,eAAe,aAAA,CAAc,UAAY,EAAAD,OAAA,EAAOC,gBAAc,CAAA;;ACA9D,mBAAe,aAAA,CAAc,cAAgB,EAAAD,OAAA,EAAOC,gBAAc,CAAA;;ACAlE,kBAAe,aAAA,CAAc,aAAe,EAAAD,OAAA,EAAOC,gBAAc,CAAA;;ACAjE,YAAe,aAAA,CAAc,OAAS,EAAAD,OAAA,EAAOC,gBAAc,CAAA;;ACA3D,iBAAe,aAAA,CAAc,YAAc,EAAAD,OAAA,EAAOC,gBAAc,CAAA;;ACAhE,YAAe,aAAA,CAAc,OAAS,EAAAD,OAAA,EAAOC,gBAAc,CAAA;;ACA3D,iBAAe,aAAA,CAAc,YAAc,EAAAD,OAAA,EAAOC,gBAAc,CAAA;;ACAhE,WAAe,aAAA,CAAc,MAAQ,EAAAD,OAAA,EAAOC,gBAAc,CAAA;;ACA1D,aAAe,aAAA,CAAc,QAAU,EAAAD,OAAA,EAAOC,gBAAc,CAAA;;ACA5D,kBAAe,aAAA,CAAc,aAAe,EAAAD,OAAA,EAAOC,gBAAc,CAAA;;ACOjE,MAAMD,OAAQ,GAAA;AAAA,EACZ,MAAM,EAAE,IAAA,EAAM,QAAQ,QAAU,EAAA,IAAA,EAAM,SAAS,MAAO,EAAA;AAAA,EACtD,OAAS,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,UAAU,IAAK,EAAA;AAAA,EACxC,IAAM,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,EAAG,EAAA;AAAA,EAClC,MAAQ,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACnC,KAAO,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EAClC,aAAe,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,EAAG,EAAA;AAAA,EAC3C,YAAc,EAAA,EAAE,IAAM,EAAA,OAAA,EAAS,SAAS,KAAM,EAAA;AAAA,EAC9C,cAAgB,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,EAAG,EAAA;AAAA,EAC5C,SAAW,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACtC,WAAa,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACxC,aAAe,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EAC1C,KAAA,EAAO,EAAE,IAAM,EAAA,CAAC,SAAS,MAAM,CAAA,EAAiC,SAAS,KAAM,EAAA;AACjF,CAAA,CAAA;AAEA,WAAerB,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,IAAA;AAAA,SACTqB,OAAA;AAAA,EACA,KAA4B,GAAA;AAC1B,IAAA,OAAO,EAAC,CAAA;AAAA,GACV;AAAA,EACA,OAAU,GAAA;AACR,IAAI,IAAA,CAAC,KAAK,OAAS,EAAA;AACjB,MAAA,OAAA,CAAQ,MAAM,mCAAmC,CAAA,CAAA;AACjD,MAAA,OAAA;AAAA,KACF;AAOA,IAAA,MAAM,UAAa,GAAA;AAAA,MACjB,MAAA;AAAA,MAAQ,MAAA;AAAA,MAAQ,QAAA;AAAA,MAAU,eAAA;AAAA,MAC1B,cAAA;AAAA,MAAgB,gBAAA;AAAA,MAAkB,WAAA;AAAA,MAAa,aAAA;AAAA,MAAe,eAAA;AAAA,MAC9D,OAAA;AAAA,KACF,CAAA;AACA,IAAA,UAAA,CAAW,QAAQ,CAAK,CAAA,KAAA;AAEtB,MAAMlD,SAAA,CAAA,MAAM,IAAK,CAAA,CAAA,CAAA,EAAI,MAAM;AACzB,QAAA,IAAI,IAAK,CAAA,IAAA;AAAM,UAAA,IAAA,CAAK,eAAgB,EAAA,CAAA;AAAA,OACrC,CAAA,CAAA;AAAA,KACF,CAAA,CAAA;AAED,IAAM,MAAA,MAAA,GAAS,IAAI6C,wBAAW,EAAA,CAAA;AAC9B,IAAA,IAAA,CAAK,OAAU,GAAA,IAAA,CAAA;AACf,IAAA,MAAA,CAAO,IAAK,CAAA,IAAA,CAAK,OAAS,EAAA,CAAC,IAAS,KAAA;AAClC,MAAA,IAAA,CAAK,OAAU,GAAA,KAAA,CAAA;AACf,MAAA,IAAA,CAAK,IAAO,GAAA,IAAA,CAAA;AACZ,MAAA,IAAA,CAAK,cAAe,EAAA,CAAA;AACpB,MAAA,IAAA,CAAK,QAAS,EAAA,CAAA;AAAA,KACf,CAAA,CAAA;AAAA,GACH;AAAA,EACA,OAAS,EAAA;AAAA,IACP,cAAiB,GAAA;AACf,MAAA,IAAA,CAAK,QAAW,GAAA,IAAIC,4BAAa,CAAA,IAAA,CAAK,IAAM,EAAA;AAAA,QAE1C,MAAM,IAAK,CAAA,IAAA;AAAA,QACX,MAAM,IAAK,CAAA,IAAA;AAAA,QACX,QAAQ,IAAK,CAAA,MAAA;AAAA,QACb,OAAO,IAAK,CAAA,KAAA;AAAA,QACZ,eAAe,IAAK,CAAA,aAAA;AAAA,QACpB,cAAc,IAAK,CAAA,YAAA;AAAA,QACnB,gBAAgB,IAAK,CAAA,cAAA;AAAA,QACrB,WAAW,IAAK,CAAA,SAAA;AAAA,QAChB,aAAa,IAAK,CAAA,WAAA;AAAA,QAClB,eAAe,IAAK,CAAA,aAAA;AAAA,OACrB,CAAA,CAAA;AAED,MAAI,IAAA,IAAA,CAAK,UAAU,QAAU,EAAA;AAC3B,QAAA,IAAA,CAAK,SAAS,MAAO,EAAA,CAAA;AAAA,OACvB;AAAA,KACF;AAAA,GACF;AACF,CAAC,CAAA;;ACjFD,YAAe,aAAA,CAAc,OAAS,EAAAI,OAAA,EAAOC,gBAAc,CAAA;;ACA3D,gBAAe,aAAA,CAAc,WAAa,EAAAD,OAAA,EAAOC,gBAAc,CAAA;;ACE/D,WAAetB,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,IAAA;AAAA,SACTqB,OAAA;AAAA,EACA,OAAU,GAAA;AACR,IAAA,IAAA,CAAK,cAAe,EAAA,CAAA;AACpB,IAAA,IAAA,CAAK,oBAAoBA,OAAK,CAAA,CAAA;AAAA,GAChC;AAAA,EACA,OAAS,EAAA;AAAA,IACP,cAAiB,GAAA;AACf,MAAK,IAAA,CAAA,QAAA,GAAW,eAAe,IAAI,CAAA,CAAA;AAAA,KACrC;AAAA,IAEA,aAAa,MAAmB,EAAA;AAC9B,MAAyB,wBAAA,CAAA,IAAA,CAAK,UAA0B,MAAM,CAAA,CAAA;AAAA,KAChE;AAAA,GACF;AAAA,EACA,OAAS,EAAA,MAAA;AACX,CAAC,CAAA;;ACbD,YAAerB,mBAAgB,CAAA;AAAA,EAC7B,KAAA,EAAO,CAAC,QAAQ,CAAA;AAAA,EAChB,OAAS,EAAA,IAAA;AAAA,EACT,KAAO,EAAA;AAAA,IACL,GAAK,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,UAAU,IAAK,EAAA;AAAA,IACpC,KAAO,EAAA,MAAA;AAAA,IACP,MAAQ,EAAA,MAAA;AAAA,IACR,aAAe,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,IAC1C,cAAgB,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,IAC3C,QAAU,EAAA,OAAA;AAAA,GACZ;AAAA,EACA,KAA6B,GAAA;AAC3B,IAAA,OAAO,EAAC,CAAA;AAAA,GACV;AAAA,EACA,OAAU,GAAA;AACR,IAAA,IAAI,CAAC,IAAK,CAAA,QAAA;AAAU,MAAA,OAAA;AAEpB,IAAK,IAAA,CAAA,QAAA,GAAW,IAAIgC,mBAAc,CAAA,CAAA,EAAG,GAAG,IAAK,CAAA,aAAA,EAAe,KAAK,cAAc,CAAA,CAAA;AAC/E,IAAK,IAAA,CAAA,QAAA,GAAW,IAAIvC,uBAAA,CAAkB,EAAE,IAAA,EAAMG,kBAAY,GAAK,EAAA,IAAA,CAAK,WAAY,EAAA,EAAG,CAAA,CAAA;AAEnF,IAAAzB,SAAA,CAAM,MAAM,IAAA,CAAK,GAAK,EAAA,IAAA,CAAK,cAAc,CAAA,CAAA;AAEzC,IAAA,CAAC,OAAS,EAAA,QAAQ,CAAE,CAAA,OAAA,CAAQ,CAAK,CAAA,KAAA;AAE/B,MAAAA,SAAA,CAAM,MAAM,IAAA,CAAK,CAAI,CAAA,EAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAAA,KACjC,CAAA,CAAA;AAED,IAAA,IAAA,CAAK,MAAO,EAAA,CAAA;AACZ,IAAA,IAAI,IAAK,CAAA,QAAA;AAAU,MAAK,IAAA,CAAA,QAAA,CAAS,QAAS,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAAA,GACvD;AAAA,EACA,SAAY,GAAA;AAvCd,IAAA,IAAA,EAAA,CAAA;AAwCI,IAAK,CAAA,EAAA,GAAA,IAAA,CAAA,QAAA,KAAL,IAAe,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,SAAA,CAAU,IAAK,CAAA,MAAA,CAAA,CAAA;AAAA,GAChC;AAAA,EACA,OAAS,EAAA;AAAA,IACP,WAAc,GAAA;AACZ,MAAA,OAAO,IAAIoF,mBAAc,EAAA,CAAE,KAAK,IAAK,CAAA,GAAA,EAAK,KAAK,QAAQ,CAAA,CAAA;AAAA,KACzD;AAAA,IACA,cAAiB,GAAA;AA9CrB,MAAA,IAAA,EAAA,CAAA;AA+CM,MAAA,CAAA,EAAA,GAAA,IAAA,CAAK,YAAL,IAAc,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAA,EAAA,CAAA;AACd,MAAA,IAAI,KAAK,QAAU,EAAA;AACjB,QAAK,IAAA,CAAA,QAAA,CAAS,GAAM,GAAA,IAAA,CAAK,WAAY,EAAA,CAAA;AACrC,QAAA,IAAA,CAAK,SAAS,WAAc,GAAA,IAAA,CAAA;AAAA,OAC9B;AAAA,KACF;AAAA,IACA,SAAS,OAAkB,EAAA;AACzB,MAAA,IAAA,CAAK,OAAU,GAAA,OAAA,CAAA;AACf,MAAA,IAAA,CAAK,MAAO,EAAA,CAAA;AACZ,MAAK,IAAA,CAAA,KAAA,CAAM,UAAU,OAAO,CAAA,CAAA;AAAA,KAC9B;AAAA,IACA,MAAS,GAAA;AACP,MAAA,IAAI,CAAC,IAAA,CAAK,QAAY,IAAA,CAAC,IAAK,CAAA,OAAA;AAAS,QAAA,OAAA;AACrC,MAAM,MAAA,MAAA,GAAS,KAAK,QAAS,CAAA,IAAA,CAAA;AAC7B,MAAM,MAAA,EAAA,GAAK,IAAK,CAAA,OAAA,CAAQ,KAAM,CAAA,KAAA,CAAA;AAC9B,MAAM,MAAA,EAAA,GAAK,IAAK,CAAA,OAAA,CAAQ,KAAM,CAAA,MAAA,CAAA;AAC9B,MAAA,MAAM,SAAS,EAAK,GAAA,EAAA,CAAA;AACpB,MAAI,IAAA,CAAA,GAAI,GAAG,CAAI,GAAA,CAAA,CAAA;AACf,MAAI,IAAA,IAAA,CAAK,KAAS,IAAA,IAAA,CAAK,MAAQ,EAAA;AAC7B,QAAA,CAAA,GAAI,IAAK,CAAA,KAAA,GAAQ,MAAO,CAAA,MAAA,GAAS,MAAO,CAAA,KAAA,CAAA;AACxC,QAAA,CAAA,GAAI,IAAK,CAAA,MAAA,GAAS,MAAO,CAAA,OAAA,GAAU,MAAO,CAAA,MAAA,CAAA;AAAA,OAC5C,MAAA,IAAW,KAAK,KAAO,EAAA;AACrB,QAAA,CAAA,GAAI,IAAK,CAAA,KAAA,GAAQ,MAAO,CAAA,MAAA,GAAS,MAAO,CAAA,KAAA,CAAA;AACxC,QAAA,CAAA,GAAI,CAAI,GAAA,MAAA,CAAA;AAAA,OACV,MAAA,IAAW,KAAK,MAAQ,EAAA;AACtB,QAAA,CAAA,GAAI,IAAK,CAAA,MAAA,GAAS,MAAO,CAAA,OAAA,GAAU,MAAO,CAAA,MAAA,CAAA;AAC1C,QAAA,CAAA,GAAI,CAAI,GAAA,MAAA,CAAA;AAAA,OACH,MAAA;AACL,QAAA,IAAI,MAAS,GAAA,CAAA;AAAG,UAAA,CAAA,GAAI,CAAI,GAAA,MAAA,CAAA;AAAA;AACnB,UAAA,CAAA,GAAI,CAAI,GAAA,MAAA,CAAA;AAAA,OACf;AACA,MAAA,IAAI,KAAK,IAAM,EAAA;AACb,QAAK,IAAA,CAAA,IAAA,CAAK,MAAM,CAAI,GAAA,CAAA,CAAA;AACpB,QAAK,IAAA,CAAA,IAAA,CAAK,MAAM,CAAI,GAAA,CAAA,CAAA;AAAA,OACtB;AAAA,KACF;AAAA,GACF;AAAA,EACA,OAAS,EAAA,OAAA;AACX,CAAC,CAAA;;AChFD,oBAAevD,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,IAAA;AAAA,EACT,KAAO,EAAA;AAAA,IACL,KAAO,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,UAAU,IAAK,EAAA;AAAA,GACxC;AAAA,EACA,OAAS,EAAA;AAAA,IACP,QAAW,GAAA;AACT,MAAA,IAAI,CAAC,IAAK,CAAA,QAAA;AAAU,QAAA,OAAA;AAEpB,MAAA,IAAI,CAAC,IAAA,CAAK,QAAY,IAAA,CAAC,KAAK,QAAU,EAAA;AACpC,QAAA,OAAA,CAAQ,MAAM,kCAAkC,CAAA,CAAA;AAChD,QAAO,OAAA,KAAA,CAAA;AAAA,OACT;AAEA,MAAK,IAAA,CAAA,IAAA,GAAO,IAAInB,mBAAc,CAAA,IAAA,CAAK,UAAU,IAAK,CAAA,QAAA,EAAU,KAAK,KAAK,CAAA,CAAA;AACtE,MAAK,IAAA,CAAA,IAAA,CAAK,SAAS,SAAY,GAAA,IAAA,CAAA;AAE/B,MAAS,QAAA,CAAA,IAAA,EAAM,YAAc,EAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AACtC,MAAS,QAAA,CAAA,IAAA,EAAM,eAAiB,EAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AAEzC,MAAA,IAAI,IAAK,CAAA,cAAA,IACP,IAAK,CAAA,aAAA,IACL,IAAK,CAAA,aAAA,IACL,IAAK,CAAA,cAAA,IACL,IAAK,CAAA,aAAA,IACL,IAAK,CAAA,WAAA,IACL,KAAK,OAAS,EAAA;AACd,QAAA,IAAA,CAAK,QAAS,CAAA,KAAA,CAAM,kBAAmB,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AAAA,OAClD;AAEA,MAAK,IAAA,CAAA,YAAA,CAAa,KAAK,IAAI,CAAA,CAAA;AAAA,KAC7B;AAAA,GACF;AAAA,EACA,OAAS,EAAA,eAAA;AACX,CAAC,CAAA;;AC7BD,aAAemB,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,QAAA;AAAA,EACT,KAAA,EAAO,CAAC,QAAQ,CAAA;AAAA,EAChB,KAAO,EAAA;AAAA,IACL,GAAK,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,UAAU,IAAK,EAAA;AAAA,GACtC;AAAA,EACA,KAA8B,GAAA;AAC5B,IAAA,OAAO,EAAC,CAAA;AAAA,GACV;AAAA,EACA,OAAU,GAAA;AACR,IAAK,IAAA,CAAA,OAAA,GAAU,IAAIuD,mBAAc,EAAA,CAAE,KAAK,IAAK,CAAA,GAAA,EAAK,KAAK,QAAQ,CAAA,CAAA;AAC/D,IAAA,IAAA,CAAK,WAAW,IAAIS,oBAAA,CAAe,EAAE,GAAK,EAAA,IAAA,CAAK,SAAS,CAAA,CAAA;AACxD,IAAA,IAAA,CAAK,MAAS,GAAA,IAAIC,YAAO,CAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AACtC,IAAK,IAAA,CAAA,YAAA,CAAa,KAAK,MAAM,CAAA,CAAA;AAAA,GAC/B;AAAA,EACA,SAAY,GAAA;AAzBd,IAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AA0BI,IAAA,CAAA,EAAA,GAAA,IAAA,CAAK,YAAL,IAAc,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAA,EAAA,CAAA;AACd,IAAA,CAAA,EAAA,GAAA,IAAA,CAAK,aAAL,IAAe,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAA,EAAA,CAAA;AAAA,GACjB;AAAA,EACA,OAAS,EAAA;AAAA,IACP,QAAW,GAAA;AACT,MAAA,IAAA,CAAK,QAAS,EAAA,CAAA;AACd,MAAA,IAAA,CAAK,MAAM,QAAQ,CAAA,CAAA;AAAA,KACrB;AAAA,IACA,QAAW,GAAA;AACT,MAAA,IAAI,CAAC,IAAA,CAAK,OAAW,IAAA,CAAC,IAAK,CAAA,MAAA;AAAQ,QAAA,OAAA;AAEnC,MAAM,MAAA,MAAA,GAAS,IAAK,CAAA,OAAA,CAAQ,KAAM,CAAA,KAAA,CAAA;AAClC,MAAM,MAAA,OAAA,GAAU,IAAK,CAAA,OAAA,CAAQ,KAAM,CAAA,MAAA,CAAA;AACnC,MAAA,MAAM,SAAS,MAAS,GAAA,OAAA,CAAA;AAExB,MAAI,IAAA,CAAA,GAAI,KAAK,CAAI,GAAA,GAAA,CAAA;AACjB,MAAA,IAAI,SAAS,CAAG,EAAA;AACd,QAAA,CAAA,GAAI,GAAM,GAAA,MAAA,CAAA;AAAA,OACL,MAAA;AACL,QAAA,CAAA,GAAI,GAAM,GAAA,MAAA,CAAA;AAAA,OACZ;AAEA,MAAA,MAAM,SAAY,GAAA,IAAA,CAAK,MAAO,CAAA,QAAA,CAAS,WAAW,QAAS,CAAA,KAAA,CAAA;AAC3D,MAAA,SAAA,CAAU,KAAK,CAAC,CAAA,CAAA;AAAG,MAAA,SAAA,CAAU,KAAK,CAAC,CAAA,CAAA;AACnC,MAAA,SAAA,CAAU,CAAK,CAAA,GAAA,CAAA,CAAA;AAAG,MAAA,SAAA,CAAU,KAAK,CAAC,CAAA,CAAA;AAClC,MAAA,SAAA,CAAU,EAAM,CAAA,GAAA,CAAA,CAAA;AAAG,MAAA,SAAA,CAAU,EAAM,CAAA,GAAA,CAAA,CAAA;AACnC,MAAA,SAAA,CAAU,MAAM,CAAC,CAAA,CAAA;AAAG,MAAA,SAAA,CAAU,EAAM,CAAA,GAAA,CAAA,CAAA;AACpC,MAAA,IAAA,CAAK,MAAO,CAAA,QAAA,CAAS,UAAW,CAAA,QAAA,CAAS,WAAc,GAAA,IAAA,CAAA;AAAA,KACzD;AAAA,GACF;AAAA,EACA,OAAS,EAAA,QAAA;AACX,CAAC,CAAA;;ACvCD,aAAejE,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,QAAA;AAAA,EACT,KAA8B,GAAA;AAC5B,IAAA,OAAO,EAAC,CAAA;AAAA,GACV;AAAA,EACA,OAAU,GAAA;AACR,IAAO,OAAA;AAAA,MACL,CAAC,gBAA6B,GAAA,IAAA;AAAA,KAChC,CAAA;AAAA,GACF;AAAA,EACA,OAAU,GAAA;AACR,IAAK,IAAA,CAAA,IAAA,GAAO,KAAK,MAAS,GAAA,IAAIkE,aAAO,IAAK,CAAA,QAAA,EAAU,KAAK,QAAQ,CAAA,CAAA;AACjE,IAAK,IAAA,CAAA,YAAA,CAAa,KAAK,IAAI,CAAA,CAAA;AAAA,GAC7B;AAAA,EACA,OAAS,EAAA;AAAA,IACP,YAAY,QAA0B,EAAA;AACpC,MAAA,IAAA,CAAK,QAAW,GAAA,QAAA,CAAA;AAChB,MAAA,IAAI,IAAK,CAAA,IAAA;AAAM,QAAA,IAAA,CAAK,KAAK,QAAW,GAAA,QAAA,CAAA;AAAA,KACtC;AAAA,IACA,YAAY,QAAoB,EAAA;AAC9B,MAAA,IAAA,CAAK,QAAW,GAAA,QAAA,CAAA;AAChB,MAAA,IAAI,IAAK,CAAA,IAAA;AAAM,QAAA,IAAA,CAAK,KAAK,QAAW,GAAA,QAAA,CAAA;AAAA,KACtC;AAAA,GACF;AACF,CAAC,CAAA;;ACtCD,YAAelE,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,QAAA;AAAA,EACT,KAAO,EAAA,CAAC,aAAe,EAAA,MAAA,EAAQ,YAAY,OAAO,CAAA;AAAA,EAClD,KAAO,EAAA;AAAA,IACL,GAAK,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,UAAU,IAAK,EAAA;AAAA,GACtC;AAAA,EACA,IAAO,GAAA;AACL,IAAO,OAAA;AAAA,MACL,QAAU,EAAA,CAAA;AAAA,KACZ,CAAA;AAAA,GACF;AAAA,EACA,OAAS,EAAA;AAAA,IACP,OAAO,KAAkB,EAAA;AACvB,MAAK,IAAA,CAAA,KAAA,CAAM,QAAQ,KAAK,CAAA,CAAA;AAAA,KAC1B;AAAA,IACA,WAAW,QAAyB,EAAA;AAClC,MAAK,IAAA,CAAA,QAAA,GAAW,QAAS,CAAA,MAAA,GAAS,QAAS,CAAA,KAAA,CAAA;AAC3C,MAAK,IAAA,CAAA,KAAA,CAAM,YAAY,QAAQ,CAAA,CAAA;AAAA,KACjC;AAAA,IACA,QAAQ,KAAmB,EAAA;AACzB,MAAK,IAAA,CAAA,KAAA,CAAM,SAAS,KAAK,CAAA,CAAA;AAAA,KAC3B;AAAA,GACF;AACF,CAAC,CAAA;;ACtBD,WAAeA,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,KAAA;AAAA,EACT,KAAO,EAAA;AAAA,IACL,SAAW,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,UAAU,IAAK,EAAA;AAAA,GAC5C;AAAA,EACA,OAAU,GAAA;AACR,IAAM,MAAA,MAAA,GAAS,IAAImE,wBAAW,EAAA,CAAA;AAC9B,IAAA,IAAI,KAAK,SAAW,EAAA;AAClB,MAAM,MAAA,WAAA,GAAc,IAAIC,0BAAY,EAAA,CAAA;AACpC,MAAY,WAAA,CAAA,cAAA,CAAe,KAAK,SAAS,CAAA,CAAA;AACzC,MAAA,MAAA,CAAO,eAAe,WAAW,CAAA,CAAA;AAAA,KACnC;AACA,IAAK,IAAA,CAAA,KAAA,CAAM,eAAe,MAAM,CAAA,CAAA;AAChC,IAAA,MAAA,CAAO,IAAK,CAAA,IAAA,CAAK,GAAK,EAAA,CAAC,IAAS,KAAA;AAC9B,MAAA,IAAA,CAAK,OAAO,IAAI,CAAA,CAAA;AAChB,MAAK,IAAA,CAAA,YAAA,CAAa,KAAK,KAAK,CAAA,CAAA;AAAA,KAC3B,EAAA,IAAA,CAAK,UAAY,EAAA,IAAA,CAAK,OAAO,CAAA,CAAA;AAAA,GAClC;AACF,CAAC,CAAA;;ACnBD,UAAepE,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,KAAA;AAAA,EACT,OAAU,GAAA;AACR,IAAM,MAAA,MAAA,GAAS,IAAIqE,sBAAU,EAAA,CAAA;AAC7B,IAAK,IAAA,CAAA,KAAA,CAAM,eAAe,MAAM,CAAA,CAAA;AAChC,IAAA,MAAA,CAAO,IAAK,CAAA,IAAA,CAAK,GAAK,EAAA,CAAC,GAAQ,KAAA;AAC7B,MAAA,IAAA,CAAK,OAAO,GAAG,CAAA,CAAA;AACf,MAAA,IAAA,CAAK,aAAa,GAAG,CAAA,CAAA;AAAA,KACpB,EAAA,IAAA,CAAK,UAAY,EAAA,IAAA,CAAK,OAAO,CAAA,CAAA;AAAA,GAClC;AACF,CAAC,CAAA;;ACCY,MAAA,oBAAA,GAA8D,OAAO,UAAU,EAAA;AAE5F,qBAAerE,mBAAgB,CAAA;AAAA,EAC7B,KAAsC,GAAA;AACpC,IAAM,MAAA,QAAA,GAAWE,WAAO,oBAAoB,CAAA,CAAA;AAC5C,IAAA,OAAO,EAAE,QAAS,EAAA,CAAA;AAAA,GACpB;AAAA,EACA,OAAU,GAAA;AACR,IAAO,OAAA;AAAA,MACL,CAAC,oBAAiC,GAAA,IAAA;AAAA,KACpC,CAAA;AAAA,GACF;AAAA,EACA,OAAU,GAAA;AACR,IAAI,IAAA,CAAC,KAAK,QAAU,EAAA;AAClB,MAAA,OAAA,CAAQ,MAAM,oBAAoB,CAAA,CAAA;AAClC,MAAA,OAAA;AAAA,KACF;AACA,IAAA,MAAM,WAAW,IAAK,CAAA,QAAA,CAAA;AAEtB,IAAA,MAAM,QAAW,GAAA,IAAIoE,gCAAe,CAAA,IAAA,CAAK,SAAS,QAAQ,CAAA,CAAA;AAC1D,IAAA,IAAA,CAAK,QAAW,GAAA,QAAA,CAAA;AAChB,IAAA,IAAA,CAAK,SAAS,QAAW,GAAA,QAAA,CAAA;AAGzB,IAAS,QAAA,CAAA,WAAA,CAAY,QAAQ,MAAM;AACjC,MAAA,QAAA,CAAS,SAAS,SAAY,GAAA,KAAA,CAAA;AAC9B,MAAA,IAAA,CAAK,MAAO,EAAA,CAAA;AACZ,MAAS,QAAA,CAAA,WAAA,CAAY,QAAU,EAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAAA,KAC3C,CAAA,CAAA;AAAA,GACH;AAAA,EACA,SAAY,GAAA;AA7Cd,IAAA,IAAA,EAAA,CAAA;AA8CI,IAAA,CAAA,EAAA,GAAA,IAAA,CAAK,QAAL,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAe,cAAe,CAAA,QAAA,EAAU,IAAK,CAAA,MAAA,CAAA,CAAA;AAAA,GAC/C;AAAA,EACA,OAAS,EAAA;AAAA,IACP,QAAQ,IAAY,EAAA;AAjDxB,MAAA,IAAA,EAAA,CAAA;AAkDM,MAAK,CAAA,EAAA,GAAA,IAAA,CAAA,QAAA,KAAL,mBAAe,OAAQ,CAAA,IAAA,CAAA,CAAA;AAAA,KACzB;AAAA,IACA,WAAW,IAAY,EAAA;AApD3B,MAAA,IAAA,EAAA,CAAA;AAqDM,MAAK,CAAA,EAAA,GAAA,IAAA,CAAA,QAAA,KAAL,mBAAe,UAAW,CAAA,IAAA,CAAA,CAAA;AAAA,KAC5B;AAAA,IACA,MAAS,GAAA;AACP,MAAI,IAAA,IAAA,CAAK,QAAY,IAAA,IAAA,CAAK,QAAU,EAAA;AAClC,QAAK,IAAA,CAAA,QAAA,CAAS,QAAQ,IAAK,CAAA,QAAA,CAAS,KAAK,KAAO,EAAA,IAAA,CAAK,QAAS,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAAA,OAC3E;AAAA,KACF;AAAA,GACF;AAAA,EACA,MAAS,GAAA;AACP,IAAA,OAAO,KAAK,MAAO,CAAA,OAAA,GAAU,KAAK,MAAO,CAAA,OAAA,KAAY,EAAC,CAAA;AAAA,GACxD;AAAA,EACA,OAAS,EAAA,gBAAA;AACX,CAAC,CAAA;;ACtDD,iBAAetE,mBAAgB,CAAA;AAAA,EAE7B,MAAQ,EAAA;AAAA,IACN,QAAU,EAAA,oBAAA;AAAA,IACV,QAAU,EAAA,oBAAA;AAAA,GACZ;AAAA,EACA,KAAA,EAAO,CAAC,OAAO,CAAA;AAAA,EACf,KAA8B,GAAA;AAC5B,IAAA,OAAO,EAAC,CAAA;AAAA,GACV;AAAA,EACA,OAAU,GAAA;AACR,IAAI,IAAA,CAAC,KAAK,QAAU,EAAA;AAClB,MAAA,OAAA,CAAQ,MAAM,+BAA+B,CAAA,CAAA;AAAA,KAC/C;AACA,IAAI,IAAA,CAAC,KAAK,QAAU,EAAA;AAClB,MAAA,OAAA,CAAQ,MAAM,yBAAyB,CAAA,CAAA;AAAA,KACzC;AAAA,GACF;AAAA,EACA,SAAY,GAAA;AA7Bd,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AA8BI,IAAA,IAAI,KAAK,IAAM,EAAA;AACb,MAAK,CAAA,EAAA,GAAA,IAAA,CAAA,QAAA,KAAL,IAAe,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,UAAA,CAAW,IAAK,CAAA,IAAA,CAAA,CAAA;AAC/B,MAAC,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,IAAA,CAAK,MAAa,OAAlB,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,CAAA;AAAA,KACH;AAAA,GACF;AAAA,EACA,OAAS,EAAA;AAAA,IACP,eAAe,IAAY,EAAA;AApC/B,MAAA,IAAA,EAAA,CAAA;AAqCM,MAAA,IAAA,CAAK,IAAO,GAAA,IAAA,CAAA;AACZ,MAAK,CAAA,EAAA,GAAA,IAAA,CAAA,QAAA,KAAL,mBAAe,OAAQ,CAAA,IAAA,CAAA,CAAA;AACvB,MAAK,IAAA,CAAA,KAAA,CAAM,SAAS,IAAI,CAAA,CAAA;AAAA,KAC1B;AAAA,GACF;AAAA,EACA,MAAS,GAAA;AACP,IAAA,OAAO,EAAC,CAAA;AAAA,GACV;AAAA,EACA,OAAS,EAAA,YAAA;AACX,CAAC,CAAA;;AC1CD,iBAAeA,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,UAAA;AAAA,EACT,OAAU,GAAA;AACR,IAAA,IAAI,CAAC,IAAK,CAAA,QAAA;AAAU,MAAA,OAAA;AAEpB,IAAI,IAAA,CAAC,IAAK,CAAA,QAAA,CAAS,KAAO,EAAA;AACxB,MAAA,OAAA,CAAQ,MAAM,eAAe,CAAA,CAAA;AAC7B,MAAA,OAAA;AAAA,KACF;AACA,IAAI,IAAA,CAAC,IAAK,CAAA,QAAA,CAAS,MAAQ,EAAA;AACzB,MAAA,OAAA,CAAQ,MAAM,gBAAgB,CAAA,CAAA;AAC9B,MAAA,OAAA;AAAA,KACF;AACA,IAAM,MAAA,IAAA,GAAO,IAAIuE,wBAAW,CAAA,IAAA,CAAK,SAAS,KAAO,EAAA,IAAA,CAAK,SAAS,MAAM,CAAA,CAAA;AACrE,IAAA,IAAA,CAAK,eAAe,IAAI,CAAA,CAAA;AAAA,GAC1B;AAAA,EACA,OAAS,EAAA,YAAA;AACX,CAAC,CAAA;;ACjBD,MAAMlD,OAAQ,GAAA;AAAA,EACZ,KAAO,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EAClC,QAAU,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,KAAM,EAAA;AAAA,EACzC,OAAS,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,IAAK,EAAA;AACzC,CAAA,CAAA;AAEA,gBAAerB,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,UAAA;AAAA,SACTqB,OAAA;AAAA,EACA,OAAU,GAAA;AACR,IAAA,IAAI,CAAC,IAAK,CAAA,QAAA;AAAU,MAAA,OAAA;AAEpB,IAAI,IAAA,CAAC,IAAK,CAAA,QAAA,CAAS,KAAO,EAAA;AACxB,MAAA,OAAA,CAAQ,MAAM,eAAe,CAAA,CAAA;AAC7B,MAAA,OAAA;AAAA,KACF;AACA,IAAI,IAAA,CAAC,IAAK,CAAA,QAAA,CAAS,MAAQ,EAAA;AACzB,MAAA,OAAA,CAAQ,MAAM,gBAAgB,CAAA,CAAA;AAC9B,MAAA,OAAA;AAAA,KACF;AAEA,IAAA,MAAM,MAAS,GAAA;AAAA,MACb,OAAO,IAAK,CAAA,KAAA;AAAA,MACZ,UAAU,IAAK,CAAA,QAAA;AAAA,MACf,SAAS,IAAK,CAAA,OAAA;AAAA,MACd,KAAA,EAAO,IAAK,CAAA,QAAA,CAAS,IAAK,CAAA,KAAA;AAAA,MAC1B,MAAA,EAAQ,IAAK,CAAA,QAAA,CAAS,IAAK,CAAA,MAAA;AAAA,KAC7B,CAAA;AAEA,IAAM,MAAA,IAAA,GAAO,IAAImD,sBAAU,CAAA,IAAA,CAAK,SAAS,KAAO,EAAA,IAAA,CAAK,QAAS,CAAA,MAAA,EAAQ,MAAM,CAAA,CAAA;AAE5E,IAAA,MAAA,CAAO,IAAK,CAAAnD,OAAK,CAAE,CAAA,OAAA,CAAQ,CAAK,CAAA,KAAA;AAE9B,MAAAlD,SAAA,CAAM,MAAM,IAAA,CAAK,CAAI,CAAA,EAAA,CAAC,KAAU,KAAA;AAAE,QAAK,IAAA,CAAA,QAAA,CAAS,GAAG,KAAQ,GAAA,KAAA,CAAA;AAAA,OAAO,CAAA,CAAA;AAAA,KACnE,CAAA,CAAA;AAED,IAAA,IAAA,CAAK,eAAe,IAAI,CAAA,CAAA;AAAA,GAC1B;AAAA,EACA,OAAS,EAAA,WAAA;AACX,CAAC,CAAA;;ACvCD,MAAMkD,OAAQ,GAAA;AAAA,EACZ,cAAgB,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,GAAI,EAAA;AAAA,EAC7C,kBAAoB,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,IAAK,EAAA;AAAA,EAClD,cAAgB,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,IAAK,EAAA;AAAA,EAC9C,SAAW,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AACxC,CAAA,CAAA;AAEA,eAAerB,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,UAAA;AAAA,SACTqB,OAAA;AAAA,EACA,OAAU,GAAA;AACR,IAAM,MAAA,IAAA,GAAO,IAAIoD,oBAAA,CAAS,IAAK,CAAA,cAAA,EAAgB,KAAK,kBAAoB,EAAA,IAAA,CAAK,cAAgB,EAAA,IAAA,CAAK,SAAS,CAAA,CAAA;AAE3G,IAAA,MAAA,CAAO,IAAK,CAAApD,OAAK,CAAE,CAAA,OAAA,CAAQ,CAAK,CAAA,KAAA;AAE9B,MAAAlD,SAAA,CAAM,MAAM,IAAA,CAAK,CAAI,CAAA,EAAA,CAAC,KAAU,KAAA;AAAE,QAAK,IAAA,CAAA,QAAA,CAAS,GAAG,KAAQ,GAAA,KAAA,CAAA;AAAA,OAAO,CAAA,CAAA;AAAA,KACnE,CAAA,CAAA;AAED,IAAA,IAAA,CAAK,eAAe,IAAI,CAAA,CAAA;AAAA,GAC1B;AAAA,EACA,OAAS,EAAA,UAAA;AACX,CAAC,CAAA;;ACnBD,eAAe6B,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,UAAA;AAAA,EACT,OAAU,GAAA;AARZ,IAAA,IAAA,EAAA,CAAA;AASI,IAAM,MAAA,IAAA,GAAO,IAAI0E,wBAAA,CAAWC,wBAAU,CAAA,CAAA;AAGtC,IAAA,CAAA,EAAA,GAAA,IAAA,CAAK,QAAL,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAe,WAAY,CAAA,QAAA,EAAU,IAAK,CAAA,MAAA,CAAA,CAAA;AAE1C,IAAA,IAAA,CAAK,eAAe,IAAI,CAAA,CAAA;AAAA,GAC1B;AAAA,EACA,SAAY,GAAA;AAhBd,IAAA,IAAA,EAAA,CAAA;AAiBI,IAAA,CAAA,EAAA,GAAA,IAAA,CAAK,QAAL,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAe,cAAe,CAAA,QAAA,EAAU,IAAK,CAAA,MAAA,CAAA,CAAA;AAAA,GAC/C;AAAA,EACA,OAAS,EAAA;AAAA,IACP,MAAA,CAAO,EAAE,IAAA,EAAiC,EAAA;AACxC,MAAA,IAAI,KAAK,IAAM,EAAA;AACb,QAAA,MAAM,EAAE,UAAA,EAAgB,GAAA,IAAA,CAAK,KAAoB,QAAS,CAAA,QAAA,CAAA;AAC1D,QAAW,UAAA,CAAA,KAAA,CAAM,CAAI,GAAA,CAAA,GAAI,IAAK,CAAA,KAAA,CAAA;AAC9B,QAAW,UAAA,CAAA,KAAA,CAAM,CAAI,GAAA,CAAA,GAAI,IAAK,CAAA,MAAA,CAAA;AAAA,OAChC;AAAA,KACF;AAAA,GACF;AAAA,EACA,OAAS,EAAA,UAAA;AACX,CAAC,CAAA;;ACzBD,MAAMtD,OAAQ,GAAA;AAAA,EACZ,KAAO,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EAClC,MAAQ,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACnC,OAAA,EAAS,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,IAAK,CAAA,EAAA,GAAK,KAAK,CAAE,EAAA;AAAA,EACnD,OAAA,EAAS,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,IAAK,CAAA,EAAA,GAAK,KAAK,CAAE,EAAA;AAAA,EACnD,OAAA,EAAS,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,IAAK,CAAA,EAAA,GAAK,KAAK,CAAE,EAAA;AAAA,EACnD,OAAS,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AACtC,CAAA,CAAA;AAEA,mBAAerB,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,UAAA;AAAA,SACTqB,OAAA;AAAA,EACA,OAAU,GAAA;AACR,IAAA,IAAI,CAAC,IAAK,CAAA,QAAA;AAAU,MAAA,OAAA;AAEpB,IAAA,MAAM,IAAO,GAAA,IAAIuD,4BAAa,CAAA,IAAA,CAAK,QAAS,CAAA,IAAA,CAAK,KAAO,EAAA,IAAA,CAAK,QAAS,CAAA,IAAA,CAAK,MAAQ,EAAA,EAAE,CAAA,CAAA;AAErF,IAAA,MAAA,CAAO,IAAK,CAAAvD,OAAK,CAAE,CAAA,OAAA,CAAQ,CAAK,CAAA,KAAA;AAE9B,MAAK,IAAA,CAAA,QAAA,CAAS,CAAG,CAAA,CAAA,KAAA,GAAQ,IAAK,CAAA,CAAA,CAAA,CAAA;AAE9B,MAAAlD,SAAA,CAAM,MAAM,IAAA,CAAK,CAAI,CAAA,EAAA,CAAC,KAAU,KAAA;AAAE,QAAK,IAAA,CAAA,QAAA,CAAS,GAAG,KAAQ,GAAA,KAAA,CAAA;AAAA,OAAO,CAAA,CAAA;AAAA,KACnE,CAAA,CAAA;AAED,IAAA,IAAA,CAAK,eAAe,IAAI,CAAA,CAAA;AAAA,GAC1B;AAAA,EACA,OAAS,EAAA,cAAA;AACX,CAAC,CAAA;;AC3BD,eAAe6B,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,UAAA;AAAA,EACT,OAAU,GAAA;AACR,IAAA,IAAI,CAAC,IAAK,CAAA,QAAA;AAAU,MAAA,OAAA;AAEpB,IAAM,MAAA,IAAA,GAAO,IAAI6E,oBAAA,CAAS,IAAK,CAAA,QAAA,CAAS,KAAK,KAAO,EAAA,IAAA,CAAK,QAAS,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAC7E,IAAA,IAAA,CAAK,eAAe,IAAI,CAAA,CAAA;AAAA,GAC1B;AAAA,EACA,OAAS,EAAA,UAAA;AACX,CAAC,CAAA;;ACTD,eAAe7E,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,UAAA;AAAA,EACT,KAAO,EAAA;AAAA,IACL,OAAS,EAAA;AAAA,MACP,IAAM,EAAA,MAAA;AAAA,MACN,OAAA,EAAS,OAAO,EAAC,CAAA;AAAA,KACnB;AAAA,GACF;AAAA,EACA,OAAU,GAAA;AACR,IAAA,IAAI,CAAC,IAAK,CAAA,QAAA;AAAU,MAAA,OAAA;AAEpB,IAAI,IAAA,CAAC,IAAK,CAAA,QAAA,CAAS,KAAO,EAAA;AACxB,MAAA,OAAA,CAAQ,MAAM,eAAe,CAAA,CAAA;AAC7B,MAAA,OAAA;AAAA,KACF;AACA,IAAI,IAAA,CAAC,IAAK,CAAA,QAAA,CAAS,MAAQ,EAAA;AACzB,MAAA,OAAA,CAAQ,MAAM,gBAAgB,CAAA,CAAA;AAC9B,MAAA,OAAA;AAAA,KACF;AAEA,IAAA,MAAM,OAAO,IAAI8E,oBAAA;AAAA,MACf,KAAK,QAAS,CAAA,KAAA;AAAA,MACd,KAAK,QAAS,CAAA,MAAA;AAAA,MACd,IAAA,CAAK,SAAS,IAAK,CAAA,KAAA;AAAA,MACnB,IAAA,CAAK,SAAS,IAAK,CAAA,MAAA;AAAA,KACrB,CAAA;AAEA,IAAA,MAAA,CAAO,IAAK,CAAA,IAAA,CAAK,OAAO,CAAA,CAAE,QAAQ,CAAO,GAAA,KAAA;AAEvC,MAAK,IAAA,CAAA,GAAA,CAAA,GAAO,KAAK,OAAQ,CAAA,GAAA,CAAA,CAAA;AAAA,KAC1B,CAAA,CAAA;AAED,IAAA,IAAA,CAAK,eAAe,IAAI,CAAA,CAAA;AAAA,GAC1B;AAAA,EACA,OAAS,EAAA,UAAA;AACX,CAAC,CAAA;;ACvCD,oBAAe;AAAA,EACb,UAAU,EAAC;AAAA,EACX,YAAc,EAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAA,CAAA;AAAA,EAOd,cAAgB,EAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAA,CAAA;AAMlB,CAAA;;ACXA,gBAAe;AAAA,EACb,QAAU,EAAA;AAAA,IACR,QAAA,EAAU,EAAE,KAAA,EAAO,IAAK,EAAA;AAAA,IACxB,UAAA,EAAY,EAAE,KAAA,EAAO,CAAE,EAAA;AAAA,IACvB,cAAA,EAAgB,EAAE,KAAA,EAAO,CAAE,EAAA;AAAA,IAC3B,KAAO,EAAA,EAAE,KAAO,EAAA,IAAInG,eAAU,EAAA;AAAA,IAC9B,GAAK,EAAA,EAAE,KAAO,EAAA,IAAIA,eAAU,EAAA;AAAA,IAC5B,KAAO,EAAA,EAAE,KAAO,EAAA,IAAIA,eAAU,EAAA;AAAA,IAC9B,OAAS,EAAA,EAAE,KAAO,EAAA,IAAIA,eAAU,EAAA;AAAA,GAClC;AAAA,EACA,cAAc,aAAc,CAAA,YAAA;AAAA,EAC5B,cAAgB,EAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAA,CAAA;AA4ClB,CAAA;;ACnDA,MAAM0C,OAAQ,GAAA;AAAA,EACZ,UAAY,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,EAAG,EAAA;AAAA,EACxC,cAAgB,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,GAAI,EAAA;AAAA,EAC7C,KAAA,EAAO,EAAE,IAAA,EAAM,MAA0C,EAAA,OAAA,EAAS,OAAO,EAAE,CAAG,EAAA,CAAA,EAAG,CAAG,EAAA,GAAA,EAAO,CAAA,EAAA;AAAA,EAC3F,GAAA,EAAK,EAAE,IAAA,EAAM,MAA0C,EAAA,OAAA,EAAS,OAAO,EAAE,CAAG,EAAA,EAAA,EAAI,CAAG,EAAA,GAAA,EAAO,CAAA,EAAA;AAC5F,CAAA,CAAA;AASA,oBAAerB,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,UAAA;AAAA,SACTqB,OAAA;AAAA,EACA,KAAqC,GAAA;AACnC,IAAA,OAAO,EAAE,SAAW,EAAA,EAAI,EAAA,SAAA,EAAW,EAAG,EAAA,CAAA;AAAA,GACxC;AAAA,EACA,OAAU,GAAA;AACR,IAAA,IAAI,CAAC,IAAK,CAAA,QAAA;AAAU,MAAA,OAAA;AAEpB,IAAK,IAAA,CAAA,KAAA,GAAQ,IAAIqD,wBAAA,CAAW,SAAS,CAAA,CAAA;AACrC,IAAK,IAAA,CAAA,KAAA,GAAQ,IAAIA,wBAAA,CAAW,SAAS,CAAA,CAAA;AAErC,IAAA,MAAM,SAAY,GAAA,IAAA,CAAK,SAAY,GAAA,IAAA,CAAK,KAAM,CAAA,QAAA,CAAA;AAC9C,IAAA,MAAM,SAAY,GAAA,IAAA,CAAK,SAAY,GAAA,IAAA,CAAK,KAAM,CAAA,QAAA,CAAA;AAG9C,IAAA,SAAA,CAAU,aAAa,SAAU,CAAA,UAAA,CAAA;AACjC,IAAA,SAAA,CAAU,iBAAiB,SAAU,CAAA,cAAA,CAAA;AACrC,IAAA,SAAA,CAAU,QAAQ,SAAU,CAAA,KAAA,CAAA;AAC5B,IAAA,SAAA,CAAU,MAAM,SAAU,CAAA,GAAA,CAAA;AAC1B,IAAA,SAAA,CAAU,UAAU,SAAU,CAAA,OAAA,CAAA;AAE9B,IAAA,QAAA,CAAS,IAAM,EAAA,YAAA,EAAc,SAAU,CAAA,UAAA,EAAY,OAAO,CAAA,CAAA;AAC1D,IAAA,QAAA,CAAS,IAAM,EAAA,gBAAA,EAAkB,SAAU,CAAA,cAAA,EAAgB,OAAO,CAAA,CAAA;AAElE,IAAA,IAAA,CAAK,eAAgB,EAAA,CAAA;AAErB,IAAA,CAAC,OAAS,EAAA,KAAK,CAAE,CAAA,OAAA,CAAQ,CAAK,CAAA,KAAA;AAE5B,MAAMvG,SAAA,CAAA,MAAM,KAAK,CAAI,CAAA,EAAA,IAAA,CAAK,iBAAiB,EAAE,IAAA,EAAM,MAAM,CAAA,CAAA;AAAA,KAC1D,CAAA,CAAA;AAED,IAAA,IAAA,CAAK,KAAM,CAAA,OAAA,GAAU,CAAC,KAAA,EAAe,MAAmB,KAAA;AACtD,MAAA,SAAA,CAAU,OAAQ,CAAA,KAAA,CAAM,GAAI,CAAA,KAAA,EAAO,MAAM,CAAA,CAAA;AAAA,KAC3C,CAAA;AAEA,IAAK,IAAA,CAAA,cAAA,CAAe,KAAK,KAAK,CAAA,CAAA;AAC9B,IAAK,IAAA,CAAA,QAAA,CAAS,OAAQ,CAAA,IAAA,CAAK,KAAK,CAAA,CAAA;AAAA,GAClC;AAAA,EACA,SAAY,GAAA;AACV,IAAI,IAAA,IAAA,CAAK,YAAY,IAAK,CAAA,KAAA;AAAO,MAAK,IAAA,CAAA,QAAA,CAAS,UAAW,CAAA,IAAA,CAAK,KAAK,CAAA,CAAA;AAAA,GACtE;AAAA,EACA,OAAS,EAAA;AAAA,IACP,eAAkB,GAAA;AAChB,MAAA,IAAA,CAAK,SAAU,CAAA,KAAA,CAAM,KAAM,CAAA,IAAA,CAAK,KAAK,KAAK,CAAA,CAAA;AAC1C,MAAA,IAAA,CAAK,SAAU,CAAA,GAAA,CAAI,KAAM,CAAA,IAAA,CAAK,KAAK,GAAG,CAAA,CAAA;AACtC,MAAA,MAAM,EAAK,GAAA,IAAIQ,aAAQ,EAAA,CAAE,IAAK,CAAA,IAAA,CAAK,GAAc,CAAA,CAAE,GAAI,CAAA,IAAA,CAAK,KAAgB,CAAA,CAAE,SAAU,EAAA,CAAA;AACxF,MAAA,IAAA,CAAK,SAAU,CAAA,KAAA,CAAM,KAAM,CAAA,IAAA,CAAK,EAAE,CAAA,CAAA;AAClC,MAAK,IAAA,CAAA,SAAA,CAAU,MAAM,KAAM,CAAA,GAAA,CAAI,CAAC,EAAG,CAAA,CAAA,EAAG,GAAG,CAAC,CAAA,CAAA;AAAA,KAC5C;AAAA,GACF;AAAA,EACA,OAAS,EAAA,eAAA;AACX,CAAC,CAAA;;ACrED,MAAM,KAAQ,GAAA;AAAA,EACZ,QAAU,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,GAAI,EAAA;AAAA,EACvC,MAAQ,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AAAA,EACnC,SAAW,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,CAAE,EAAA;AACxC,CAAA,CAAA;AAEA,sBAAeqB,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,UAAA;AAAA,EACT,KAAA;AAAA,EACA,OAAU,GAAA;AACR,IAAA,IAAI,CAAC,IAAK,CAAA,QAAA;AAAU,MAAA,OAAA;AAEpB,IAAM,MAAA,IAAA,GAAO,IAAIrB,aAAA,CAAQ,IAAK,CAAA,QAAA,CAAS,KAAK,KAAO,EAAA,IAAA,CAAK,QAAS,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAC5E,IAAM,MAAA,IAAA,GAAO,IAAIoG,kCAAgB,CAAA,IAAA,EAAM,KAAK,QAAU,EAAA,IAAA,CAAK,MAAQ,EAAA,IAAA,CAAK,SAAS,CAAA,CAAA;AAEjF,IAAA,MAAA,CAAO,IAAK,CAAA,KAAK,CAAE,CAAA,OAAA,CAAQ,CAAK,CAAA,KAAA;AAE9B,MAAA5G,SAAA,CAAM,MAAM,IAAA,CAAK,CAAI,CAAA,EAAA,CAAC,KAAU,KAAA;AAAE,QAAK,IAAA,CAAA,QAAA,CAAS,GAAG,KAAQ,GAAA,KAAA,CAAA;AAAA,OAAO,CAAA,CAAA;AAAA,KACnE,CAAA,CAAA;AAED,IAAA,IAAA,CAAK,eAAe,IAAI,CAAA,CAAA;AAAA,GAC1B;AAAA,EACA,OAAS,EAAA,iBAAA;AACX,CAAC,CAAA;;ACxBD,eAAe;AAAA,EACb,QAAU,EAAA;AAAA,IACR,QAAA,EAAU,EAAE,KAAA,EAAO,IAAK,EAAA;AAAA,IACxB,QAAQ,EAAE,KAAA,EAAO,IAAIQ,aAAQ,CAAA,GAAA,EAAK,GAAG,CAAE,EAAA;AAAA,IACvC,QAAA,EAAU,EAAE,KAAA,EAAO,CAAE,EAAA;AAAA,GACvB;AAAA,EACA,cAAc,aAAc,CAAA,YAAA;AAAA,EAC5B,cAAgB,EAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAA,CAAA;AAqClB,CAAA;;ACzCA,mBAAeqB,mBAAgB,CAAA;AAAA,EAC7B,OAAS,EAAA,UAAA;AAAA,EACT,KAAO,EAAA;AAAA,IACL,MAAA,EAAQ,EAAE,IAAA,EAAM,MAA0C,EAAA,OAAA,EAAS,OAAO,EAAE,CAAG,EAAA,GAAA,EAAK,CAAG,EAAA,GAAA,EAAO,CAAA,EAAA;AAAA,IAC9F,QAAU,EAAA,EAAE,IAAM,EAAA,MAAA,EAAQ,SAAS,GAAI,EAAA;AAAA,GACzC;AAAA,EACA,OAAU,GAAA;AACR,IAAM,MAAA,IAAA,GAAO,IAAI0E,wBAAA,CAAW,QAAQ,CAAA,CAAA;AAEpC,IAAA,QAAA,CAAS,IAAM,EAAA,QAAA,EAAU,IAAK,CAAA,QAAA,CAAS,QAAQ,OAAO,CAAA,CAAA;AACtD,IAAA,QAAA,CAAS,IAAM,EAAA,UAAA,EAAY,IAAK,CAAA,QAAA,CAAS,UAAU,OAAO,CAAA,CAAA;AAE1D,IAAA,IAAA,CAAK,eAAe,IAAI,CAAA,CAAA;AAAA,GAC1B;AAAA,EACA,OAAS,EAAA,cAAA;AACX,CAAC,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBM,MAAM,gBAAmB,GAAA;AAAA,EAC9B,QAAQ,GAAgB,EAAA;AACtB,IAAA,MAAM,KAAQ,GAAA;AAAA,MACZ,QAAA;AAAA,MACA,oBAAA;AAAA,MACA,mBAAA;AAAA,MACA,WAAA;AAAA,MACA,UAAA;AAAA,MACA,OAAA;AAAA,MACA,OAAA;AAAA,MAEA,YAAA;AAAA,MAEA,cAAA;AAAA,MACA,kBAAA;AAAA,MACA,iBAAA;AAAA,MACA,YAAA;AAAA,MACA,eAAA;AAAA,MACA,WAAA;AAAA,MAEA,eAAA;AAAA,MACA,iBAAA;AAAA,MACA,gBAAA;AAAA,MACA,eAAA;AAAA,MACA,kBAAA;AAAA,MACA,gBAAA;AAAA,MACA,gBAAA;AAAA,MACA,kBAAA;AAAA,MACA,oBAAA;AAAA,MACA,cAAA;AAAA,MAEA,SAAA;AAAA,MACA,aAAA;AAAA,MAEA,gBAAA;AAAA,MAEA,MAAA;AAAA,MAEA,KAAA;AAAA,MAAO,aAAA;AAAA,MACP,QAAA;AAAA,MAAU,gBAAA;AAAA,MACV,MAAA;AAAA,MAAQ,cAAA;AAAA,MACR,UAAA;AAAA,MAAY,kBAAA;AAAA,MACZ,cAAA;AAAA,MAAgB,sBAAA;AAAA,MAChB,aAAA;AAAA,MAAe,qBAAA;AAAA,MACf,OAAA;AAAA,MAAS,eAAA;AAAA,MACT,YAAA;AAAA,MAAc,oBAAA;AAAA,MACd,OAAA;AAAA,MAAS,eAAA;AAAA,MACT,YAAA;AAAA,MAAc,oBAAA;AAAA,MACd,MAAA;AAAA,MAAQ,cAAA;AAAA,MACR,QAAA;AAAA,MAAU,gBAAA;AAAA,MACV,aAAA;AAAA,MAAe,qBAAA;AAAA,MACf,MAAA;AAAA,MACA,OAAA;AAAA,MAAS,eAAA;AAAA,MACT,WAAA;AAAA,MAAa,mBAAA;AAAA,MACb,MAAA;AAAA,MAAQ,cAAA;AAAA,MAER,OAAA;AAAA,MACA,eAAA;AAAA,MACA,QAAA;AAAA,MACA,QAAA;AAAA,MAEA,UAAA;AAAA,MACA,WAAA;AAAA,MAEA,WAAA;AAAA,MACA,gBAAA;AAAA,MACA,UAAA;AAAA,MACA,UAAA;AAAA,MACA,cAAA;AAAA,MACA,YAAA;AAAA,MACA,SAAA;AAAA,MACA,UAAA;AAAA,MACA,UAAA;AAAA,MACA,eAAA;AAAA,MACA,iBAAA;AAAA,MACA,cAAA;AAAA,KACF,CAAA;AAEA,IAAA,KAAA,CAAM,QAAQ,CAAQ,IAAA,KAAA;AAEpB,MAAI,GAAA,CAAA,SAAA,CAAU,IAAM,EAAA,KAAA,CAAM,IAAK,CAAA,CAAA,CAAA;AAAA,KAChC,CAAA,CAAA;AAAA,GACH;AACF,EAAA;AAEO,SAAS,UAAU,MAAkB,EAAA;AAC1C,EAAA,OAAOM,aAAW,CAAA,MAAM,CAAE,CAAA,GAAA,CAAI,gBAAgB,CAAA,CAAA;AAChD;;AC1FO,MAAM,qBAAiD,GAAA;AAAA,EAC5D,qBAAuB,EAAA,EAAA;AAAA,EACvB,MAAQ,EAAA,CAAA;AAAA,EACR,UAAY,EAAA,CAAA;AAAA,EACZ,WAAa,EAAA,CAAA;AAAA,EACb,YAAc,EAAA,CAAA;AAAA,EACd,cAAgB,EAAA,CAAA;AAAA,EAChB,eAAiB,EAAA,CAAA;AAAA,EACjB,gBAAkB,EAAA,CAAA;AACpB,EAAA;AAEa,MAAA,kBAAA,GAAqB,CAAC,KAAA,EAAe,cAA2B,KAAA;AAC3E,EAAA,MAAM,MAAM,KAAM,CAAA,OAAA,CAAQ,mBAAmB,qBAAsB,CAAA,qBAAA,CAAA,GAAyB,IAAI,cAAc,CAAA,CAAA;AAC9G,EAAO,OAAA,GAAA,CAAA;AACT;;ACTO,MAAM,eAAN,MAAkB;AAAA,EAavB,OAAc,YAAa,CAAA,KAAA,EAAuB,QAAkB,EAAA;AAClE,IAAA,YAAA,CAAY,kBAAkB,KAAO,EAAA,QAAA,EAAU,EAAE,MAAA,EAAQ,OAAO,CAAA,CAAA;AAAA,GAClE;AAAA,EAKA,OAAc,WAAY,CAAA,KAAA,EAAuB,QAAkB,EAAA;AACjE,IAAA,YAAA,CAAY,kBAAkB,KAAO,EAAA,QAAA,EAAU,EAAE,MAAA,EAAQ,MAAM,CAAA,CAAA;AAAA,GACjE;AAAA,EAQA,OAAc,iBAAkB,CAAA,KAAA,EAAuB,QAAkB,EAAA,OAAA,GAAkB,EAAI,EAAA;AAC7F,IAAI,IAAA,CAAC,KAAS,IAAA,CAAC,QAAU,EAAA;AACvB,MAAM,MAAA,IAAI,MAAM,4BAA4B,CAAA,CAAA;AAAA,KAC9C;AAEA,IAAA,OAAA,CAAQ,KAAK,sBAAsB,CAAA,CAAA;AAAA,GAkBrC;AAAA,EAKA,OAAc,WAAY,CAAA,KAAA,EAAuB,QAAkB,EAAA;AACjE,IAAI,IAAA,CAAC,KAAS,IAAA,CAAC,QAAU,EAAA;AACvB,MAAM,MAAA,IAAI,MAAM,4BAA4B,CAAA,CAAA;AAAA,KAC9C;AACA,IAAA,QAAA,GAAW,YAAY,CAAA,YAAA,CAAa,QAAU,EAAA,YAAA,CAAY,aAAa,CAAA,CAAA;AACvE,IAAM,MAAA,QAAA,GAAW,IAAIC,0BAAY,EAAA,CAAA;AACjC,IAAM,MAAA,MAAA,GAAS,QAAS,CAAA,KAAA,CAAM,KAAK,CAAA,CAAA;AACnC,IAAY,YAAA,CAAA,UAAA,CAAW,QAAQ,QAAQ,CAAA,CAAA;AAAA,GACzC;AAAA,EAKA,OAAc,aAAc,CAAA,KAAA,EAAmB,QAAkB,EAAA,OAAA,GAAgC,EAAI,EAAA;AACnG,IAAI,IAAA,CAAC,KAAS,IAAA,CAAC,QAAU,EAAA;AACvB,MAAM,MAAA,IAAI,MAAM,4BAA4B,CAAA,CAAA;AAAA,KAC9C;AACA,IAAA,QAAA,GAAW,YAAY,CAAA,YAAA,CAAa,QAAU,EAAA,YAAA,CAAY,eAAe,CAAA,CAAA;AACzE,IAAM,MAAA,QAAA,GAAW,IAAIC,8BAAc,EAAA,CAAA;AACnC,IAAA,MAAM,eAAwC,GAAA;AAAA,MAC5C,WAAa,EAAA,CAAA;AAAA,KACf,CAAA;AACA,IAAA,OAAA,GAAU,MAAO,CAAA,MAAA,CAAO,EAAC,EAAG,iBAAiB,OAAO,CAAA,CAAA;AACpD,IAAA,MAAM,MAAS,GAAA,QAAA,CAAS,KAAM,CAAA,KAAA,EAAO,OAAO,CAAA,CAAA;AAC5C,IAAY,YAAA,CAAA,eAAA,CAAgB,QAAQ,QAAQ,CAAA,CAAA;AAAA,GAC9C;AAAA,EAOA,OAAc,mBAAoB,CAAA,KAAA,EAAuB,QAAkB,EAAA;AACzE,IAAM,MAAA,IAAA,GAAO,MAAM,MAAO,EAAA,CAAA;AAC1B,IAAA,IAAI,CAAC,QAAS,CAAA,WAAA,GAAc,QAAS,CAAA,YAAA,CAAY,cAAc,CAAG,EAAA;AAChE,MAAA,QAAA,IAAY,YAAY,CAAA,cAAA,CAAA;AAAA,KAC1B;AACA,IAAY,YAAA,CAAA,QAAA,CAAS,MAAM,QAAQ,CAAA,CAAA;AAAA,GACrC;AAAA,EAKA,OAAO,IAAK,CAAA,IAAA,EAAY,QAAkB,EAAA;AACxC,IAAA,IAAI,OAAO,YAAY,CAAA,YAAA,CAAA;AACvB,IAAA,IAAI,CAAC,IAAM,EAAA;AACT,MAAO,IAAA,GAAA,QAAA,CAAS,cAAc,GAAG,CAAA,CAAA;AACjC,MAAA,IAAA,CAAK,MAAM,OAAU,GAAA,MAAA,CAAA;AACrB,MAAS,QAAA,CAAA,IAAA,CAAK,YAAY,IAAI,CAAA,CAAA;AAC9B,MAAA,YAAA,CAAY,YAAe,GAAA,IAAA,CAAA;AAAA,KAC7B;AACA,IAAK,IAAA,CAAA,IAAA,GAAO,GAAI,CAAA,eAAA,CAAgB,IAAI,CAAA,CAAA;AACpC,IAAA,IAAA,CAAK,QAAW,GAAA,QAAA,CAAA;AAChB,IAAA,IAAA,CAAK,KAAM,EAAA,CAAA;AAAA,GACb;AAAA,EAEA,OAAO,eAAgB,CAAA,MAAA,EAAqB,QAAkB,EAAA;AAC5D,IAAY,YAAA,CAAA,IAAA,CAAK,IAAI,IAAA,CAAK,CAAC,MAAM,CAAG,EAAA,EAAE,IAAM,EAAA,0BAAA,EAA4B,CAAA,EAAG,QAAQ,CAAA,CAAA;AAAA,GACrF;AAAA,EAEA,OAAO,QAAS,CAAA,IAAA,EAAc,QAAkB,EAAA;AAC9C,IAAA,YAAA,CAAY,cAAe,CAAA,IAAA,CAAK,SAAU,CAAA,IAAI,GAAG,QAAQ,CAAA,CAAA;AAAA,GAC3D;AAAA,EAEA,OAAO,cAAe,CAAA,UAAA,EAAoB,QAAkB,EAAA;AAC1D,IAAY,YAAA,CAAA,IAAA,CAAK,IAAI,IAAA,CAAK,CAAC,UAAU,CAAG,EAAA,EAAE,IAAM,EAAA,kBAAA,EAAoB,CAAA,EAAG,QAAQ,CAAA,CAAA;AAAA,GACjF;AAAA,EAEA,OAAO,UAAW,CAAA,GAAA,EAAa,QAAkB,EAAA;AAC/C,IAAY,YAAA,CAAA,IAAA,CAAK,IAAI,IAAA,CAAK,CAAC,GAAG,CAAG,EAAA,EAAE,IAAM,EAAA,UAAA,EAAY,CAAA,EAAG,QAAQ,CAAA,CAAA;AAAA,GAClE;AAAA,EAKA,OAAe,YAAa,CAAA,QAAA,EAAkB,SAAmB,EAAA;AAC/D,IAAI,IAAA,CAAC,SAAS,WAAY,EAAA,CAAE,SAAS,SAAU,CAAA,WAAA,EAAa,CAAG,EAAA;AAC7D,MAAY,QAAA,IAAA,SAAA,CAAA;AAAA,KACd;AACA,IAAO,OAAA,QAAA,CAAA;AAAA,GACT;AACF,CAAA,CAAA;AA3IO,IAAM,WAAN,GAAA,aAAA;AAAM,WAAA,CACG,cAAiB,GAAA,OAAA,CAAA;AADpB,WAAA,CAEG,aAAgB,GAAA,MAAA,CAAA;AAFnB,WAAA,CAGG,aAAgB,GAAA,MAAA,CAAA;AAHnB,WAAA,CAIG,eAAkB,GAAA,MAAA,CAAA;AAJrB,WAAA,CAKG,cAAiB,GAAA,OAAA;;ACL1B,MAAM,aAAc,CAAA;AAAA,EAIzB,OAAc,cAAe,CAAA,EAAA,EAAoB,EAA6B,EAAA;AAC5E,IAAA,IAAI,OAAO,EAAI,EAAA;AACb,MAAO,OAAA,IAAA,CAAA;AAAA,KACT;AACA,IAAA,IAAI,EAAc,YAAA7G,gBAAA,CAAM,QAAY,IAAA,EAAA,YAAcA,iBAAM,QAAU,EAAA;AAChE,MAAM,MAAA,MAAA,GAAS,EAAG,CAAA,IAAA,KAAS,EAAG,CAAA,IAAA,IAC5B,GAAG,SAAc,KAAA,EAAA,CAAG,SACpB,IAAA,EAAA,CAAG,OAAY,KAAA,EAAA,CAAG,WAClB,EAAG,CAAA,IAAA,KAAS,EAAG,CAAA,IAAA,IACf,EAAG,CAAA,OAAA,KAAY,GAAG,OAClB,IAAA,EAAA,CAAG,IAAS,KAAA,EAAA,CAAG,IACf,IAAA,EAAA,CAAG,gBAAgB,EAAG,CAAA,WAAA,IACtB,IAAK,CAAA,WAAA,CAAa,EAAW,CAAA,KAAA,EAAQ,GAAW,KAAK,CAAA,IACrD,IAAK,CAAA,WAAA,CAAa,EAAW,CAAA,QAAA,EAAW,GAAW,QAAQ,CAAA,IAC1D,EAAW,CAAA,SAAA,KAAe,EAAW,CAAA,SAAA,IACrC,EAAW,CAAA,SAAA,KAAe,EAAW,CAAA,SAAA,IACrC,EAAW,CAAA,QAAA,KAAc,EAAW,CAAA,QAAA,CAAA;AAEvC,MAAO,OAAA,MAAA,CAAA;AAAA,KACT;AACA,IAAO,OAAA,KAAA,CAAA;AAAA,GACT;AAAA,EAKA,OAAc,eAAgB,CAAA,EAAA,EAAuC,EAAgD,EAAA;AACnH,IAAA,IAAI,OAAO,EAAI,EAAA;AACb,MAAO,OAAA,IAAA,CAAA;AAAA,KACE,MAAA,IAAA,KAAA,CAAM,OAAQ,CAAA,EAAE,CAAK,IAAA,KAAA,CAAM,OAAQ,CAAA,EAAE,CAAK,IAAA,EAAA,CAAG,MAAW,KAAA,EAAA,CAAG,MAAQ,EAAA;AAC5E,MAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,EAAG,CAAA,MAAA,EAAQ,EAAE,CAAG,EAAA;AAClC,QAAA,IAAI,CAAC,IAAK,CAAA,cAAA,CAAe,GAAG,CAAI,CAAA,EAAA,EAAA,CAAG,EAAE,CAAG,EAAA;AACtC,UAAO,OAAA,KAAA,CAAA;AAAA,SACT;AAAA,OACF;AACA,MAAO,OAAA,IAAA,CAAA;AAAA,eACE,EAAc,YAAAA,gBAAA,CAAM,QAAY,IAAA,EAAA,YAAcA,iBAAM,QAAU,EAAA;AACvE,MAAO,OAAA,IAAA,CAAK,cAAe,CAAA,EAAA,EAAI,EAAE,CAAA,CAAA;AAAA,KACnC;AACA,IAAO,OAAA,KAAA,CAAA;AAAA,GACT;AAAA,EAKA,OAAc,WAAY,CAAA,EAAA,EAAiB,EAA0B,EAAA;AACnE,IAAA,IAAI,OAAO,EAAI,EAAA;AACb,MAAO,OAAA,IAAA,CAAA;AAAA,KACT;AACA,IAAA,IAAI,EAAc,YAAAA,gBAAA,CAAM,KAAS,IAAA,EAAA,YAAcA,iBAAM,KAAO,EAAA;AAC1D,MAAO,OAAA,EAAA,CAAG,OAAO,EAAE,CAAA,CAAA;AAAA,KACrB;AACA,IAAO,OAAA,KAAA,CAAA;AAAA,GACT;AACF;;AC1DO,MAAM,gBAAmB,GAAA,KAAA;;ACWzB,MAAM,eAAN,MAAkB;AAAA,EAKvB,OAAc,iBAAiB,MAAwB,EAAA;AACrD,IAAA,IAAA,CAAK,oBAAoB,MAAM,CAAA,CAAA;AAE/B,IAAK,IAAA,CAAA,mBAAA,CAAoB,MAAQ,EAAA,EAAE,CAAA,CAAA;AAEnC,IAAA,IAAA,CAAK,uBAAuB,MAAM,CAAA,CAAA;AAAA,GACpC;AAAA,EAKA,OAAc,sBAAuB,CAAA,KAAA,EAAoB,IAAc,EAAA;AACrE,IAAA,MAAM,MAAS,GAAA,IAAA,CAAK,eAAgB,CAAA,KAAA,EAAO,IAAI,CAAA,CAAA;AAC/C,IAAA,IAAA,CAAK,iBAAiB,MAAM,CAAA,CAAA;AAAA,GAC9B;AAAA,EAMA,OAAc,gBAAiB,CAAA,MAAA,EAAwB,OAAU,GAAA,GAAA,EAAK,oBAA+B,kBAA+C,EAAA;AAElJ,IAAA,MAAM,mBAAmC,EAAC,CAAA;AAC1C,IAAM,MAAA,UAAA,GAAa,CAAC,GAAwB,KAAA;AAE1C,MAAI,IAAA,CAAC,iBAAiB,IAAK,CAAA,CAAA,CAAA,KAAK,EAAE,IAAS,KAAA,GAAA,CAAI,IAAI,CAAG,EAAA;AACpD,QAAiB,gBAAA,CAAA,IAAA,CAAK,EAAE,IAAA,EAAM,GAAI,CAAA,IAAA,EAAM,OAAS,EAAA,GAAA,CAAI,OAAS,EAAA,WAAA,EAAa,GAAI,CAAA,WAAA,EAAa,CAAA,CAAA;AAC5F,QAAA,GAAA,CAAI,OAAW,IAAA,OAAA,CAAA;AACf,QAAA,GAAA,CAAI,WAAc,GAAA,IAAA,CAAA;AAAA,OACpB;AAAA,KACF,CAAA;AACA,IAAM,MAAA,2BAAA,GAA8B,CAAC,GAAoD,KAAA;AAEvF,MAAA,MAAM,UAAU,gBAAiB,CAAA,IAAA,CAAK,OAAK,CAAE,CAAA,IAAA,KAAS,IAAI,IAAI,CAAA,CAAA;AAC9D,MAAA,IAAI,CAAC,OAAS,EAAA;AACZ,QAAM,MAAA,cAAA,GAAiB,IAAI,KAAM,EAAA,CAAA;AACjC,QAAA,gBAAA,CAAiB,IAAK,CAAA,EAAE,IAAM,EAAA,GAAA,CAAI,MAAM,OAAS,EAAA,GAAA,CAAI,OAAS,EAAA,WAAA,EAAa,GAAI,CAAA,WAAA,EAAa,QAAU,EAAA,GAAA,EAAK,gBAAgB,CAAA,CAAA;AAC3H,QAAA,cAAA,CAAe,OAAW,IAAA,OAAA,CAAA;AAC1B,QAAA,cAAA,CAAe,WAAc,GAAA,IAAA,CAAA;AAC7B,QAAO,OAAA,cAAA,CAAA;AAAA,OACT;AACA,MAAA,OAAO,OAAQ,CAAA,cAAA,CAAA;AAAA,KACjB,CAAA;AACA,IAAA,MAAA,CAAO,SAAS,CAAO,GAAA,KAAA;AACrB,MAAA,IAAI,sBAAsB,kBAAmB,CAAA,OAAA,CAAQ,GAAI,CAAA,IAAI,MAAM,CAAI,CAAA,EAAA;AACrE,QAAA,OAAA;AAAA,OACF;AACA,MAAA,IAAI,sBAAsB,kBAAmB,CAAA,OAAA,CAAQ,GAAI,CAAA,IAAI,MAAM,CAAI,CAAA,EAAA;AACrE,QAAA,OAAA;AAAA,OACF;AAEA,MAAI,IAAA,GAAA,YAAeA,iBAAM,IAAM,EAAA;AAC7B,QAAA,MAAM,IAAO,GAAA,GAAA,CAAA;AAEb,QAAA,IAAI,kBAAoB,EAAA;AACtB,UAAA,IAAI,KAAM,CAAA,OAAA,CAAQ,IAAK,CAAA,QAAQ,CAAG,EAAA;AAChC,YAAA,MAAM,YAA8B,EAAC,CAAA;AACrC,YAAK,IAAA,CAAA,QAAA,CAAS,QAAQ,CAAO,GAAA,KAAA;AAC3B,cAAM,MAAA,CAAA,GAAI,4BAA4B,GAAG,CAAA,CAAA;AACzC,cAAA,IAAI,CAAG,EAAA;AACL,gBAAA,SAAA,CAAU,KAAK,CAAC,CAAA,CAAA;AAAA,eAClB;AAAA,aACD,CAAA,CAAA;AACD,YAAA,IAAA,CAAK,QAAW,GAAA,SAAA,CAAA;AAAA,WAClB,MAAA,IAAW,KAAK,QAAU,EAAA;AACxB,YAAM,MAAA,CAAA,GAAI,2BAA4B,CAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AACnD,YAAA,IAAI,CAAG,EAAA;AACL,cAAA,IAAA,CAAK,QAAW,GAAA,CAAA,CAAA;AAAA,aAClB;AAAA,WACF;AAAA,SACK,MAAA;AACL,UAAA,IAAI,KAAM,CAAA,OAAA,CAAQ,IAAK,CAAA,QAAQ,CAAG,EAAA;AAChC,YAAK,IAAA,CAAA,QAAA,CAAS,QAAQ,CAAO,GAAA,KAAA;AAC3B,cAAA,UAAA,CAAW,GAAG,CAAA,CAAA;AAAA,aACf,CAAA,CAAA;AAAA,WACH,MAAA,IAAW,KAAK,QAAU,EAAA;AACxB,YAAA,MAAM,MAAM,IAAK,CAAA,QAAA,CAAA;AACjB,YAAA,UAAA,CAAW,GAAG,CAAA,CAAA;AAAA,WAChB;AAAA,SACF;AAAA,OACF;AAAA,KACD,CAAA,CAAA;AACD,IAAO,OAAA,gBAAA,CAAA;AAAA,GACT;AAAA,EAMA,OAAc,mBAAA,CAAoB,MAAwB,EAAA,gBAAA,EAAkC,oBAA+B,kBAA+B,EAAA;AACxJ,IAAM,MAAA,aAAA,GAAgB,CAAC,GAAwB,KAAA;AAE7C,MAAA,MAAM,WAAW,gBAAiB,CAAA,IAAA,CAAK,OAAK,CAAE,CAAA,IAAA,KAAS,IAAI,IAAI,CAAA,CAAA;AAC/D,MAAA,IAAI,QAAU,EAAA;AACZ,QAAA,GAAA,CAAI,UAAU,QAAS,CAAA,OAAA,CAAA;AACvB,QAAA,GAAA,CAAI,cAAc,QAAS,CAAA,WAAA,CAAA;AAAA,OACtB,MAAA;AAEL,QAAA,GAAA,CAAI,OAAU,GAAA,CAAA,CAAA;AAAA,OAChB;AAAA,KACF,CAAA;AACA,IAAM,MAAA,sBAAA,GAAyB,CAAC,GAAwB,KAAA;AAEtD,MAAM,MAAA,OAAA,GAAU,gBAAiB,CAAA,IAAA,CAAK,CAAK,CAAA,KAAA,CAAA,CAAE,kBAAkB,CAAE,CAAA,cAAA,CAAe,IAAS,KAAA,GAAA,CAAI,IAAI,CAAA,CAAA;AACjG,MAAA,IAAI,OAAS,EAAA;AACX,QAAA,OAAO,OAAQ,CAAA,QAAA,CAAA;AAAA,OACjB;AACA,MAAO,OAAA,KAAA,CAAA,CAAA;AAAA,KACT,CAAA;AACA,IAAA,MAAA,CAAO,SAAS,CAAQ,IAAA,KAAA;AACtB,MAAA,IAAI,sBAAsB,kBAAmB,CAAA,OAAA,CAAQ,IAAK,CAAA,IAAI,MAAM,CAAI,CAAA,EAAA;AACtE,QAAA,OAAA;AAAA,OACF;AACA,MAAA,IAAI,sBAAsB,kBAAmB,CAAA,OAAA,CAAQ,IAAK,CAAA,IAAI,MAAM,CAAI,CAAA,EAAA;AACtE,QAAA,OAAA;AAAA,OACF;AAEA,MAAI,IAAA,IAAA,YAAgBA,iBAAM,IAAM,EAAA;AAE9B,QAAA,IAAI,kBAAoB,EAAA;AACtB,UAAA,IAAI,KAAM,CAAA,OAAA,CAAQ,IAAK,CAAA,QAAQ,CAAG,EAAA;AAChC,YAAA,MAAM,YAA8B,EAAC,CAAA;AACrC,YAAK,IAAA,CAAA,QAAA,CAAS,QAAQ,CAAO,GAAA,KAAA;AAC3B,cAAM,MAAA,CAAA,GAAI,uBAAuB,GAAG,CAAA,CAAA;AACpC,cAAA,IAAI,CAAG,EAAA;AACL,gBAAA,SAAA,CAAU,KAAK,CAAC,CAAA,CAAA;AAAA,eAClB;AAAA,aACD,CAAA,CAAA;AACD,YAAA,IAAA,CAAK,QAAW,GAAA,SAAA,CAAA;AAAA,WAClB,MAAA,IAAW,KAAK,QAAU,EAAA;AACxB,YAAM,MAAA,CAAA,GAAI,sBAAuB,CAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AAC9C,YAAA,IAAI,CAAG,EAAA;AACL,cAAA,IAAA,CAAK,QAAW,GAAA,CAAA,CAAA;AAAA,aAClB;AAAA,WACF;AAAA,SACK,MAAA;AACL,UAAA,IAAI,KAAM,CAAA,OAAA,CAAQ,IAAK,CAAA,QAAQ,CAAG,EAAA;AAChC,YAAK,IAAA,CAAA,QAAA,CAAS,QAAQ,CAAO,GAAA,KAAA;AAC3B,cAAA,aAAA,CAAc,GAAG,CAAA,CAAA;AAAA,aAClB,CAAA,CAAA;AAAA,WACH,MAAA,IAAW,KAAK,QAAU,EAAA;AACxB,YAAA,MAAM,MAAM,IAAK,CAAA,QAAA,CAAA;AACjB,YAAA,aAAA,CAAc,GAAG,CAAA,CAAA;AAAA,WACnB;AAAA,SACF;AAAA,OACF;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AAAA,EAKA,OAAc,sBAAuB,CAAA,KAAA,EAAoB,MAAc,OAAU,GAAA,GAAA,EAAK,oBAA+B,kBAA+C,EAAA;AAClK,IAAA,MAAM,MAAS,GAAA,KAAA,CAAM,mBAAoB,CAAA,MAAA,EAAQ,IAAI,CAAA,CAAA;AACrD,IAAA,IAAI,CAAC,MAAQ,EAAA;AACX,MAAM,MAAA,IAAI,KAAM,CAAA,CAAA,+BAAA,EAAkC,IAAM,CAAA,CAAA,CAAA,CAAA;AAAA,KAC1D;AACA,IAAA,OAAO,YAAY,CAAA,gBAAA,CAAiB,MAAQ,EAAA,OAAA,EAAS,oBAAoB,kBAAkB,CAAA,CAAA;AAAA,GAC7F;AAAA,EAKA,OAAc,yBAA0B,CAAA,KAAA,EAAoB,IAAc,EAAA,gBAAA,EAAkC,oBAA+B,kBAA+B,EAAA;AACxK,IAAA,MAAM,MAAS,GAAA,KAAA,CAAM,mBAAoB,CAAA,MAAA,EAAQ,IAAI,CAAA,CAAA;AACrD,IAAA,IAAI,CAAC,MAAQ,EAAA;AACX,MAAM,MAAA,IAAI,KAAM,CAAA,CAAA,+BAAA,EAAkC,IAAM,CAAA,CAAA,CAAA,CAAA;AAAA,KAC1D;AACA,IAAA,YAAA,CAAY,mBAAoB,CAAA,MAAA,EAAQ,gBAAkB,EAAA,kBAAA,EAAoB,kBAAkB,CAAA,CAAA;AAAA,GAClG;AAAA,EAKA,OAAc,aAAA,CAAc,KAAoB,EAAA,MAAA,EAAwB,YAAY,KAAiB,EAAA;AACnG,IAAM,MAAA,QAAA,GAAW,IAAIA,gBAAA,CAAM,OAAQ,EAAA,CAAA;AACnC,IAAW,UAAA,CAAA,iBAAA,CAAkB,QAAQ,QAAQ,CAAA,CAAA;AAC7C,IAAA,MAAM,WAAW,IAAI,QAAA,CAAS,KAAO,EAAA,MAAA,CAAO,IAAI,QAAQ,CAAA,CAAA;AACxD,IAAA,QAAA,CAAS,iBAAiB,SAAS,CAAA,CAAA;AACnC,IAAA,QAAA,CAAS,OAAQ,EAAA,CAAA;AACjB,IAAO,OAAA,QAAA,CAAA;AAAA,GACT;AAAA,EAKA,OAAc,gBAAgB,QAAoB,EAAA;AAChD,IAAA,IAAI,CAAC,QAAU,EAAA;AACb,MAAM,MAAA,IAAI,MAAM,mBAAmB,CAAA,CAAA;AAAA,KACrC;AACA,IAAA,QAAA,CAAS,SAAU,EAAA,CAAA;AAAA,GACrB;AAAA,EAUA,OAAc,iBAAiB,MAAwB,EAAA;AACrD,IAAM,MAAA,iBAAA,GAAoB,IAAIA,gBAAA,CAAM,iBAAkB,CAAA;AAAA,MACpD,KAAO,EAAA,QAAA;AAAA,MACP,SAAW,EAAA,IAAA;AAAA,MACX,WAAa,EAAA,IAAA;AAAA,MACb,OAAS,EAAA,GAAA;AAAA,KACV,CAAA,CAAA;AACD,IAAA,MAAA,CAAO,gBAAgB,CAAO,GAAA,KAAA;AAC5B,MAAI,IAAA,GAAA,YAAeA,iBAAM,IAAM,EAAA;AAC7B,QAAA,MAAM,IAAO,GAAA,GAAA,CAAA;AACb,QAAK,IAAA,CAAA,QAAA,CAAS,uBAAuB,IAAK,CAAA,QAAA,CAAA;AAC1C,QAAA,IAAA,CAAK,QAAW,GAAA,iBAAA,CAAA;AAAA,OAClB;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AAAA,EAKA,OAAc,sBAAuB,CAAA,KAAA,EAAoB,IAAc,EAAA;AACrE,IAAA,MAAM,MAAS,GAAA,KAAA,CAAM,mBAAoB,CAAA,MAAA,EAAQ,IAAI,CAAA,CAAA;AACrD,IAAA,IAAI,CAAC,MAAQ,EAAA;AACX,MAAM,MAAA,IAAI,KAAM,CAAA,CAAA,+BAAA,EAAkC,IAAM,CAAA,CAAA,CAAA,CAAA;AAAA,KAC1D;AACA,IAAA,YAAA,CAAY,iBAAiB,MAAM,CAAA,CAAA;AAAA,GACrC;AAAA,EAKA,OAAc,oBAAoB,MAAwB,EAAA;AACxD,IAAA,MAAA,CAAO,gBAAgB,CAAO,GAAA,KAAA;AAC5B,MAAI,IAAA,GAAA,YAAeA,iBAAM,IAAM,EAAA;AAE7B,QAAI,IAAA,GAAA,CAAI,SAAS,oBAAsB,EAAA;AACrC,UAAI,GAAA,CAAA,QAAA,GAAW,IAAI,QAAS,CAAA,oBAAA,CAAA;AAC5B,UAAA,GAAA,CAAI,SAAS,oBAAuB,GAAA,KAAA,CAAA,CAAA;AAAA,SACtC;AAAA,OACF;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AAAA,EAKA,OAAc,yBAA0B,CAAA,KAAA,EAAoB,IAAc,EAAA;AACxE,IAAA,MAAM,MAAS,GAAA,KAAA,CAAM,mBAAoB,CAAA,MAAA,EAAQ,IAAI,CAAA,CAAA;AACrD,IAAA,IAAI,CAAC,MAAQ,EAAA;AACX,MAAM,MAAA,IAAI,KAAM,CAAA,CAAA,+BAAA,EAAkC,IAAM,CAAA,CAAA,CAAA,CAAA;AAAA,KAC1D;AACA,IAAA,YAAA,CAAY,oBAAoB,MAAM,CAAA,CAAA;AAAA,GACxC;AAAA,EASA,OAAe,UAAU,KAAoB,EAAA,UAAA,EAAoB,cAAwB,EAAC,EAAG,YAAY,KAAyB,EAAA;AAChI,IAAM,MAAA,GAAA,GAAM,WAAW,WAAY,EAAA,CAAA;AACnC,IAAA,MAAM,UAA4B,EAAC,CAAA;AAEnC,IAAM,MAAA,QAAA,GAAW,CAAC,GAAgB,KAAA;AAChC,MAAA,OAAO,GAAI,CAAA,WAAA,EAAc,CAAA,OAAA,CAAQ,GAAG,CAAM,KAAA,CAAA,CAAA,CAAA;AAAA,KAC5C,CAAA;AACA,IAAM,MAAA,QAAA,GAAW,CAAC,GAAgB,KAAA;AAChC,MAAA,OAAO,GAAI,CAAA,QAAA,EAAW,CAAA,OAAA,CAAQ,GAAG,CAAM,KAAA,CAAA,CAAA,CAAA;AAAA,KACzC,CAAA;AACA,IAAM,MAAA,aAAA,GAAgB,CAAC,QAAkB,KAAA;AACvC,MAAA,IAAI,SAAS,IAAM,EAAA;AACjB,QAAA,IAAI,SAAS,IAAK,CAAA,WAAA,GAAc,OAAQ,CAAA,GAAG,MAAM,CAAI,CAAA,EAAA;AACnD,UAAO,OAAA,IAAA,CAAA;AAAA,SACT;AAAA,OACF;AACA,MAAA,IAAI,SAAS,cAAgB,EAAA;AAC3B,QAAA,MAAM,MAAM,QAAS,CAAA,cAAA,CAAA;AACrB,QAAM,MAAA,EAAA,GAAM,IAAI,QAAY,IAAA,GAAA,CAAI,SAAS,KAAW,IAAA,GAAA,CAAI,SAAa,IAAA,GAAA,CAAI,SAAU,CAAA,KAAA,CAAA;AACnF,QAAA,IAAI,MAAM,EAAG,CAAA,WAAA,GAAc,OAAQ,CAAA,GAAG,MAAM,CAAI,CAAA,EAAA;AAC9C,UAAO,OAAA,IAAA,CAAA;AAAA,SACT;AAAA,OACF;AACA,MAAO,OAAA,KAAA,CAAA;AAAA,KACT,CAAA;AAEA,IAAI,IAAA,WAAA,CAAY,SAAS,CAAG,EAAA;AAC1B,MAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,WAAY,CAAA,MAAA,EAAQ,EAAE,CAAG,EAAA;AAC3C,QAAA,MAAM,OAAO,WAAY,CAAA,CAAA,CAAA,CAAA;AACzB,QAAA,MAAM,MAAS,GAAA,KAAA,CAAM,mBAAoB,CAAA,MAAA,EAAQ,IAAI,CAAA,CAAA;AACrD,QAAA,IAAI,MAAQ,EAAA;AACV,UAAA,MAAA,CAAO,SAAS,CAAO,GAAA,KAAA;AACrB,YAAI,IAAA,QAAA,CAAS,GAAI,CAAA,IAAI,CAAK,IAAA,QAAA,CAAS,GAAI,CAAA,EAAE,CAAK,IAAA,aAAA,CAAc,GAAI,CAAA,QAAQ,CAAG,EAAA;AACzE,cAAA,OAAA,CAAQ,KAAK,GAAG,CAAA,CAAA;AAAA,aAClB;AAAA,WACD,CAAA,CAAA;AAAA,SACH;AACA,QAAI,IAAA,SAAA,IAAa,OAAQ,CAAA,MAAA,GAAS,CAAG,EAAA;AACnC,UAAO,OAAA,CAAC,QAAQ,CAAE,CAAA,CAAA,CAAA;AAAA,SACpB;AAAA,OACF;AAAA,KACK,MAAA;AAEL,MAAA,KAAA,CAAM,SAAS,CAAO,GAAA,KAAA;AACpB,QAAI,IAAA,QAAA,CAAS,GAAI,CAAA,IAAI,CAAK,IAAA,QAAA,CAAS,GAAI,CAAA,EAAE,CAAK,IAAA,aAAA,CAAc,GAAI,CAAA,QAAQ,CAAG,EAAA;AACzE,UAAA,OAAA,CAAQ,KAAK,GAAG,CAAA,CAAA;AAAA,SAClB;AAAA,OACD,CAAA,CAAA;AACD,MAAI,IAAA,SAAA,IAAa,OAAQ,CAAA,MAAA,GAAS,CAAG,EAAA;AACnC,QAAO,OAAA,CAAC,QAAQ,CAAE,CAAA,CAAA,CAAA;AAAA,OACpB;AAAA,KACF;AACA,IAAO,OAAA,OAAA,CAAA;AAAA,GACT;AAAA,EAKA,OAAc,KAAK,KAAoB,EAAA,UAAA,EAAoB,cAAwB,EAAC,EAAG,YAAY,KAAyB,EAAA;AAC1H,IAAA,OAAO,IAAK,CAAA,SAAA,CAAU,KAAO,EAAA,UAAA,EAAY,WAAW,CAAA,CAAA;AAAA,GACtD;AAAA,EAKA,OAAc,UAAU,KAAoB,EAAA,UAAA,EAAoB,cAAwB,EAAC,EAAG,YAAY,KAAmC,EAAA;AACzI,IAAA,MAAM,UAAU,IAAK,CAAA,SAAA,CAAU,KAAO,EAAA,UAAA,EAAY,aAAa,IAAI,CAAA,CAAA;AACnE,IAAI,IAAA,OAAA,CAAQ,SAAS,CAAG,EAAA;AACtB,MAAA,OAAO,OAAQ,CAAA,CAAA,CAAA,CAAA;AAAA,KACjB;AACA,IAAO,OAAA,KAAA,CAAA,CAAA;AAAA,GACT;AAAA,EAMA,OAAe,oBAAoB,GAAuB,EAAA;AACxD,IAAA,MAAM,UAAoB,EAAC,CAAA;AAI3B,IAAA,MAAM,GAAM,GAAA,IAAI,MAAO,CAAA,gCAAA,EAAkC,GAAG,CAAA,CAAA;AAC5D,IAAM,MAAA,GAAA,GAAM,GAAI,CAAA,IAAA,CAAK,GAAG,CAAA,CAAA;AACxB,IAAI,IAAA,GAAA,IAAO,GAAI,CAAA,MAAA,GAAS,CAAG,EAAA;AACzB,MAAA,GAAA,CAAI,QAAQ,CAAK,CAAA,KAAA;AACf,QAAA,IAAI,CAAG,EAAA;AACL,UAAA,MAAM,CAAI,GAAA,CAAA,CAAE,OAAQ,CAAA,GAAA,EAAK,EAAE,CAAA,CAAA;AAC3B,UAAM,MAAA,GAAA,GAAM,OAAO,CAAC,CAAA,CAAA;AACpB,UAAA,IAAI,GAAK,EAAA;AACP,YAAA,OAAA,CAAQ,KAAK,GAAG,CAAA,CAAA;AAAA,WACX,MAAA;AACL,YAAQ,OAAA,CAAA,GAAA,CAAI,uBAAuB,CAAG,CAAA,CAAA,CAAA,CAAA;AAAA,WACxC;AAAA,SACF;AAAA,OACD,CAAA,CAAA;AAAA,KACH;AACA,IAAO,OAAA,OAAA,CAAA;AAAA,GACT;AAAA,EAOA,OAAe,UAAW,CAAA,GAAA,EAAa,KAAwB,EAAA;AAC7D,IAAM,MAAA,OAAA,GAAU,IAAK,CAAA,mBAAA,CAAoB,GAAG,CAAA,CAAA;AAC5C,IAAA,MAAM,CAAI,GAAA,OAAA,CAAQ,SAAU,CAAA,CAAA,CAAA,KAAK,MAAM,KAAK,CAAA,CAAA;AAC5C,IAAA,OAAO,CAAM,KAAA,CAAA,CAAA,CAAA;AAAA,GACf;AAAA,EAOA,OAAe,WAAY,CAAA,GAAA,EAAa,MAA2B,EAAA;AACjE,IAAM,MAAA,OAAA,GAAU,IAAK,CAAA,mBAAA,CAAoB,GAAG,CAAA,CAAA;AAC5C,IAAM,MAAA,CAAA,GAAI,OAAQ,CAAA,SAAA,CAAU,CAAK,CAAA,KAAA;AAC/B,MAAA,MAAM,CAAI,GAAA,MAAA,CAAO,SAAU,CAAA,CAAA,CAAA,KAAK,MAAM,CAAC,CAAA,CAAA;AACvC,MAAA,OAAO,CAAM,KAAA,CAAA,CAAA,CAAA;AAAA,KACd,CAAA,CAAA;AACD,IAAA,OAAO,CAAM,KAAA,CAAA,CAAA,CAAA;AAAA,GACf;AAAA,EAKA,OAAc,cAAe,CAAA,KAAA,EAAoB,SAA+B,EAAA;AAC9E,IAAA,MAAM,SAAuC,EAAC,CAAA;AAE9C,IAAM,MAAA,KAAA,GAAQ,CAAC,IAAiB,KAAA;AAC9B,MAAM,MAAA,OAAA,GAAU,IAAK,CAAA,mBAAA,CAAoB,IAAI,CAAA,CAAA;AAC7C,MAAA,OAAA,CAAQ,QAAQ,CAAK,CAAA,KAAA;AACnB,QAAA,MAAA,CAAO,CAAK,CAAA,GAAA,IAAA,CAAA;AAAA,OACb,CAAA,CAAA;AAAA,KACH,CAAA;AAEA,IAAA,SAAA,CAAU,QAAQ,CAAQ,IAAA,KAAA;AACxB,MAAA,MAAM,MAAS,GAAA,KAAA,CAAM,mBAAoB,CAAA,MAAA,EAAQ,IAAI,CAAA,CAAA;AACrD,MAAA,IAAI,MAAQ,EAAA;AACV,QAAA,MAAA,CAAO,SAAS,CAAO,GAAA,KAAA;AACrB,UAAA,KAAA,CAAM,IAAI,IAAI,CAAA,CAAA;AACd,UAAI,IAAA,GAAA,CAAI,SAAS,cAAgB,EAAA;AAC/B,YAAM,MAAA,GAAA,GAAM,IAAI,QAAS,CAAA,cAAA,CAAA;AACzB,YAAA,IAAI,GAAI,CAAA,KAAA,IAAS,GAAI,CAAA,KAAA,CAAM,KAAO,EAAA;AAChC,cAAM,KAAA,CAAA,GAAA,CAAI,MAAM,KAAK,CAAA,CAAA;AAAA,aACvB;AAAA,WACF;AAAA,SACD,CAAA,CAAA;AAAA,OACH;AAAA,KACD,CAAA,CAAA;AAED,IAAA,OAAO,MAAO,CAAA,IAAA,CAAK,MAAM,CAAA,CAAE,IAAK,EAAA,CAAA;AAAA,GAClC;AAAA,EAMA,OAAc,sBAAuB,CAAA,KAAA,EAAoB,SAAmB,EAAA,MAAA,EAAkB,eAAkD,eAAoD,EAAA;AAClM,IAAA,MAAM,MAAS,GAAA,KAAA,CAAM,mBAAoB,CAAA,MAAA,EAAQ,SAAS,CAAA,CAAA;AAC1D,IAAA,IAAI,CAAC,MAAQ,EAAA;AACX,MAAA,OAAO,EAAC,CAAA;AAAA,KACV;AAEA,IAAA,MAAA,CAAO,SAAS,CAAO,GAAA,KAAA;AACrB,MAAA,IAAI,OAAU,GAAA,IAAA,CAAK,WAAY,CAAA,GAAA,CAAI,MAAM,MAAM,CAAA,CAAA;AAC/C,MAAA,IAAI,CAAC,OAAS,EAAA;AACZ,QAAA,IAAI,GAAI,CAAA,QAAA,IAAY,GAAI,CAAA,QAAA,CAAS,cAAgB,EAAA;AAC/C,UAAM,MAAA,GAAA,GAAM,IAAI,QAAS,CAAA,cAAA,CAAA;AACzB,UAAA,IAAI,GAAI,CAAA,KAAA,IAAS,GAAI,CAAA,KAAA,CAAM,KAAO,EAAA;AAChC,YAAA,OAAA,GAAU,IAAK,CAAA,WAAA,CAAY,GAAI,CAAA,KAAA,CAAM,OAAO,MAAM,CAAA,CAAA;AAAA,WACpD;AAAA,SACF;AAAA,OACF;AACA,MAAA,IAAI,WAAW,aAAe,EAAA;AAC5B,QAAA,aAAA,CAAc,GAAG,CAAA,CAAA;AAAA,OACnB;AACA,MAAI,IAAA,CAAC,WAAW,eAAiB,EAAA;AAC/B,QAAA,eAAA,CAAgB,GAAG,CAAA,CAAA;AAAA,OACrB;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AAAA,EAOA,OAAc,mBAAoB,CAAA,KAAA,EAAoB,SAAmB,EAAA,MAAA,EAAkB,yBAAyB,IAAM,EAAA;AACxH,IAAA,IAAA,CAAK,sBAAuB,CAAA,KAAA,EAAO,SAAW,EAAA,MAAA,EAAQ,CAAC,MAA2B,KAAA;AAChF,MAAA,IAAI,GAAkC,GAAA,MAAA,CAAA;AACtC,MAAA,OAAO,GAAK,EAAA;AACV,QAAA,GAAA,CAAI,OAAU,GAAA,IAAA,CAAA;AACd,QAAA,GAAA,GAAM,IAAI,MAAU,IAAA,KAAA,CAAA,CAAA;AAAA,OACtB;AAAA,KACF,EAAG,CAAC,MAA2B,KAAA;AAC7B,MAAA,IAAI,sBAAwB,EAAA;AAC1B,QAAA,MAAA,CAAO,OAAU,GAAA,KAAA,CAAA;AAAA,OACnB;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AAAA,EAEA,OAAc,uBAAuB,MAAwB,EAAA;AAC3D,IAAA,MAAA,CAAO,SAAS,CAAO,GAAA,KAAA;AACrB,MAAA,GAAA,CAAI,OAAU,GAAA,IAAA,CAAA;AAAA,KACf,CAAA,CAAA;AAAA,GACH;AAAA,EAEA,OAAc,4BAA6B,CAAA,KAAA,EAAoB,IAAc,EAAA;AAC3E,IAAA,MAAM,MAAS,GAAA,IAAA,CAAK,eAAgB,CAAA,KAAA,EAAO,IAAI,CAAA,CAAA;AAC/C,IAAA,IAAA,CAAK,uBAAuB,MAAM,CAAA,CAAA;AAAA,GACpC;AAAA,EAEA,OAAe,eAAgB,CAAA,KAAA,EAAoB,IAAc,EAAA;AAC/D,IAAA,MAAM,MAAS,GAAA,KAAA,CAAM,mBAAoB,CAAA,MAAA,EAAQ,IAAI,CAAA,CAAA;AACrD,IAAA,IAAI,CAAC,MAAQ,EAAA;AACX,MAAM,MAAA,IAAI,KAAM,CAAA,CAAA,+BAAA,EAAkC,IAAM,CAAA,CAAA,CAAA,CAAA;AAAA,KAC1D;AACA,IAAO,OAAA,MAAA,CAAA;AAAA,GACT;AAAA,EAYA,OAAc,WACZ,CAAA,MAAA,EACA,QAAW,GAAA,IAAA,CAAK,iBAAiB,KAAM,EAAA,EACvC,OAAU,GAAA,EAAE,aAAa,IAAM,EAAA,QAAA,EAAU,IAAM,EAAA,qBAAA,EAAuB,OAA+B,EAAA;AACrG,IAAA,IAAI,CAAC,MAAQ,EAAA;AACX,MAAA,OAAO,EAAC,CAAA;AAAA,KACV;AAEA,IAAA,IAAK,MAAO,CAAA,QAAA,CAAS,MAAW,KAAA,CAAA,KAC5B,QAAQ,WAAe,IAAA,CAAC,MAAO,CAAA,OAAA,IAAa,OAAQ,CAAA,QAAA,IAAY,EAAE,MAAA,YAAkBA,iBAAM,IAAS,CAAA,CAAA,EAAA;AACrG,MAAA,OAAO,EAAC,CAAA;AAAA,KACV;AACA,IAAA,MAAM,GAAM,GAAA,MAAA,CAAA;AACZ,IAAM,MAAA,MAAA,GAAS,IAAI,QAAS,CAAA,MAAA,CAAA;AAC5B,IAAA,IAAI,SAAS,CAAG,EAAA;AACd,MAAA,KAAA,IAAS,IAAI,MAAS,GAAA,CAAA,EAAG,CAAK,IAAA,CAAA,EAAG,EAAE,CAAG,EAAA;AACpC,QAAM,MAAA,CAAA,GAAI,IAAI,QAAS,CAAA,CAAA,CAAA,CAAA;AACvB,QAAA,MAAM8G,MAAQ,GAAA,IAAA,CAAK,WAAY,CAAA,CAAA,EAAG,UAAU,OAAO,CAAA,CAAA;AACnD,QAAAA,OAAM,OAAQ,CAAA,CAAA,IAAA,KAAQ,KAAK,YAAa,CAAA,GAAA,CAAI,WAAW,CAAC,CAAA,CAAA;AAAA,OAC1D;AAAA,KACF;AACA,IAAI,IAAA,CAAC,IAAI,QAAU,EAAA;AACjB,MAAA,OAAO,EAAC,CAAA;AAAA,KACV;AAEA,IAAM,MAAA,aAAA,GAAgB,CAAC,QAAA,EAAgC,MAA8C,KAAA;AAEnG,MAAA,MAAM,IAAO,GAAA,IAAI9G,gBAAM,CAAA,aAAA,CAAc,UAAU,CAAC,CAAA,CAAA;AAChD,MAAA,IAAA,CAAK,aAAa,MAAM,CAAA,CAAA;AAExB,MAAA,MAAM,IAAO,GAAA,IAAIA,gBAAM,CAAA,YAAA,CAAa,MAAM,QAAQ,CAAA,CAAA;AAGlD,MAAA,IAAA,CAAK,SAAS,UAAa,GAAA,KAAA,CAAA;AAC3B,MAAA,IAAA,CAAK,SAAS,SAAY,GAAA,IAAA,CAAA;AAC1B,MAAA,IAAA,CAAK,gBAAmB,GAAA,gBAAA,CAAA;AACxB,MAAA,IAAA,CAAK,YAAa,EAAA,CAAA;AAClB,MAAO,OAAA,IAAA,CAAA;AAAA,KACT,CAAA;AAEA,IAAA,MAAM,QAA8B,EAAC,CAAA;AACrC,IAAI,IAAA,GAAA,YAAeA,iBAAM,aAAe,EAAA;AACtC,MAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,GAAI,CAAA,KAAA,EAAO,EAAE,CAAG,EAAA;AAClC,QAAM,MAAA,CAAA,GAAI,IAAIA,gBAAA,CAAM,OAAQ,EAAA,CAAA;AAC5B,QAAI,GAAA,CAAA,WAAA,CAAY,GAAG,CAAC,CAAA,CAAA;AACpB,QAAA,MAAM,IAAO,GAAA,aAAA,CAAc,GAAI,CAAA,QAAA,EAAU,CAAC,CAAA,CAAA;AAE1C,QAAI,IAAA,OAAA,CAAQ,qBAAyB,IAAA,GAAA,CAAI,MAAQ,EAAA;AAC/C,UAAA,MAAM,SAAS,GAAI,CAAA,MAAA,CAAA;AACnB,UAAO,MAAA,CAAA,QAAA,CAAS,KAAK,IAAI,CAAA,CAAA;AAAA,SACpB,MAAA;AACL,UAAI,GAAA,CAAA,QAAA,CAAS,KAAK,IAAI,CAAA,CAAA;AAAA,SACxB;AACA,QAAA,KAAA,CAAM,KAAK,IAAI,CAAA,CAAA;AAAA,OACjB;AAAA,KACK,MAAA;AAEL,MAAA,MAAM,IAAO,GAAA,aAAA,CAAc,GAAI,CAAA,QAAA,EAAU,IAAI,MAAM,CAAA,CAAA;AAEnD,MAAI,IAAA,OAAA,CAAQ,qBAAyB,IAAA,GAAA,CAAI,MAAQ,EAAA;AAG/C,QAAA,GAAA,CAAI,gBAAiB,EAAA,CAAA;AACrB,QAAA,GAAA,CAAI,SAAS,OAAQ,EAAA,CAAA;AACrB,QAAA,MAAM,SAAS,GAAI,CAAA,MAAA,CAAA;AACnB,QAAO,MAAA,CAAA,QAAA,CAAS,KAAK,IAAI,CAAA,CAAA;AAAA,OACpB,MAAA;AACL,QAAI,GAAA,CAAA,QAAA,CAAS,KAAK,IAAI,CAAA,CAAA;AAAA,OACxB;AACA,MAAA,KAAA,CAAM,KAAK,IAAI,CAAA,CAAA;AAAA,KACjB;AACA,IAAO,OAAA,KAAA,CAAA;AAAA,GACT;AAAA,EAKA,OAAc,eAAe,MAAwB,EAAA;AACnD,IAAA,IAAI,CAAC,MAAU,IAAA,CAAC,MAAM,OAAQ,CAAA,MAAA,CAAO,QAAQ,CAAG,EAAA;AAC9C,MAAA,OAAA;AAAA,KACF;AACA,IAAS,KAAA,IAAA,CAAA,GAAI,OAAO,QAAS,CAAA,MAAA,GAAS,GAAG,CAAK,IAAA,CAAA,EAAG,EAAE,CAAG,EAAA;AACpD,MAAM,MAAA,KAAA,GAAQ,OAAO,QAAS,CAAA,CAAA,CAAA,CAAA;AAC9B,MAAI,IAAA,KAAA,CAAM,QAAS,CAAA,MAAA,GAAS,CAAG,EAAA;AAC7B,QAAA,IAAA,CAAK,eAAe,KAAK,CAAA,CAAA;AAAA,OAC3B;AACA,MAAI,IAAA,KAAA,CAAM,SAAS,SAAW,EAAA;AAC5B,QAAA,MAAA,CAAO,OAAO,KAAK,CAAA,CAAA;AAAA,OACrB;AAAA,KACF;AAAA,GACF;AAAA,EAKA,OAAc,WAAW,MAAiC,EAAA;AACxD,IAAA,IAAI,MAAS,GAAA,KAAA,CAAA;AACb,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,OAAO,QAAS,CAAA,MAAA,EAAQ,EAAE,CAAG,EAAA;AAC/C,MAAM,MAAA,GAAA,GAAM,OAAO,QAAS,CAAA,CAAA,CAAA,CAAA;AAC5B,MAAI,IAAA,GAAA,CAAI,SAAS,SAAW,EAAA;AAC1B,QAAS,MAAA,GAAA,IAAA,CAAA;AACT,QAAA,MAAA;AAAA,OACF;AACA,MAAI,IAAA,GAAA,CAAI,QAAS,CAAA,MAAA,GAAS,CAAG,EAAA;AAC3B,QAAS,MAAA,GAAA,IAAA,CAAK,WAAW,GAAG,CAAA,CAAA;AAC5B,QAAA,IAAI,MAAQ,EAAA;AACV,UAAA,MAAA;AAAA,SACF;AAAA,OACF;AAAA,KACF;AACA,IAAO,OAAA,MAAA,CAAA;AAAA,GACT;AAAA,EAKA,OAAc,qBAAsB,CAAA,MAAA,EAAwB,OAAkB,EAAA;AAC5E,IAAA,MAAA,CAAO,SAAS,CAAO,GAAA,KAAA;AACrB,MAAI,IAAA,GAAA,CAAI,SAAS,SAAW,EAAA;AAC1B,QAAA,GAAA,CAAI,OAAU,GAAA,OAAA,CAAA;AAAA,OAChB;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AACF,CAAA,CAAA;AA9mBO,IAAM,WAAN,GAAA,aAAA;AAAM,WAAA,CA4eI,gBAAmB,GAAA,IAAIA,gBAAM,CAAA,iBAAA,CAAkB,EAAE,IAAA,EAAM,SAAW,EAAA,KAAA,EAAO,CAAU,EAAA,WAAA,EAAa,IAAM,EAAA,OAAA,EAAS,KAAK,CAAA;;ACvf9H,MAAM,UAAW,CAAA;AAAA,EAItB,aAAoB,8BAClB,cACA,EAAA,IAAA,GAAoB,KAAK,qBACzB,EAAA,KAAA,GAAQ,EACR,EAAA,MAAA,GAAS,EACe,EAAA;AACxB,IAAA,IAAI,cAAgB,EAAA;AAClB,MAAA,MAAM,UAAU,IAAIA,gBAAA,CAAM,WAAY,CAAA,IAAA,EAAM,OAAO,MAAM,CAAA,CAAA;AACzD,MAAA,OAAA,CAAQ,KAAQ,GAAA,IAAA,CAAA;AAChB,MAAA,OAAA,CAAQ,YAAYA,gBAAM,CAAA,YAAA,CAAA;AAC1B,MAAA,OAAA,CAAQ,YAAYA,gBAAM,CAAA,YAAA,CAAA;AAC1B,MAAA,OAAA,CAAQ,OAAOA,gBAAM,CAAA,aAAA,CAAA;AACrB,MAAA,OAAA,CAAQ,OAAU,GAAA,CAAA,CAAA;AAElB,MAAA,MAAM,MAAS,GAAA,cAAA,CAAe,mBAAoB,CAAA,OAAO,CAAE,CAAA,OAAA,CAAA;AAC3D,MAAA,cAAA,CAAe,OAAQ,EAAA,CAAA;AACvB,MAAO,OAAA,OAAA,CAAQ,QAAQ,MAAM,CAAA,CAAA;AAAA,KAC/B;AACA,IAAA,OAAO,OAAQ,CAAA,MAAA,CAAO,IAAI,KAAA,CAAM,yBAAyB,CAAC,CAAA,CAAA;AAAA,GAC5D;AAIF,CAAA;AA3Ba,UA0BI,CAAA,qBAAA,GAAwzBxw9C,MAAM,aAAc,CAAA;AAAA,EAIzB,OAAc,mBAAoB,CAAA,MAAA,EAAwB,YAAsC,EAAA;AAC9F,IAAI,IAAA,EAAE,kBAAkBA,gBAAM,CAAA,IAAA,IAAQ,kBAAkBA,gBAAM,CAAA,IAAA,CAAA,IAAS,CAAC,MAAA,CAAO,QAAU,EAAA;AACvF,MAAO,OAAA,MAAA,CAAA;AAAA,KACT;AAEA,IAAM,MAAA,QAAA,GAAW,IAAI+G,oCAAiB,EAAA,CAAA;AACtC,IAAA,MAAM,wBAA2B,GAAA,IAAA,CAAK,2BAA4B,CAAA,MAAA,CAAO,UAAU,YAAY,CAAA,CAAA;AAC/F,IAAA,IAAI,2BAA2B,CAAG,EAAA;AAChC,MAAM,MAAA,SAAA,GAAY,MAAO,CAAA,KAAA,CAAM,IAAI,CAAA,CAAA;AACnC,MAAA,SAAA,CAAU,WAAW,QAAS,CAAA,MAAA,CAAO,UAAU,QAAS,CAAA,KAAA,IAAS,wBAAwB,CAAA,CAAA;AACzF,MAAO,OAAA,SAAA,CAAA;AAAA,KACT;AACA,IAAO,OAAA,MAAA,CAAA;AAAA,GACT;AAAA,EAKA,OAAe,2BAA4B,CAAA,QAAA,EAAgC,YAA8B,EAAA;AACvG,IAAA,IAAI,KAAQ,GAAA,CAAA,CAAA;AACZ,IAAI,IAAA,QAAA,YAAoB/G,iBAAM,cAAgB,EAAA;AAC5C,MAAA,IAAI,SAAS,KAAO,EAAA;AAClB,QAAQ,KAAA,GAAA,QAAA,CAAS,WAAW,QAAS,CAAA,KAAA,CAAA;AAAA,OACvC;AAAA,KACF;AAEA,IAAA,MAAM,MAAS,GAAA,IAAA,CAAK,KAAM,CAAA,KAAA,GAAQ,YAAY,CAAA,CAAA;AAC9C,IAAA,IAAI,QAAQ,EAAI,EAAA;AACd,MAAO,OAAA,CAAA,CAAA;AAAA,KACT;AACA,IAAO,OAAA,MAAA,CAAA;AAAA,GACT;AACF;;AClCO,MAAM,eAAN,MAAkB;AAAA,EAsCvB,OAAc,uBAAA,CAAwB,MAAiB,GAAA,GAAA,EAAM,aAAwB,GAAA,EAAA,EAAI,cAAyB,GAAA,EAAA,EAAI,SAAY,GAAA,IAAIA,gBAAM,CAAA,OAAA,EAAuB,EAAA;AACjK,IAAA,MAAM,QAAW,GAAA;AAAA,MACf,UAAU,EAAE,KAAA,EAAO,IAAIA,gBAAM,CAAA,KAAA,CAAM,OAAQ,CAAE,EAAA;AAAA,MAC7C,cAAc,EAAE,KAAA,EAAO,IAAIA,gBAAM,CAAA,KAAA,CAAM,QAAQ,CAAE,EAAA;AAAA,MACjD,aAAa,EAAE,KAAA,EAAO,IAAIA,gBAAM,CAAA,KAAA,CAAM,QAAQ,CAAE,EAAA;AAAA,MAChD,MAAA,EAAQ,EAAE,KAAA,EAAO,GAAI,EAAA;AAAA,MACrB,QAAA,EAAU,EAAE,KAAA,EAAO,GAAI,EAAA;AAAA,MACvB,WAAW,EAAE,KAAA,EAAO,aAAa,IAAIA,gBAAA,CAAM,SAAU,EAAA;AAAA,KACvD,CAAA;AAGA,IAAA,MAAM,SAAS,IAAIA,gBAAA,CAAM,cAAe,CAAA,MAAA,EAAQ,eAAe,cAAc,CAAA,CAAA;AAC7E,IAAM,MAAA,MAAA,GAAS,IAAIA,gBAAA,CAAM,cAAe,CAAA;AAAA,MACtC,QAAA;AAAA,MACA,cAAc,IAAK,CAAA,YAAA;AAAA,MACnB,gBAAgB,IAAK,CAAA,cAAA;AAAA,MACrB,MAAMA,gBAAM,CAAA,QAAA;AAAA,KACb,CAAA,CAAA;AAED,IAAA,MAAM,GAAM,GAAA,IAAIA,gBAAM,CAAA,IAAA,CAAK,QAAQ,MAAM,CAAA,CAAA;AACzC,IAAA,GAAA,CAAI,gBAAmB,GAAA,KAAA,CAAA;AACvB,IAAA,GAAA,CAAI,OAAO,IAAK,CAAA,IAAA,CAAA;AAChB,IAAA,GAAA,CAAI,SAAS,UAAa,GAAA,KAAA,CAAA;AAC1B,IAAO,OAAA,GAAA,CAAA;AAAA,GACT;AAAA,EAMA,OAAc,uCAAwC,CAAA,KAAA,EAAoB,WAAmC,EAAA;AAC3G,IAAA,IAAI,CAAC,KAAO,EAAA;AACV,MAAO,OAAA,IAAIA,iBAAM,IAAK,EAAA,CAAA;AAAA,KACxB;AACA,IAAA,MAAM,IAAO,GAAA,UAAA,CAAW,qBAAsB,CAAA,KAAA,EAAO,WAAW,CAAA,CAAA;AAChE,IAAO,OAAA,YAAA,CAAY,qCAAqC,IAAI,CAAA,CAAA;AAAA,GAC9D;AAAA,EAKA,OAAc,qCAAqC,IAAkB,EAAA;AACnE,IAAA,MAAM,WAAY,IAAK,CAAA,GAAA,CAAI,CAAI,GAAA,IAAA,CAAK,IAAI,CAAM,IAAA,IAAA,CAAK,GAAI,CAAA,CAAA,GAAI,KAAK,GAAI,CAAA,CAAA,CAAA,IAAM,KAAK,GAAI,CAAA,CAAA,GAAI,KAAK,GAAI,CAAA,CAAA,CAAA,CAAA;AAChG,IAAA,IAAI,SAAS,QAAW,GAAA,CAAA,CAAA;AAGxB,IAAI,IAAA,MAAA,GAAS,aAAY,cAAgB,EAAA;AACvC,MAAA,MAAA,GAAS,YAAY,CAAA,cAAA,CAAA;AAAA,KACvB,MAAA,IAAW,MAAS,GAAA,YAAA,CAAY,cAAgB,EAAA;AAC9C,MAAA,MAAA,GAAS,YAAY,CAAA,cAAA,CAAA;AAAA,KACvB;AACA,IAAM,MAAA,MAAA,GAAS,IAAIA,gBAAA,CAAM,OAAQ,EAAA,CAAA;AACjC,IAAA,IAAA,CAAK,UAAU,MAAM,CAAA,CAAA;AAErB,IAAA,MAAM,MAAM,YAAY,CAAA,uBAAA,CAAwB,MAAQ,EAAA,KAAA,CAAA,EAAW,QAAW,MAAM,CAAA,CAAA;AAEpF,IAAA,GAAA,CAAI,SAAS,GAAI,CAAA,MAAA,CAAO,CAAG,EAAA,CAAA,EAAG,OAAO,CAAC,CAAA,CAAA;AACtC,IAAO,OAAA,GAAA,CAAA;AAAA,GACT;AAAA,EAMA,aAAoB,qBAAsB,CAAA,SAAA,GAAsB,QAAsC,EAAA;AACpG,IAAM,MAAA,MAAA,GAAS,IAAIA,gBAAA,CAAM,iBAAkB,EAAA,CAAA;AAC3C,IAAO,MAAA,CAAA,OAAA,CAAQ,iBAAiB,SAAY,CAAA,CAAA,CAAA,CAAA,CAAA;AAE5C,IAAA,MAAM,WAAW,CAAC,WAAA,EAAa,YAAY,SAAW,EAAA,YAAA,EAAc,aAAa,UAAU,CAAA,CAAA;AAC3F,IAAA,OAAO,IAAI,OAAA,CAA2B,CAAC,OAAA,EAAS,MAAW,KAAA;AACzD,MAAA,MAAA,CAAO,KAAK,QAAU,EAAA,CAAC,CAAyB,KAAA,OAAA,CAAQ,CAAC,CAAC,CAAA,CAAA;AAAA,KAC3D,CAAA,CAAA;AAAA,GACH;AACF,CAAA,CAAA;AA/GO,IAAM,WAAN,GAAA,aAAA;AAAM,WAAA,CACJ,IAAO,GAAA,QAAA,CAAA;AADH,WAAA,CAEJ,cAAiB,GAAA,GAAA,CAAA;AAFb,WAAA,CAGJ,cAAiB,GAAA,GAAA,CAAA;AAHb,WAAA,CAIJ,YAAe,GAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAA,CAAA,CAAA;AAJX,WAAA,CAYJ,cAAiB,GAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAA,CAAA;;ACpB1B,SAAS,oBAAuB,GAAA;AAC9B,EAAM,MAAA,OAAA,GAAsB,QAAS,CAAA,aAAA,CAAc,KAAK,CAAA,CAAA;AACxD,EAAQ,OAAA,CAAA,YAAA,CAAa,SAAS,6EAA6E,CAAA,CAAA;AAC3G,EAAS,QAAA,CAAA,IAAA,CAAK,YAAY,OAAO,CAAA,CAAA;AACjC,EAAA,MAAM,UAAU,OAAQ,CAAA,YAAA,CAAA;AACxB,EAAA,MAAM,WAAc,GAAA,MAAA,CAAA;AACpB,EAAA,OAAO,WAAc,GAAA,OAAA,CAAA;AACvB,CAAA;AAEO,MAAM,qBAAmD,GAAA;AAAA,EAC9D,IAAM,EAAA,CAAA;AAAA,EACN,CAAG,EAAA,CAAA;AAAA,EACH,EAAI,EAAA,IAAA;AAAA,EACJ,EAAI,EAAA,IAAA;AAAA,EACJ,EAAI,EAAA,MAAA;AAAA,EACJ,EAAI,EAAA,MAAA;AAAA,EACJ,IAAI,oBAAqB,EAAA;AAC3B,EAAA;AAEO,MAAM,SAAuC,GAAA;AAAA,EAClD,IAAM,EAAA,GAAA;AAAA,EACN,CAAG,EAAA,GAAA;AAAA,EACH,EAAI,EAAA,IAAA;AAAA,EACJ,EAAI,EAAA,IAAA;AAAA,EACJ,EAAI,EAAA,IAAA;AAAA,EACJ,EAAI,EAAA,IAAA;AAAA,EACJ,EAAI,EAAA,IAAA;AACN,EAAA;AAEA,MAAM,UAAA,GAAa,CAAC,KAAkB,KAAA;AACpC,EAAA,IAAI,UAAU,CAAG,EAAA;AACf,IAAO,OAAA,MAAA,CAAA;AAAA,GACT;AACA,EAAA,IAAI,UAAU,CAAG,EAAA;AACf,IAAO,OAAA,MAAA,CAAA;AAAA,GACT;AACA,EAAO,OAAA,EAAA,CAAA;AACT,CAAA,CAAA;AAEO,MAAM,UAAa,GAAA,CAAC,IAAc,EAAA,KAAA,GAAgB,CAAc,KAAA;AACrE,EAAO,OAAA,SAAA,CAAU,IAAQ,CAAA,GAAA,UAAA,CAAW,KAAK,CAAA,CAAA;AAC3C,EAAA;AAYO,MAAM,uBAAuB,CAAC,KAAA,EAAe,UAAoB,EAAA,UAAA,EAAoB,QAAgB,CAAqB,KAAA;AAC/H,EAAI,IAAA,UAAA,KAAe,IAAQ,IAAA,UAAA,KAAe,KAAW,CAAA,EAAA;AACnD,IAAa,UAAA,GAAA,UAAA,CAAA;AAAA,GACf;AACA,EAAA,IAAI,eAAe,UAAY,EAAA;AAC7B,IAAO,OAAA;AAAA,MACL,KAAA;AAAA,MACA,IAAA,EAAM,WAAW,UAAU,CAAA;AAAA,KAC7B,CAAA;AAAA,GACK,MAAA;AACL,IAAM,MAAA,WAAA,GAAc,QAAQ,IAAK,CAAA,GAAA,CAAI,sBAAsB,UAAc,CAAA,GAAA,qBAAA,CAAsB,aAAa,KAAK,CAAA,CAAA;AACjH,IAAO,OAAA;AAAA,MACL,KAAO,EAAA,WAAA;AAAA,MACP,IAAM,EAAA,UAAA,CAAW,UAAU,CAAA,GAAI,WAAW,KAAK,CAAA;AAAA,KACjD,CAAA;AAAA,GACF;AACF;;ACtDA,SAAwB,WAAiC,GAAA;AACvD,EAAA,MAAM,GAAyB,GAAA;AAAA,IAC7B,MAAA,EAAQ,IAAIkF,mBAAc,EAAA;AAAA,IAC1B,KAAO,EAAA,CAAA;AAAA,IACP,UAAU,EAAC;AAAA,IACX,YAAc,EAAA,CAAA;AAAA,IACd,YAAA;AAAA,IACA,OAAA;AAAA,GACF,CAAA;AACA,EAAO,OAAA,GAAA,CAAA;AAEP,EAAS,SAAA,YAAA,CAAa,QAAkC,EAAiB,EAAA;AACvE,IAAA,GAAA,CAAI,QAAQ,MAAO,CAAA,MAAA,CAAA;AACnB,IAAI,GAAA,CAAA,QAAA,CAAS,OAAO,CAAC,CAAA,CAAA;AACrB,IAAA,GAAA,CAAI,YAAe,GAAA,CAAA,CAAA;AACnB,IAAA,OAAA,CAAQ,IAAI,MAAO,CAAA,GAAA,CAAI,WAAW,CAAC,CAAA,CAAE,KAAK,EAAE,CAAA,CAAA;AAAA,GAC9C;AAEA,EAAS,SAAA,WAAA,CAAY,KAA6B,KAAe,EAAA;AAC/D,IAAO,OAAA,IAAI,QAAQ,CAAW,OAAA,KAAA;AAC5B,MAAA,GAAA,CAAI,MAAO,CAAA,IAAA;AAAA,QACT,GAAI,CAAA,GAAA;AAAA,QACJ,CAAW,OAAA,KAAA;AACT,UAAI,GAAA,CAAA,YAAA,IAAgB,IAAI,GAAI,CAAA,KAAA,CAAA;AAC5B,UAAA,GAAA,CAAI,SAAS,KAAS,CAAA,GAAA,OAAA,CAAA;AACtB,UAAA,OAAA,CAAQ,OAAO,CAAA,CAAA;AAAA,SACjB;AAAA,OACF,CAAA;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AAEA,EAAA,SAAS,OAAU,GAAA;AACjB,IAAA,GAAA,CAAI,QAAS,CAAA,OAAA,CAAQ,CAAK,CAAA,KAAA,CAAA,CAAE,SAAS,CAAA,CAAA;AAAA,GACvC;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}